<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ConvoBuilder API Manager Professional</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>
        .sidebar { 
            min-height: 100vh; 
            border-right: 1px solid #dee2e6; 
            background: #f8f9fa; 
        }
        .nav-link { cursor: pointer; }
        .log-entry { 
            margin-bottom: 0.5rem; 
            padding: 0.5rem; 
            border-radius: 4px; 
        }
        .log-info { background-color: #d1ecf1; }
        .log-error { background-color: #f8d7da; }
        .log-warning { background-color: #fff3cd; }
        .card { margin-bottom: 1rem; }
        .endpoint-header { 
            display: flex; 
            justify-content: space-between; 
            align-items: center; 
        }
        .tab-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        .code-editor {
            font-family: monospace;
            height: 200px;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            padding: 0.5rem;
        }
        .request-preview {
            font-family: monospace;
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 0.25rem;
            max-height: 400px;
            overflow-y: auto;
        }
        .response-container {
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
            padding: 1rem;
            max-height: 400px;
            overflow-y: auto;
        }
        .environment-badge {
            background-color: #6c757d;
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            margin-left: 0.5rem;
        }
        .environment-development {
            background-color: #28a745;
        }
        .environment-staging {
            background-color: #fd7e14;
        }
        .environment-production {
            background-color: #dc3545;
        }
        .test-result-success {
            background-color: #d4edda;
        }
        .test-result-failure {
            background-color: #f8d7da;
        }
        .test-result-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .response-status {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-weight: bold;
        }
        .response-success {
            background-color: #d4edda;
            color: #155724;
        }
        .response-error {
            background-color: #f8d7da;
            color: #721c24;
        }
        .response-info {
            background-color: #d1ecf1;
            color: #0c5460;
        }
        .response-redirect {
            background-color: #fff3cd;
            color: #856404;
        }
        .response-tabs {
            margin-top: 1rem;
        }
        .visual-transform-container {
            min-height: 300px;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
            padding: 1rem;
            margin-bottom: 1rem;
        }
        .transform-node {
            border: 1px solid #28a745;
            border-radius: 0.25rem;
            padding: 0.5rem;
            margin: 0.5rem;
            background-color: #f8f9fa;
            width: 150px;
            text-align: center;
            cursor: move;
        }
        .transform-connection {
            border-top: 2px dashed #6c757d;
            width: 50px;
            margin: 0 auto;
        }
        .drag-handle {
            cursor: move;
        }
        .history-item {
            cursor: pointer;
        }
        .history-item:hover {
            background-color: #f8f9fa;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav class="col-md-3 col-lg-2 d-md-block sidebar">
                <div class="position-sticky pt-3">
                    <div class="d-flex justify-content-between align-items-center px-3 mb-3">
                        <h5 class="mb-0">ConvoBuilder API Manager Pro</h5>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="environmentDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <span id="currentEnvironment">Development</span>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="environmentDropdown">
                                <li><a class="dropdown-item" href="#" onclick="manager.switchEnvironment('development')">Development</a></li>
                                <li><a class="dropdown-item" href="#" onclick="manager.switchEnvironment('staging')">Staging</a></li>
                                <li><a class="dropdown-item" href="#" onclick="manager.switchEnvironment('production')">Production</a></li>
                            </ul>
                        </div>
                    </div>
                    <ul class="nav flex-column" role="tablist">
                        <li class="nav-item" role="presentation">
                            <a class="nav-link active" data-bs-toggle="tab" href="#dashboard" aria-selected="true" role="tab">
                                <i class="bi bi-speedometer2 me-2"></i> Dashboard
                            </a>
                        </li>
                        <li class="nav-item" role="presentation">
                            <a class="nav-link" data-bs-toggle="tab" href="#endpoints" aria-selected="false" role="tab" tabindex="-1">
                                <i class="bi bi-link-45deg me-2"></i> Endpoints
                            </a>
                        </li>
                        <li class="nav-item" role="presentation">
                            <a class="nav-link" data-bs-toggle="tab" href="#tests" aria-selected="false" role="tab" tabindex="-1">
                                <i class="bi bi-check2-square me-2"></i> Tests
                            </a>
                        </li>
                        <li class="nav-item" role="presentation">
                            <a class="nav-link" data-bs-toggle="tab" href="#webhooks" aria-selected="false" role="tab" tabindex="-1">
                                <i class="bi bi-arrow-down-up me-2"></i> Webhooks
                            </a>
                        </li>
                        <li class="nav-item" role="presentation">
                            <a class="nav-link" data-bs-toggle="tab" href="#mappings" aria-selected="false" role="tab" tabindex="-1">
                                <i class="bi bi-diagram-3 me-2"></i> Mappings
                            </a>
                        </li>
                        <li class="nav-item" role="presentation">
                            <a class="nav-link" data-bs-toggle="tab" href="#transformations" aria-selected="false" role="tab">
                                <i class="bi bi-arrow-left-right me-2"></i> Transformations
                            </a>
                        </li>
                        <li class="nav-item" role="presentation">
                            <a class="nav-link" data-bs-toggle="tab" href="#auth" aria-selected="false" role="tab" tabindex="-1">
                                <i class="bi bi-shield-lock me-2"></i> Authentication
                            </a>
                        </li>
                        <li class="nav-item" role="presentation">
                            <a class="nav-link" data-bs-toggle="tab" href="#docs" aria-selected="false" role="tab" tabindex="-1">
                                <i class="bi bi-file-earmark-text me-2"></i> Documentation
                            </a>
                        </li>
                        <li class="nav-item" role="presentation">
                            <a class="nav-link" data-bs-toggle="tab" href="#monitor" aria-selected="false" role="tab" tabindex="-1">
                                <i class="bi bi-graph-up me-2"></i> Monitoring
                            </a>
                        </li>
                        <li class="nav-item" role="presentation">
                            <a class="nav-link" data-bs-toggle="tab" href="#logs" aria-selected="false" role="tab" tabindex="-1">
                                <i class="bi bi-list-ul me-2"></i> Logs
                            </a>
                        </li>
                        <li class="nav-item" role="presentation">
                            <a class="nav-link" data-bs-toggle="tab" href="#settings" aria-selected="false" role="tab" tabindex="-1">
                                <i class="bi bi-gear me-2"></i> Settings
                            </a>
                        </li>
                    </ul>
                    <hr>
                    <div class="px-3">
                        <div class="mb-2">
                            <button class="btn btn-outline-primary w-100" onclick="manager.saveConfigToCloud()">
                                <i class="bi bi-cloud-upload me-1"></i> Save to Cloud
                            </button>
                        </div>
                        <div>
                            <button class="btn btn-outline-secondary w-100" onclick="manager.loadConfigFromCloud()">
                                <i class="bi bi-cloud-download me-1"></i> Load from Cloud
                            </button>
                        </div>
                    </div>
                </div>
            </nav>

            <!-- Main Content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 py-4">
                <div class="tab-content">
                    <!-- Dashboard Tab -->
                    <div class="tab-pane fade show active" id="dashboard" role="tabpanel">
                        <div class="tab-header">
                            <h2>Dashboard</h2>
                            <div>
                                <span class="environment-badge" id="environmentBadge">Development</span>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-4">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">API Status</h5>
                                        <div class="d-flex align-items-center">
                                            <div class="me-2">
                                                <span class="badge bg-success">Operational</span>
                                            </div>
                                            <div>All systems normal</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">Endpoints</h5>
                                        <h3 id="dashboardEndpointCount">1</h3>
                                        <div class="progress">
                                            <div class="progress-bar bg-info" role="progressbar" style="width: 75%" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">Tests</h5>
                                        <h3 id="dashboardTestCount">0</h3>
                                        <div class="progress">
                                            <div class="progress-bar bg-success" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row mt-4">
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">Recent Activity</h5>
                                        <div class="list-group" id="recentActivity">
                                            <div class="list-group-item list-group-item-action">
                                                <div class="d-flex w-100 justify-content-between">
                                                    <h6 class="mb-1">Configuration saved</h6>
                                                    <small>Just now</small>
                                                </div>
                                                <small>Configuration was saved to local storage</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">Quick Actions</h5>
                                        <div class="d-grid gap-2">
                                            <button class="btn btn-primary" onclick="manager.runAllTests()">
                                                <i class="bi bi-check2-all me-1"></i> Run All Tests
                                            </button>
                                            <button class="btn btn-outline-primary" onclick="manager.generateDocs()">
                                                <i class="bi bi-file-earmark-code me-1"></i> Generate Documentation
                                            </button>
                                            <button class="btn btn-outline-secondary" onclick="manager.exportConfiguration()">
                                                <i class="bi bi-download me-1"></i> Export Configuration
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Endpoints Tab -->
                    <div class="tab-pane fade" id="endpoints" role="tabpanel">
                        <div class="tab-header">
                            <h2>API Endpoints</h2>
                            <button class="btn btn-primary" onclick="manager.addEndpoint()">
                                <i class="bi bi-plus-lg me-1"></i> Add Endpoint
                            </button>
                        </div>
                        
                        <ul class="nav nav-tabs mb-3" id="endpointsTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="endpoints-list-tab" data-bs-toggle="tab" data-bs-target="#endpoints-list" type="button" role="tab" aria-controls="endpoints-list" aria-selected="true">
                                    Endpoints
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="endpoint-tester-tab" data-bs-toggle="tab" data-bs-target="#endpoint-tester" type="button" role="tab" aria-controls="endpoint-tester" aria-selected="false">
                                    Test Console
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="endpoint-history-tab" data-bs-toggle="tab" data-bs-target="#endpoint-history" type="button" role="tab" aria-controls="endpoint-history" aria-selected="false">
                                    Request History
                                </button>
                            </li>
                        </ul>
                        
                        <div class="tab-content" id="endpointsTabsContent">
                            <div class="tab-pane fade show active" id="endpoints-list" role="tabpanel" aria-labelledby="endpoints-list-tab">
                                <div id="endpointsList">
                                    <div class="card" data-id="f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037">
                                        <div class="card-header">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <h5 class="mb-0">New Endpoint</h5>
                                                <div>
                                                    <button class="btn btn-sm btn-outline-secondary me-1" onclick="manager.testEndpoint('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037')">
                                                        <i class="bi bi-play-fill"></i> Test
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" onclick="manager.deleteEndpoint('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037')">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="row mb-3">
                                                <div class="col-md-6">
                                                    <label class="form-label">Name</label>
                                                    <input type="text" class="form-control" value="New Endpoint" 
                                                           onchange="manager.updateEndpoint('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037', {name: this.value})" 
                                                           placeholder="Endpoint Name">
                                                </div>
                                                <div class="col-md-3">
                                                    <label class="form-label">Method</label>
                                                    <select class="form-select" 
                                                            onchange="manager.updateEndpoint('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037', {method: this.value})">
                                                        <option value="GET" selected>GET</option>
                                                        <option value="POST">POST</option>
                                                        <option value="PUT">PUT</option>
                                                        <option value="DELETE">DELETE</option>
                                                        <option value="PATCH">PATCH</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-3">
                                                    <label class="form-label">Version</label>
                                                    <input type="text" class="form-control" value="v1" 
                                                           onchange="manager.updateEndpoint('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037', {version: this.value})" 
                                                           placeholder="API Version">
                                                </div>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">URL</label>
                                                <input type="url" class="form-control" value="" 
                                                       onchange="manager.updateEndpoint('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037', {url: this.value})" 
                                                       placeholder="https://api.example.com/resource">
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Description</label>
                                                <textarea class="form-control" rows="2" 
                                                          onchange="manager.updateEndpoint('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037', {description: this.value})" 
                                                          placeholder="Describe what this endpoint does"></textarea>
                                            </div>
                                            
                                            <ul class="nav nav-tabs mb-3" role="tablist">
                                                <li class="nav-item" role="presentation">
                                                    <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#headers-f7cc7a6f" type="button" role="tab" aria-selected="true">
                                                        Headers
                                                    </button>
                                                </li>
                                                <li class="nav-item" role="presentation">
                                                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#params-f7cc7a6f" type="button" role="tab" aria-selected="false">
                                                        Parameters
                                                    </button>
                                                </li>
                                                <li class="nav-item" role="presentation">
                                                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#body-f7cc7a6f" type="button" role="tab" aria-selected="false">
                                                        Body
                                                    </button>
                                                </li>
                                                <li class="nav-item" role="presentation">
                                                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#auth-f7cc7a6f" type="button" role="tab" aria-selected="false">
                                                        Auth
                                                    </button>
                                                </li>
                                                <li class="nav-item" role="presentation">
                                                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#advanced-f7cc7a6f" type="button" role="tab" aria-selected="false">
                                                        Advanced
                                                    </button>
                                                </li>
                                            </ul>
                                            
                                            <div class="tab-content">
                                                <div class="tab-pane fade show active" id="headers-f7cc7a6f" role="tabpanel">
                                                    <div id="headers-container-f7cc7a6f">
                                                        <div class="row mb-2">
                                                            <div class="col-md-5">
                                                                <input type="text" class="form-control" placeholder="Header Name">
                                                            </div>
                                                            <div class="col-md-5">
                                                                <input type="text" class="form-control" placeholder="Header Value">
                                                            </div>
                                                            <div class="col-md-2">
                                                                <button class="btn btn-outline-danger w-100">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <button class="btn btn-outline-secondary btn-sm" onclick="manager.addHeader('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037')">
                                                        <i class="bi bi-plus-lg"></i> Add Header
                                                    </button>
                                                </div>
                                                
                                                <div class="tab-pane fade" id="params-f7cc7a6f" role="tabpanel">
                                                    <div id="params-container-f7cc7a6f">
                                                        <div class="row mb-2">
                                                            <div class="col-md-5">
                                                                <input type="text" class="form-control" placeholder="Parameter Name">
                                                            </div>
                                                            <div class="col-md-5">
                                                                <input type="text" class="form-control" placeholder="Parameter Value">
                                                            </div>
                                                            <div class="col-md-2">
                                                                <button class="btn btn-outline-danger w-100">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <button class="btn btn-outline-secondary btn-sm" onclick="manager.addParameter('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037')">
                                                        <i class="bi bi-plus-lg"></i> Add Parameter
                                                    </button>
                                                </div>
                                                
                                                <div class="tab-pane fade" id="body-f7cc7a6f" role="tabpanel">
                                                    <div class="mb-3">
                                                        <label class="form-label">Content Type</label>
                                                        <select class="form-select" onchange="manager.updateEndpoint('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037', {contentType: this.value})">
                                                            <option value="application/json">application/json</option>
                                                            <option value="application/xml">application/xml</option>
                                                            <option value="multipart/form-data">multipart/form-data</option>
                                                            <option value="text/plain">text/plain</option>
                                                        </select>
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Request Body</label>
                                                        <textarea class="form-control code-editor" rows="8" 
                                                                  onchange="manager.updateEndpoint('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037', {body: this.value})" 
                                                                  placeholder='{ "key": "value" }'></textarea>
                                                    </div>
                                                </div>
                                                
                                                <div class="tab-pane fade" id="auth-f7cc7a6f" role="tabpanel">
                                                    <div class="mb-3">
                                                        <label class="form-label">Authentication Type</label>
                                                        <select class="form-select" onchange="manager.updateEndpointAuth('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037', {type: this.value})">
                                                            <option value="none">None</option>
                                                            <option value="basic">Basic Auth</option>
                                                            <option value="bearer">Bearer Token</option>
                                                            <option value="api-key">API Key</option>
                                                            <option value="oauth2">OAuth 2.0</option>
                                                        </select>
                                                    </div>
                                                    
                                                    <div id="auth-details-f7cc7a6f" class="auth-none">
                                                        <!-- Auth details will be rendered based on the selected type -->
                                                    </div>
                                                </div>
                                                
                                                <div class="tab-pane fade" id="advanced-f7cc7a6f" role="tabpanel">
                                                    <div class="mb-3">
                                                        <label class="form-label">Timeout (milliseconds)</label>
                                                        <input type="number" class="form-control" value="30000" 
                                                               onchange="manager.updateEndpoint('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037', {timeout: parseInt(this.value)})">
                                                    </div>
                                                    <div class="mb-3">
                                                        <label class="form-label">Retry Count</label>
                                                        <input type="number" class="form-control" value="3" 
                                                               onchange="manager.updateEndpoint('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037', {retryCount: parseInt(this.value)})">
                                                    </div>
                                                    <div class="form-check mb-3">
                                                        <input class="form-check-input" type="checkbox" id="follow-redirects-f7cc7a6f" 
                                                               onchange="manager.updateEndpoint('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037', {followRedirects: this.checked})">
                                                        <label class="form-check-label" for="follow-redirects-f7cc7a6f">
                                                            Follow Redirects
                                                        </label>
                                                    </div>
                                                    <div class="form-check mb-3">
                                                        <input class="form-check-input" type="checkbox" id="cache-response-f7cc7a6f" 
                                                               onchange="manager.updateEndpoint('f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037', {cacheResponse: this.checked})">
                                                        <label class="form-check-label" for="cache-response-f7cc7a6f">
                                                            Cache Response
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="tab-pane fade" id="endpoint-tester" role="tabpanel" aria-labelledby="endpoint-tester-tab">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="card mb-3">
                                            <div class="card-header">
                                                <h5 class="mb-0">Request</h5>
                                            </div>
                                            <div class="card-body">
                                                <div class="mb-3">
                                                    <label class="form-label">Select Endpoint</label>
                                                    <select class="form-select" id="test-endpoint-selector" onchange="manager.loadEndpointForTesting()">
                                                        <option value="">-- Select Endpoint --</option>
                                                        <option value="f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037">New Endpoint</option>
                                                    </select>
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">URL</label>
                                                    <div class="input-group">
                                                        <select class="form-select flex-grow-0 w-auto" id="test-method">
                                                            <option value="GET">GET</option>
                                                            <option value="POST">POST</option>
                                                            <option value="PUT">PUT</option>
                                                            <option value="DELETE">DELETE</option>
                                                            <option value="PATCH">PATCH</option>
                                                        </select>
                                                        <input type="url" class="form-control" id="test-url" placeholder="https://api.example.com/resource">
                                                    </div>
                                                </div>
                                                
                                                <ul class="nav nav-tabs mb-3" role="tablist">
                                                    <li class="nav-item" role="presentation">
                                                        <button class="nav-link active" id="test-headers-tab" data-bs-toggle="tab" data-bs-target="#test-headers" type="button" role="tab" aria-selected="true">
                                                            Headers
                                                        </button>
                                                    </li>
                                                    <li class="nav-item" role="presentation">
                                                        <button class="nav-link" id="test-params-tab" data-bs-toggle="tab" data-bs-target="#test-params" type="button" role="tab" aria-selected="false">
                                                            Params
                                                        </button>
                                                    </li>
                                                    <li class="nav-item" role="presentation">
                                                        <button class="nav-link" id="test-body-tab" data-bs-toggle="tab" data-bs-target="#test-body" type="button" role="tab" aria-selected="false">
                                                            Body
                                                        </button>
                                                    </li>
                                                    <li class="nav-item" role="presentation">
                                                        <button class="nav-link" id="test-auth-tab" data-bs-toggle="tab" data-bs-target="#test-auth" type="button" role="tab" aria-selected="false">
                                                            Auth
                                                        </button>
                                                    </li>
                                                </ul>
                                                
                                                <div class="tab-content">
                                                    <div class="tab-pane fade show active" id="test-headers" role="tabpanel">
                                                        <div id="test-headers-container">
                                                            <div class="row mb-2">
                                                                <div class="col-5">
                                                                    <input type="text" class="form-control" placeholder="Header Name">
                                                                </div>
                                                                <div class="col-5">
                                                                    <input type="text" class="form-control" placeholder="Header Value">
                                                                </div>
                                                                <div class="col-2">
                                                                    <button class="btn btn-outline-danger w-100">
                                                                        <i class="bi bi-trash"></i>
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <button class="btn btn-outline-secondary btn-sm" onclick="manager.addTestHeader()">
                                                            <i class="bi bi-plus-lg"></i> Add Header
                                                        </button>
                                                    </div>
                                                    
                                                    <div class="tab-pane fade" id="test-params" role="tabpanel">
                                                        <div id="test-params-container">
                                                            <div class="row mb-2">
                                                                <div class="col-5">
                                                                    <input type="text" class="form-control" placeholder="Parameter Name">
                                                                </div>
                                                                <div class="col-5">
                                                                    <input type="text" class="form-control" placeholder="Parameter Value">
                                                                </div>
                                                                <div class="col-2">
                                                                    <button class="btn btn-outline-danger w-100">
                                                                        <i class="bi bi-trash"></i>
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <button class="btn btn-outline-secondary btn-sm" onclick="manager.addTestParam()">
                                                            <i class="bi bi-plus-lg"></i> Add Parameter
                                                        </button>
                                                    </div>
                                                    
                                                    <div class="tab-pane fade" id="test-body" role="tabpanel">
                                                        <div class="mb-3">
                                                            <label class="form-label">Content Type</label>
                                                            <select class="form-select" id="test-content-type">
                                                                <option value="application/json">application/json</option>
                                                                <option value="application/xml">application/xml</option>
                                                                <option value="multipart/form-data">multipart/form-data</option>
                                                                <option value="text/plain">text/plain</option>
                                                            </select>
                                                        </div>
                                                        <div class="mb-3">
                                                            <label class="form-label">Request Body</label>
                                                            <textarea class="form-control code-editor" id="test-body-content" rows="8" placeholder='{ "key": "value" }'></textarea>
                                                        </div>
                                                    </div>
                                                    
                                                    <div class="tab-pane fade" id="test-auth" role="tabpanel">
                                                        <div class="mb-3">
                                                            <label class="form-label">Authentication Type</label>
                                                            <select class="form-select" id="test-auth-type" onchange="manager.changeTestAuthType()">
                                                                <option value="none">None</option>
                                                                <option value="basic">Basic Auth</option>
                                                                <option value="bearer">Bearer Token</option>
                                                                <option value="api-key">API Key</option>
                                                                <option value="oauth2">OAuth 2.0</option>
                                                            </select>
                                                        </div>
                                                        
                                                        <div id="test-auth-details" class="auth-none">
                                                            <!-- Auth details will be rendered based on the selected type -->
                                                        </div>
                                                    </div>
                                                </div>
                                                
                                                <div class="d-grid gap-2 mt-3">
                                                    <button class="btn btn-primary" onclick="manager.sendTestRequest()">
                                                        <i class="bi bi-send"></i> Send Request
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <div class="card">
                                            <div class="card-header">
                                                <h5 class="mb-0">Response</h5>
                                            </div>
                                            <div class="card-body">
                                                <div id="test-response-container">
                                                    <div class="text-center p-5 text-muted">
                                                        <i class="bi bi-arrow-left-circle" style="font-size: 2rem;"></i>
                                                        <p class="mt-3">Send a request to see the response</p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="tab-pane fade" id="endpoint-history" role="tabpanel" aria-labelledby="endpoint-history-tab">
                                <div class="card">
                                    <div class="card-header">
                                        <h5 class="mb-0">Request History</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="list-group" id="request-history-list">
                                            <div class="list-group-item text-center p-4 text-muted">
                                                <p>No request history available</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Tests Tab -->
                    <div class="tab-pane fade" id="tests" role="tabpanel">
                        <div class="tab-header">
                            <h2>API Tests</h2>
                            <div>
                                <button class="btn btn-outline-secondary me-2" onclick="manager.runAllTests()">
                                    <i class="bi bi-play-fill me-1"></i> Run All Tests
                                </button>
                                <button class="btn btn-primary" onclick="manager.createTestSuite()">
                                    <i class="bi bi-plus-lg me-1"></i> Create Test Suite
                                </button>
                            </div>
                        </div>
                        
                        <div class="accordion" id="testsAccordion">
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="headingAutomatedTests">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseAutomatedTests" aria-expanded="true" aria-controls="collapseAutomatedTests">
                                        <i class="bi bi-robot me-2"></i> Automated Test Suites
                                    </button>
                                </h2>
                                <div id="collapseAutomatedTests" class="accordion-collapse collapse show" aria-labelledby="headingAutomatedTests">
                                    <div class="accordion-body">
                                        <div id="automatedTestsList">
                                            <div class="text-center p-4 text-muted">
                                                <p>No automated test suites yet. Create one to get started.</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="headingTestResults">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTestResults" aria-expanded="false" aria-controls="collapseTestResults">
                                        <i class="bi bi-list-check me-2"></i> Test Results
                                    </button>
                                </h2>
                                <div id="collapseTestResults" class="accordion-collapse collapse" aria-labelledby="headingTestResults">
                                    <div class="accordion-body">
                                        <div id="testResultsList">
                                            <div class="text-center p-4 text-muted">
                                                <p>No test results available yet. Run a test to see results.</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="headingMockResponses">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseMockResponses" aria-expanded="false" aria-controls="collapseMockResponses">
                                        <i class="bi bi-file-earmark-code me-2"></i> Mock Responses
                                    </button>
                                </h2>
                                <div id="collapseMockResponses" class="accordion-collapse collapse" aria-labelledby="headingMockResponses">
                                    <div class="accordion-body">
                                        <div class="d-flex justify-content-end mb-3">
                                            <button class="btn btn-primary btn-sm" onclick="manager.createMockResponse()">
                                                <i class="bi bi-plus-lg me-1"></i> Create Mock Response
                                            </button>
                                        </div>
                                        <div id="mockResponsesList">
                                            <div class="text-center p-4 text-muted">
                                                <p>No mock responses configured yet.</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Webhooks Tab -->
                    <div class="tab-pane fade" id="webhooks" role="tabpanel">
                        <div class="tab-header">
                            <h2>Webhooks</h2>
                            <button class="btn btn-primary" onclick="manager.addWebhook()">
                                <i class="bi bi-plus-lg me-1"></i> Add Webhook
                            </button>
                        </div>
                        <div id="webhooksList" class="mt-3">
                            <div class="text-center p-5 text-muted">
                                <p>No webhooks configured yet.</p>
                            </div>
                        </div>
                    </div>

                    <!-- Mappings Tab -->
                    <div class="tab-pane fade" id="mappings" role="tabpanel">
                        <div class="tab-header">
                            <h2>Field Mappings</h2>
                            <button class="btn btn-primary" onclick="manager.addMapping()">
                                <i class="bi bi-plus-lg me-1"></i> Add Mapping
                            </button>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Mapping Type</label>
                            <select id="mappingType" class="form-select">
                                <option value="simple">Simple Mapping</option>
                                <option value="transform">Transform</option>
                                <option value="conditional">Conditional</option>
                                <option value="array">Array Mapping</option>
                            </select>
                        </div>
                        <div id="mappingsList">
                            <div class="text-center p-5 text-muted">
                                <p>No mappings configured yet.</p>
                            </div>
                        </div>
                    </div>

                    <!-- Transformations Tab -->
                    <div class="tab-pane fade" id="transformations" role="tabpanel">
                        <div class="tab-header">
                            <h2>Transformations</h2>
                            <button class="btn btn-primary" onclick="manager.addTransformation()">
                                <i class="bi bi-plus-lg me-1"></i> Add Transformation
                            </button>
                        </div>
                        
                        <ul class="nav nav-tabs mb-3" id="transformationsTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="code-transform-tab" data-bs-toggle="tab" data-bs-target="#code-transform" type="button" role="tab" aria-controls="code-transform" aria-selected="true">
                                    Code Transformations
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="visual-transform-tab" data-bs-toggle="tab" data-bs-target="#visual-transform" type="button" role="tab" aria-controls="visual-transform" aria-selected="false">
                                    Visual Builder
                                </button>
                            </li>
                        </ul>
                        
                        <div class="tab-content" id="transformationsTabsContent">
                            <div class="tab-pane fade show active" id="code-transform" role="tabpanel" aria-labelledby="code-transform-tab">
                                <div id="transformationsList" class="mt-3">
                                    <div class="text-center p-5 text-muted">
                                        <p>No transformations configured yet.</p>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="tab-pane fade" id="visual-transform" role="tabpanel" aria-labelledby="visual-transform-tab">
                                <div class="card">
                                    <div class="card-header">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <h5 class="mb-0">Visual Transformation Builder</h5>
                                            <div>
                                                <button class="btn btn-outline-secondary btn-sm" onclick="manager.exportVisualTransform()">
                                                    <i class="bi bi-code-slash me-1"></i> Export to Code
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <div class="row mb-3">
                                            <div class="col-md-6">
                                                <label class="form-label">Transformation Name</label>
                                                <input type="text" class="form-control" id="visual-transform-name" placeholder="Enter a name for this transformation">
                                            </div>
                                            <div class="col-md-6">
                                                <label class="form-label">Transformation Type</label>
                                                <select class="form-select" id="visual-transform-type">
                                                    <option value="data-mapping">Data Mapping</option>
                                                    <option value="format-conversion">Format Conversion</option>
                                                    <option value="validation">Validation</option>
                                                    <option value="enrichment">Data Enrichment</option>
                                                </select>
                                            </div>
                                        </div>
                                        
                                        <div class="visual-transform-container" id="visual-transform-builder">
                                            <div class="row">
                                                <div class="col-md-4">
                                                    <div class="transform-node">
                                                        <div class="drag-handle">Input Data</div>
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    <div class="transform-connection"></div>
                                                    <div class="transform-node">
                                                        <div class="drag-handle">Transform</div>
                                                    </div>
                                                </div>
                                                <div class="col-md-4">
                                                    <div class="transform-connection"></div>
                                                    <div class="transform-node">
                                                        <div class="drag-handle">Output Data</div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div class="d-flex justify-content-between mt-3">
                                            <button class="btn btn-outline-secondary" onclick="manager.addTransformNode()">
                                                <i class="bi bi-plus-lg me-1"></i> Add Node
                                            </button>
                                            <button class="btn btn-primary" onclick="manager.saveVisualTransform()">
                                                <i class="bi bi-save me-1"></i> Save Transformation
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Authentication Tab -->
                    <div class="tab-pane fade" id="auth" role="tabpanel">
                        <div class="tab-header">
                            <h2>Authentication</h2>
                            <button class="btn btn-primary" onclick="manager.addAuthProfile()">
                                <i class="bi bi-plus-lg me-1"></i> Add Profile
                            </button>
                        </div>
                        
                        <ul class="nav nav-tabs mb-3" id="authTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="auth-profiles-tab" data-bs-toggle="tab" data-bs-target="#auth-profiles" type="button" role="tab" aria-controls="auth-profiles" aria-selected="true">
                                    Auth Profiles
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="api-keys-tab" data-bs-toggle="tab" data-bs-target="#api-keys" type="button" role="tab" aria-controls="api-keys" aria-selected="false">
                                    API Keys
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="oauth-settings-tab" data-bs-toggle="tab" data-bs-target="#oauth-settings" type="button" role="tab" aria-controls="oauth-settings" aria-selected="false">
                                    OAuth Settings
                                </button>
                            </li>
                        </ul>
                        
                        <div class="tab-content" id="authTabsContent">
                            <div class="tab-pane fade show active" id="auth-profiles" role="tabpanel" aria-labelledby="auth-profiles-tab">
                                <div id="authProfilesList">
                                    <div class="text-center p-5 text-muted">
                                        <p>No authentication profiles configured yet.</p>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="tab-pane fade" id="api-keys" role="tabpanel" aria-labelledby="api-keys-tab">
                                <div class="d-flex justify-content-end mb-3">
                                    <button class="btn btn-primary btn-sm" onclick="manager.generateApiKey()">
                                        <i class="bi bi-key me-1"></i> Generate API Key
                                    </button>
                                </div>
                                <div id="apiKeysList">
                                    <div class="text-center p-5 text-muted">
                                        <p>No API keys generated yet.</p>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="tab-pane fade" id="oauth-settings" role="tabpanel" aria-labelledby="oauth-settings-tab">
                                <div class="card">
                                    <div class="card-header">
                                        <h5 class="mb-0">OAuth 2.0 Configuration</h5>
                                    </div>
                                    <div class="card-body">
                                        <form id="oauthSettingsForm">
                                            <div class="mb-3">
                                                <label class="form-label">Client ID</label>
                                                <input type="text" class="form-control" id="oauth-client-id" placeholder="Enter Client ID">
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Client Secret</label>
                                                <input type="password" class="form-control" id="oauth-client-secret" placeholder="Enter Client Secret">
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Authorization URL</label>
                                                <input type="url" class="form-control" id="oauth-auth-url" placeholder="https://example.com/oauth/authorize">
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Token URL</label>
                                                <input type="url" class="form-control" id="oauth-token-url" placeholder="https://example.com/oauth/token">
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Redirect URI</label>
                                                <input type="url" class="form-control" id="oauth-redirect-uri" placeholder="https://example.com/callback">
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Scope</label>
                                                <input type="text" class="form-control" id="oauth-scope" placeholder="read write">
                                            </div>
                                            <button type="submit" class="btn btn-primary">Save OAuth Settings</button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Documentation Tab -->
                    <div class="tab-pane fade" id="docs" role="tabpanel">
                        <div class="tab-header">
                            <h2>API Documentation</h2>
                            <div>
                                <button class="btn btn-outline-primary me-2" onclick="manager.exportOpenAPI()">
                                    <i class="bi bi-file-earmark-code me-1"></i> Export OpenAPI
                                </button>
                                <button class="btn btn-primary" onclick="manager.generateDocs()">
                                    <i class="bi bi-filetype-md me-1"></i> Generate Docs
                                </button>
                            </div>
                        </div>
                        
                        <div id="docsContent" class="mt-3">
                            <div class="alert alert-info">
                                Click "Generate Docs" to create documentation based on your configured endpoints and tests.
                            </div>
                            
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="mb-0">API Info</h5>
                                </div>
                                <div class="card-body">
                                    <form id="apiInfoForm">
                                        <div class="mb-3">
                                            <label class="form-label">API Title</label>
                                            <input type="text" class="form-control" id="api-title" placeholder="My API">
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Description</label>
                                            <textarea class="form-control" id="api-description" rows="3" placeholder="Describe your API..."></textarea>
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col-md-6">
                                                <label class="form-label">Version</label>
                                                <input type="text" class="form-control" id="api-version" placeholder="1.0.0">
                                            </div>
                                            <div class="col-md-6">
                                                <label class="form-label">Base URL</label>
                                                <input type="url" class="form-control" id="api-base-url" placeholder="https://api.example.com">
                                            </div>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Save API Info</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Monitoring Tab -->
                    <div class="tab-pane fade" id="monitor" role="tabpanel">
                        <div class="tab-header">
                            <h2>API Monitoring</h2>
                            <div>
                                <button class="btn btn-outline-secondary me-2" onclick="manager.refreshMetrics()">
                                    <i class="bi bi-arrow-repeat me-1"></i> Refresh
                                </button>
                                <button class="btn btn-primary" onclick="manager.configureMonitoring()">
                                    <i class="bi bi-gear me-1"></i> Configure
                                </button>
                            </div>
                        </div>
                        
                        <div class="row mb-4">
                            <div class="col-md-3">
                                <div class="card">
                                    <div class="card-body text-center">
                                        <h6 class="text-muted">Total Requests</h6>
                                        <h3 id="totalRequestsCount">0</h3>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card">
                                    <div class="card-body text-center">
                                        <h6 class="text-muted">Success Rate</h6>
                                        <h3 id="successRatePercent">0%</h3>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card">
                                    <div class="card-body text-center">
                                        <h6 class="text-muted">Avg. Response Time</h6>
                                        <h3 id="avgResponseTime">0ms</h3>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card">
                                    <div class="card-body text-center">
                                        <h6 class="text-muted">Active Endpoints</h6>
                                        <h3 id="activeEndpointsCount">0</h3>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="mb-0">Request Volume</h5>
                            </div>
                            <div class="card-body">
                                <div id="requestVolumeChart" style="height: 300px; background-color: #f8f9fa; display: flex; align-items: center; justify-content: center;">
                                    <p class="text-muted">Chart will display here</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header">
                                        <h5 class="mb-0">Response Status Distribution</h5>
                                    </div>
                                    <div class="card-body">
                                        <div id="statusDistributionChart" style="height: 200px; background-color: #f8f9fa; display: flex; align-items: center; justify-content: center;">
                                            <p class="text-muted">Chart will display here</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header">
                                        <h5 class="mb-0">Response Time</h5>
                                    </div>
                                    <div class="card-body">
                                        <div id="responseTimeChart" style="height: 200px; background-color: #f8f9fa; display: flex; align-items: center; justify-content: center;">
                                            <p class="text-muted">Chart will display here</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Logs Tab -->
                    <div class="tab-pane fade" id="logs" role="tabpanel">
                        <div class="tab-header">
                            <h2>System Logs</h2>
                            <div>
                                <button class="btn btn-outline-secondary me-2" onclick="manager.clearLogs()">
                                    <i class="bi bi-trash me-1"></i> Clear Logs
                                </button>
                                <button class="btn btn-primary" onclick="manager.exportLogs()">
                                    <i class="bi bi-download me-1"></i> Export Logs
                                </button>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <select id="logLevel" class="form-select">
                                    <option value="all">All Levels</option>
                                    <option value="info">Info</option>
                                    <option value="warning">Warning</option>
                                    <option value="error">Error</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <input type="date" id="logDate" class="form-control">
                            </div>
                            <div class="col-md-4">
                                <div class="input-group">
                                    <input type="text" id="logSearch" class="form-control" placeholder="Search logs...">
                                    <button class="btn btn-outline-secondary" type="button" onclick="manager.searchLogs()">
                                        <i class="bi bi-search"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div id="logsList" class="mt-3">
                            <div class="log-entry log-info">
                                <div class="d-flex justify-content-between">
                                    <span class="timestamp">29/03/2025, 12:33:12</span>
                                    <span class="badge bg-info">info</span>
                                </div>
                                <div class="message mt-1">Configuration saved</div>
                            </div>
                        </div>
                    </div>

                    <!-- Settings Tab -->
                    <div class="tab-pane fade" id="settings" role="tabpanel">
                        <div class="tab-header">
                            <h2>Settings</h2>
                            <button class="btn btn-primary" onclick="document.getElementById('settingsForm').submit()">
                                <i class="bi bi-save me-1"></i> Save Settings
                            </button>
                        </div>
                        
                        <ul class="nav nav-tabs mb-3" id="settingsTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="general-settings-tab" data-bs-toggle="tab" data-bs-target="#general-settings" type="button" role="tab" aria-controls="general-settings" aria-selected="true">
                                    General
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="network-settings-tab" data-bs-toggle="tab" data-bs-target="#network-settings" type="button" role="tab" aria-controls="network-settings" aria-selected="false">
                                    Network
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="storage-settings-tab" data-bs-toggle="tab" data-bs-target="#storage-settings" type="button" role="tab" aria-controls="storage-settings" aria-selected="false">
                                    Storage
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="monitoring-settings-tab" data-bs-toggle="tab" data-bs-target="#monitoring-settings" type="button" role="tab" aria-controls="monitoring-settings" aria-selected="false">
                                    Monitoring
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="notifications-settings-tab" data-bs-toggle="tab" data-bs-target="#notifications-settings" type="button" role="tab" aria-controls="notifications-settings" aria-selected="false">
                                    Notifications
                                </button>
                            </li>
                        </ul>
                        
                        <form id="settingsForm" class="mt-3">
                            <div class="tab-content" id="settingsTabsContent">
                                <div class="tab-pane fade show active" id="general-settings" role="tabpanel" aria-labelledby="general-settings-tab">
                                    <div class="mb-3">
                                        <label class="form-label">Default Response Format</label>
                                        <select class="form-select" id="defaultFormat">
                                            <option value="json">JSON</option>
                                            <option value="xml">XML</option>
                                            <option value="yaml">YAML</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Theme</label>
                                        <select class="form-select" id="uiTheme">
                                            <option value="light">Light</option>
                                            <option value="dark">Dark</option>
                                            <option value="system">System Default</option>
                                        </select>
                                    </div>
                                    <div class="form-check form-switch mb-3">
                                        <input class="form-check-input" type="checkbox" id="autoSaveConfig">
                                        <label class="form-check-label" for="autoSaveConfig">Auto-save configuration</label>
                                    </div>
                                </div>
                                
                                <div class="tab-pane fade" id="network-settings" role="tabpanel" aria-labelledby="network-settings-tab">
                                    <div class="mb-3">
                                        <label class="form-label">Rate Limit (requests/minute)</label>
                                        <input type="number" class="form-control" id="rateLimit" min="1" value="100">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Default Request Timeout (seconds)</label>
                                        <input type="number" class="form-control" id="timeout" min="1" value="30">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Default Retry Count</label>
                                        <input type="number" class="form-control" id="retryCount" min="0" value="3">
                                    </div>
                                    <div class="form-check form-switch mb-3">
                                        <input class="form-check-input" type="checkbox" id="followRedirects" checked>
                                        <label class="form-check-label" for="followRedirects">Follow Redirects</label>
                                    </div>
                                    <div class="form-check form-switch mb-3">
                                        <input class="form-check-input" type="checkbox" id="enableCaching">
                                        <label class="form-check-label" for="enableCaching">Enable Response Caching</label>
                                    </div>
                                </div>
                                
                                <div class="tab-pane fade" id="storage-settings" role="tabpanel" aria-labelledby="storage-settings-tab">
                                    <div class="mb-3">
                                        <label class="form-label">Storage Provider</label>
                                        <select class="form-select" id="storageProvider" onchange="manager.updateStorageProvider(this.value)">
                                            <option value="local">Local Storage</option>
                                            <option value="s3">Amazon S3</option>
                                            <option value="gcs">Google Cloud Storage</option>
                                            <option value="azure">Azure Blob Storage</option>
                                        </select>
                                    </div>
                                    
                                    <div id="s3Settings" class="storage-provider-settings d-none">
                                        <div class="mb-3">
                                            <label class="form-label">S3 Bucket Name</label>
                                            <input type="text" class="form-control" id="s3BucketName" placeholder="my-api-config-bucket">
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">AWS Region</label>
                                            <input type="text" class="form-control" id="awsRegion" placeholder="us-east-1">
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Access Key ID</label>
                                            <input type="text" class="form-control" id="awsAccessKey" placeholder="AKIAXXXXXXXXXXXXXXXX">
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Secret Access Key</label>
                                            <input type="password" class="form-control" id="awsSecretKey" placeholder="Your AWS secret key">
                                        </div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <label class="form-label">Backup Frequency</label>
                                        <select class="form-select" id="backupFrequency">
                                            <option value="never">Never</option>
                                            <option value="hourly">Hourly</option>
                                            <option value="daily">Daily</option>
                                            <option value="weekly">Weekly</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Keep Backup Versions</label>
                                        <input type="number" class="form-control" id="backupVersions" min="1" value="5">
                                    </div>
                                </div>
                                
                                <div class="tab-pane fade" id="monitoring-settings" role="tabpanel" aria-labelledby="monitoring-settings-tab">
                                    <div class="form-check form-switch mb-3">
                                        <input class="form-check-input" type="checkbox" id="enableMonitoring" checked>
                                        <label class="form-check-label" for="enableMonitoring">Enable API Monitoring</label>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Health Check Interval (minutes)</label>
                                        <input type="number" class="form-control" id="healthCheckInterval" min="1" value="5">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Response Time Threshold (ms)</label>
                                        <input type="number" class="form-control" id="responseTimeThreshold" min="100" value="1000">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Error Rate Threshold (%)</label>
                                        <input type="number" class="form-control" id="errorRateThreshold" min="1" max="100" value="5">
                                    </div>
                                </div>
                                
                                <div class="tab-pane fade" id="notifications-settings" role="tabpanel" aria-labelledby="notifications-settings-tab">
                                    <div class="form-check form-switch mb-3">
                                        <input class="form-check-input" type="checkbox" id="enableEmailNotifications">
                                        <label class="form-check-label" for="enableEmailNotifications">Email Notifications</label>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Email Address</label>
                                        <input type="email" class="form-control" id="notificationEmail" placeholder="user@example.com">
                                    </div>
                                    <div class="form-check form-switch mb-3">
                                        <input class="form-check-input" type="checkbox" id="enableSlackNotifications">
                                        <label class="form-check-label" for="enableSlackNotifications">Slack Notifications</label>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Slack Webhook URL</label>
                                        <input type="url" class="form-control" id="slackWebhookUrl" placeholder="https://hooks.slack.com/services/...">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Notify On</label>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="notifyOnError" checked>
                                            <label class="form-check-label" for="notifyOnError">Errors</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="notifyOnWarning" checked>
                                            <label class="form-check-label" for="notifyOnWarning">Warnings</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="notifyOnTest">
                                            <label class="form-check-label" for="notifyOnTest">Test Results</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Modals -->
    <div class="modal fade" id="testCreationModal" tabindex="-1" aria-labelledby="testCreationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="testCreationModalLabel">Create Test Suite</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="testSuiteForm">
                        <div class="mb-3">
                            <label class="form-label">Test Suite Name</label>
                            <input type="text" class="form-control" id="testSuiteName" placeholder="My Test Suite">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" id="testSuiteDescription" rows="2" placeholder="Describe the purpose of this test suite"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Endpoint</label>
                            <select class="form-select" id="testSuiteEndpoint">
                                <option value="">Select an endpoint</option>
                                <option value="f7cc7a6f-00ef-48aa-ae34-bb9ba33fd037">New Endpoint</option>
                            </select>
                        </div>
                        
                        <h6 class="mt-4 mb-3">Test Cases</h6>
                        <div id="testCasesContainer">
                            <div class="card mb-3 test-case" data-id="1">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <div>Test Case #1</div>
                                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="manager.removeTestCase(1)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">Test Name</label>
                                        <input type="text" class="form-control" placeholder="Test case name">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Input Parameters</label>
                                        <textarea class="form-control code-editor" rows="3" placeholder='{ "key": "value" }'></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Expected Status Code</label>
                                        <input type="number" class="form-control" value="200">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Expected Response</label>
                                        <textarea class="form-control code-editor" rows="3" placeholder='{ "key": "value" }'></textarea>
                                    </div>
                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="checkbox" id="validateExactMatch1">
                                        <label class="form-check-label" for="validateExactMatch1">
                                            Validate Exact Match
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <button type="button" class="btn btn-outline-secondary" onclick="manager.addTestCase()">
                            <i class="bi bi-plus-lg me-1"></i> Add Test Case
                        </button>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="manager.saveTestSuite()">Save Test Suite</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="mockResponseModal" tabindex="-1" aria-labelledby="mockResponseModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="mockResponseModalLabel">Create Mock Response</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="mockResponseForm">
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <input type="text" class="form-control" id="mockResponseName" placeholder="Mock Response Name">
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">HTTP Method</label>
                                <select class="form-select" id="mockResponseMethod">
                                    <option value="GET">GET</option>
                                    <option value="POST">POST</option>
                                    <option value="PUT">PUT</option>
                                    <option value="DELETE">DELETE</option>
                                    <option value="PATCH">PATCH</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Path Pattern</label>
                                <input type="text" class="form-control" id="mockResponsePath" placeholder="/api/resource/:id">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Status Code</label>
                                <input type="number" class="form-control" id="mockResponseStatus" value="200">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Delay (ms)</label>
                                <input type="number" class="form-control" id="mockResponseDelay" value="0">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Headers</label>
                            <div id="mockResponseHeadersContainer">
                                <div class="row mb-2">
                                    <div class="col-md-5">
                                        <input type="text" class="form-control" placeholder="Header Name">
                                    </div>
                                    <div class="col-md-5">
                                        <input type="text" class="form-control" placeholder="Header Value">
                                    </div>
                                    <div class="col-md-2">
                                        <button type="button" class="btn btn-outline-danger w-100">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="manager.addMockHeader()">
                                <i class="bi bi-plus-lg"></i> Add Header
                            </button>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Response Body</label>
                            <textarea class="form-control code-editor" id="mockResponseBody" rows="8" placeholder='{ "key": "value" }'></textarea>
                        </div>
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="mockResponseUseTemplate">
                            <label class="form-check-label" for="mockResponseUseTemplate">
                                Use Response Template
                            </label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="manager.saveMockResponse()">Save Mock Response</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="authProfileModal" tabindex="-1" aria-labelledby="authProfileModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="authProfileModalLabel">Add Authentication Profile</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="authProfileForm">
                        <div class="mb-3">
                            <label class="form-label">Profile Name</label>
                            <input type="text" class="form-control" id="authProfileName" placeholder="My Auth Profile">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Authentication Type</label>
                            <select class="form-select" id="authProfileType" onchange="manager.changeAuthProfileType()">
                                <option value="basic">Basic Auth</option>
                                <option value="bearer">Bearer Token</option>
                                <option value="api-key">API Key</option>
                                <option value="oauth2">OAuth 2.0</option>
                            </select>
                        </div>
                        
                        <div id="authProfileDetails">
                            <!-- Auth profile details will be rendered based on the selected type -->
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="manager.saveAuthProfile()">Save Profile</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmationModalLabel">Confirmation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="confirmationMessage">
                    Are you sure you want to proceed?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirmButton">Confirm</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/aws-sdk/2.1404.0/aws-sdk.min.js"></script>
    <script>
        class APIManager {
            constructor() {
                this.config = {
                    endpoints: [],
                    webhooks: [],
                    mappings: [],
                    transformations: [],
                    tests: [],
                    authProfiles: [],
                    mockResponses: [],
                    apiKeys: [],
                    settings: {
                        defaultFormat: 'json',
                        rateLimit: 100,
                        timeout: 30,
                        retryCount: 3,
                        followRedirects: true,
                        cacheResponse: false,
                        storage: {
                            provider: 'local',
                            s3: {
                                bucketName: '',
                                region: '',
                                accessKeyId: '',
                                secretAccessKey: ''
                            }
                        },
                        monitoring: {
                            enabled: true,
                            healthCheckInterval: 5,
                            responseTimeThreshold: 1000,
                            errorRateThreshold: 5
                        },
                        notifications: {
                            email: {
                                enabled: false,
                                address: ''
                            },
                            slack: {
                                enabled: false,
                                webhookUrl: ''
                            },
                            notifyOn: {
                                error: true,
                                warning: true,
                                test: false
                            }
                        }
                    },
                    apiInfo: {
                        title: 'My API',
                        description: 'API Manager Configuration',
                        version: '1.0.0',
                        baseUrl: ''
                    }
                };
                this.logs = [];
                this.currentEnvironment = 'development';
                this.requestHistory = [];
                this.testCaseCounter = 1;
                this.mockHeaders = [];
                this.metrics = {
                    totalRequests: 0,
                    successRate: 0,
                    avgResponseTime: 0,
                    activeEndpoints: 0
                };
                this.initialize();
            }

            initialize() {
                this.loadConfig();
                this.setupEventListeners();
                this.renderAll();
                this.updateDashboard();
                this.log('API Manager initialized', 'info');
            }

            loadConfig() {
                const savedConfig = localStorage.getItem(`apiConfig_${this.currentEnvironment}`);
                if (savedConfig) {
                    try {
                        this.config = JSON.parse(savedConfig);
                        this.log('Configuration loaded', 'info');
                    } catch (error) {
                        this.log('Error loading configuration', 'error', error);
                    }
                }
            }

            // Continue from previous artifact - API Manager implementation
            saveConfig() {
                try {
                    localStorage.setItem(`apiConfig_${this.currentEnvironment}`, JSON.stringify(this.config));
                    this.log('Configuration saved', 'info');
                    this.updateDashboard();
                    this.addRecentActivity('Configuration saved');
                    return true;
                } catch (error) {
                    this.log('Error saving configuration', 'error', error);
                    return false;
                }
            }

            saveConfigToCloud() {
                // Check if we have S3 configuration
                if (this.config.settings.storage.provider === 's3') {
                    const s3Config = this.config.settings.storage.s3;
                    if (!s3Config.bucketName || !s3Config.region || !s3Config.accessKeyId || !s3Config.secretAccessKey) {
                        this.showAlert('S3 configuration is incomplete. Please check Storage settings.', 'warning');
                        return false;
                    }

                    // Configure AWS SDK
                    AWS.config.update({
                        region: s3Config.region,
                        accessKeyId: s3Config.accessKeyId,
                        secretAccessKey: s3Config.secretAccessKey
                    });

                    const s3 = new AWS.S3();
                    const params = {
                        Bucket: s3Config.bucketName,
                        Key: `apimanager_${this.currentEnvironment}_${new Date().toISOString()}.json`,
                        Body: JSON.stringify(this.config),
                        ContentType: 'application/json'
                    };

                    s3.putObject(params, (err, data) => {
                        if (err) {
                            this.log('Error saving to S3', 'error', err);
                            this.showAlert('Failed to save configuration to S3: ' + err.message, 'danger');
                        } else {
                            this.log('Configuration saved to S3', 'info');
                            this.showAlert('Configuration successfully saved to S3', 'success');
                            this.addRecentActivity('Configuration saved to S3');
                        }
                    });

                    return true;
                } else {
                    this.showAlert('S3 storage provider not configured. Please check Storage settings.', 'warning');
                    return false;
                }
            }

            loadConfigFromCloud() {
                // Check if we have S3 configuration
                if (this.config.settings.storage.provider === 's3') {
                    const s3Config = this.config.settings.storage.s3;
                    if (!s3Config.bucketName || !s3Config.region || !s3Config.accessKeyId || !s3Config.secretAccessKey) {
                        this.showAlert('S3 configuration is incomplete. Please check Storage settings.', 'warning');
                        return false;
                    }

                    // Configure AWS SDK
                    AWS.config.update({
                        region: s3Config.region,
                        accessKeyId: s3Config.accessKeyId,
                        secretAccessKey: s3Config.secretAccessKey
                    });

                    const s3 = new AWS.S3();
                    
                    // First list all objects to find the latest
                    const params = {
                        Bucket: s3Config.bucketName,
                        Prefix: `apimanager_${this.currentEnvironment}_`
                    };

                    s3.listObjects(params, (err, data) => {
                        if (err) {
                            this.log('Error listing S3 objects', 'error', err);
                            this.showAlert('Failed to list configurations from S3: ' + err.message, 'danger');
                        } else {
                            if (data.Contents.length === 0) {
                                this.showAlert('No configurations found in S3', 'warning');
                                return;
                            }

                            // Sort by date to get the latest
                            data.Contents.sort((a, b) => new Date(b.LastModified) - new Date(a.LastModified));
                            const latestKey = data.Contents[0].Key;

                            // Now get the latest config file
                            const getParams = {
                                Bucket: s3Config.bucketName,
                                Key: latestKey
                            };

                            s3.getObject(getParams, (getErr, getData) => {
                                if (getErr) {
                                    this.log('Error loading from S3', 'error', getErr);
                                    this.showAlert('Failed to load configuration from S3: ' + getErr.message, 'danger');
                                } else {
                                    try {
                                        const configData = JSON.parse(getData.Body.toString());
                                        this.config = configData;
                                        this.renderAll();
                                        this.updateDashboard();
                                        this.log('Configuration loaded from S3', 'info');
                                        this.showAlert('Configuration successfully loaded from S3', 'success');
                                        this.addRecentActivity('Configuration loaded from S3');
                                    } catch (parseErr) {
                                        this.log('Error parsing S3 configuration', 'error', parseErr);
                                        this.showAlert('Failed to parse configuration from S3: ' + parseErr.message, 'danger');
                                    }
                                }
                            });
                        }
                    });

                    return true;
                } else {
                    this.showAlert('S3 storage provider not configured. Please check Storage settings.', 'warning');
                    return false;
                }
            }

            exportConfiguration() {
                try {
                    const configJson = JSON.stringify(this.config, null, 2);
                    const blob = new Blob([configJson], { type: 'application/json' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `apimanager_${this.currentEnvironment}_config.json`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                    this.log('Configuration exported', 'info');
                    this.addRecentActivity('Configuration exported');
                } catch (error) {
                    this.log('Error exporting configuration', 'error', error);
                    this.showAlert('Failed to export configuration: ' + error.message, 'danger');
                }
            }

            importConfiguration(file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        const configData = JSON.parse(e.target.result);
                        this.config = configData;
                        this.renderAll();
                        this.updateDashboard();
                        this.log('Configuration imported', 'info');
                        this.showAlert('Configuration successfully imported', 'success');
                        this.addRecentActivity('Configuration imported');
                    } catch (error) {
                        this.log('Error parsing imported configuration', 'error', error);
                        this.showAlert('Failed to parse imported configuration: ' + error.message, 'danger');
                    }
                };
                reader.readAsText(file);
            }

            switchEnvironment(environment) {
                // Save current config before switching
                this.saveConfig();
                
                this.currentEnvironment = environment;
                document.getElementById('currentEnvironment').textContent = this.capitalizeFirstLetter(environment);
                
                const badge = document.getElementById('environmentBadge');
                badge.textContent = this.capitalizeFirstLetter(environment);
                badge.className = 'environment-badge';
                
                if (environment === 'development') {
                    badge.classList.add('environment-development');
                } else if (environment === 'staging') {
                    badge.classList.add('environment-staging');
                } else if (environment === 'production') {
                    badge.classList.add('environment-production');
                }
                
                // Load the config for the new environment
                this.loadConfig();
                this.renderAll();
                this.log(`Switched to ${environment} environment`, 'info');
                this.addRecentActivity(`Switched to ${environment} environment`);
            }

            // Endpoint Management
            addEndpoint() {
                const id = this.generateId();
                const newEndpoint = {
                    id: id,
                    name: 'New Endpoint',
                    method: 'GET',
                    url: '',
                    version: 'v1',
                    description: '',
                    headers: [],
                    parameters: [],
                    body: '',
                    contentType: 'application/json',
                    auth: {
                        type: 'none'
                    },
                    timeout: 30000,
                    retryCount: 3,
                    followRedirects: true,
                    cacheResponse: false
                };
                
                this.config.endpoints.push(newEndpoint);
                this.renderEndpoints();
                this.saveConfig();
                this.log('Endpoint added', 'info');
                this.addRecentActivity('New endpoint added');
                this.updateDashboard();
            }

            updateEndpoint(id, updates) {
                const endpointIndex = this.config.endpoints.findIndex(endpoint => endpoint.id === id);
                if (endpointIndex !== -1) {
                    this.config.endpoints[endpointIndex] = {
                        ...this.config.endpoints[endpointIndex],
                        ...updates
                    };
                    this.saveConfig();
                    this.log(`Endpoint ${updates.name || id} updated`, 'info');
                }
            }

            updateEndpointAuth(id, authUpdates) {
                const endpointIndex = this.config.endpoints.findIndex(endpoint => endpoint.id === id);
                if (endpointIndex !== -1) {
                    this.config.endpoints[endpointIndex].auth = {
                        ...this.config.endpoints[endpointIndex].auth,
                        ...authUpdates
                    };
                    
                    // Render the appropriate auth form based on the type
                    const authType = authUpdates.type;
                    const authDetailsEl = document.getElementById(`auth-details-${id}`);
                    
                    if (authDetailsEl) {
                        authDetailsEl.className = `auth-${authType}`;
                        
                        let authForm = '';
                        
                        if (authType === 'basic') {
                            authForm = `
                                <div class="mb-3">
                                    <label class="form-label">Username</label>
                                    <input type="text" class="form-control" 
                                           onchange="manager.updateEndpointAuth('${id}', {username: this.value})" 
                                           placeholder="Username">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Password</label>
                                    <input type="password" class="form-control" 
                                           onchange="manager.updateEndpointAuth('${id}', {password: this.value})" 
                                           placeholder="Password">
                                </div>
                            `;
                        } else if (authType === 'bearer') {
                            authForm = `
                                <div class="mb-3">
                                    <label class="form-label">Token</label>
                                    <input type="text" class="form-control" 
                                           onchange="manager.updateEndpointAuth('${id}', {token: this.value})" 
                                           placeholder="Bearer Token">
                                </div>
                            `;
                        } else if (authType === 'api-key') {
                            authForm = `
                                <div class="mb-3">
                                    <label class="form-label">API Key Name</label>
                                    <input type="text" class="form-control" 
                                           onchange="manager.updateEndpointAuth('${id}', {keyName: this.value})" 
                                           placeholder="API Key Name">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">API Key Value</label>
                                    <input type="text" class="form-control" 
                                           onchange="manager.updateEndpointAuth('${id}', {keyValue: this.value})" 
                                           placeholder="API Key Value">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Add To</label>
                                    <select class="form-select" 
                                            onchange="manager.updateEndpointAuth('${id}', {addTo: this.value})">
                                        <option value="header">Header</option>
                                        <option value="query">Query Parameter</option>
                                    </select>
                                </div>
                            `;
                        } else if (authType === 'oauth2') {
                            authForm = `
                                <div class="mb-3">
                                    <label class="form-label">OAuth 2.0 Profile</label>
                                    <select class="form-select" 
                                            onchange="manager.updateEndpointAuth('${id}', {profileId: this.value})">
                                        <option value="">Select OAuth Profile</option>
                                        ${this.getOAuthProfilesOptions()}
                                    </select>
                                </div>
                            `;
                        }
                        
                        authDetailsEl.innerHTML = authForm;
                    }
                    
                    this.saveConfig();
                    this.log(`Endpoint authentication updated`, 'info');
                }
            }

            getOAuthProfilesOptions() {
                return this.config.authProfiles
                    .filter(profile => profile.type === 'oauth2')
                    .map(profile => `<option value="${profile.id}">${profile.name}</option>`)
                    .join('');
            }

            addHeader(endpointId) {
                const headerContainer = document.getElementById(`headers-container-${endpointId}`);
                if (headerContainer) {
                    const newHeaderRow = document.createElement('div');
                    newHeaderRow.className = 'row mb-2';
                    newHeaderRow.innerHTML = `
                        <div class="col-md-5">
                            <input type="text" class="form-control" placeholder="Header Name"
                                   onchange="manager.updateEndpointHeader('${endpointId}', this.parentElement.parentElement, 'name', this.value)">
                        </div>
                        <div class="col-md-5">
                            <input type="text" class="form-control" placeholder="Header Value"
                                   onchange="manager.updateEndpointHeader('${endpointId}', this.parentElement.parentElement, 'value', this.value)">
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-outline-danger w-100" onclick="manager.removeEndpointHeader('${endpointId}', this.parentElement.parentElement)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    `;
                    headerContainer.appendChild(newHeaderRow);
                }
            }

            updateEndpointHeader(endpointId, headerRow, field, value) {
                const endpoint = this.config.endpoints.find(endpoint => endpoint.id === endpointId);
                if (endpoint) {
                    const headerIndex = Array.from(headerRow.parentElement.children).indexOf(headerRow);
                    
                    if (!endpoint.headers[headerIndex]) {
                        endpoint.headers[headerIndex] = { name: '', value: '' };
                    }
                    
                    endpoint.headers[headerIndex][field] = value;
                    this.saveConfig();
                }
            }

            removeEndpointHeader(endpointId, headerRow) {
                const endpoint = this.config.endpoints.find(endpoint => endpoint.id === endpointId);
                if (endpoint) {
                    const headerIndex = Array.from(headerRow.parentElement.children).indexOf(headerRow);
                    endpoint.headers.splice(headerIndex, 1);
                    headerRow.remove();
                    this.saveConfig();
                }
            }

            addParameter(endpointId) {
                const paramsContainer = document.getElementById(`params-container-${endpointId}`);
                if (paramsContainer) {
                    const newParamRow = document.createElement('div');
                    newParamRow.className = 'row mb-2';
                    newParamRow.innerHTML = `
                        <div class="col-md-5">
                            <input type="text" class="form-control" placeholder="Parameter Name"
                                   onchange="manager.updateEndpointParam('${endpointId}', this.parentElement.parentElement, 'name', this.value)">
                        </div>
                        <div class="col-md-5">
                            <input type="text" class="form-control" placeholder="Parameter Value"
                                   onchange="manager.updateEndpointParam('${endpointId}', this.parentElement.parentElement, 'value', this.value)">
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-outline-danger w-100" onclick="manager.removeEndpointParam('${endpointId}', this.parentElement.parentElement)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    `;
                    paramsContainer.appendChild(newParamRow);
                }
            }

            updateEndpointParam(endpointId, paramRow, field, value) {
                const endpoint = this.config.endpoints.find(endpoint => endpoint.id === endpointId);
                if (endpoint) {
                    const paramIndex = Array.from(paramRow.parentElement.children).indexOf(paramRow);
                    
                    if (!endpoint.parameters[paramIndex]) {
                        endpoint.parameters[paramIndex] = { name: '', value: '' };
                    }
                    
                    endpoint.parameters[paramIndex][field] = value;
                    this.saveConfig();
                }
            }

            removeEndpointParam(endpointId, paramRow) {
                const endpoint = this.config.endpoints.find(endpoint => endpoint.id === endpointId);
                if (endpoint) {
                    const paramIndex = Array.from(paramRow.parentElement.children).indexOf(paramRow);
                    endpoint.parameters.splice(paramIndex, 1);
                    paramRow.remove();
                    this.saveConfig();
                }
            }

            deleteEndpoint(id) {
                this.showConfirmation(
                    'Are you sure you want to delete this endpoint?',
                    () => {
                        const endpointIndex = this.config.endpoints.findIndex(endpoint => endpoint.id === id);
                        if (endpointIndex !== -1) {
                            const name = this.config.endpoints[endpointIndex].name;
                            this.config.endpoints.splice(endpointIndex, 1);
                            this.renderEndpoints();
                            this.saveConfig();
                            this.log(`Endpoint "${name}" deleted`, 'info');
                            this.addRecentActivity(`Endpoint "${name}" deleted`);
                            this.updateDashboard();
                        }
                    }
                );
            }

            testEndpoint(id) {
                const endpoint = this.config.endpoints.find(endpoint => endpoint.id === id);
                if (endpoint) {
                    // Switch to the test console and pre-fill with endpoint data
                    const testConsoleTab = document.getElementById('endpoint-tester-tab');
                    if (testConsoleTab) {
                        const bootstrapTab = new bootstrap.Tab(testConsoleTab);
                        bootstrapTab.show();
                        
                        // Set the endpoint selector
                        const endpointSelector = document.getElementById('test-endpoint-selector');
                        if (endpointSelector) {
                            endpointSelector.value = id;
                            this.loadEndpointForTesting();
                        }
                    }
                }
            }

            loadEndpointForTesting() {
                const endpointId = document.getElementById('test-endpoint-selector').value;
                if (endpointId) {
                    const endpoint = this.config.endpoints.find(endpoint => endpoint.id === endpointId);
                    if (endpoint) {
                        // Set method and URL
                        document.getElementById('test-method').value = endpoint.method;
                        document.getElementById('test-url').value = endpoint.url;
                        
                        // Set content type
                        document.getElementById('test-content-type').value = endpoint.contentType;
                        
                        // Set body
                        document.getElementById('test-body-content').value = endpoint.body;
                        
                        // Clear and re-add headers
                        const headersContainer = document.getElementById('test-headers-container');
                        headersContainer.innerHTML = '';
                        
                        if (endpoint.headers && endpoint.headers.length > 0) {
                            endpoint.headers.forEach(header => {
                                const headerRow = document.createElement('div');
                                headerRow.className = 'row mb-2';
                                headerRow.innerHTML = `
                                    <div class="col-5">
                                        <input type="text" class="form-control" value="${this.escapeHtml(header.name)}" placeholder="Header Name">
                                    </div>
                                    <div class="col-5">
                                        <input type="text" class="form-control" value="${this.escapeHtml(header.value)}" placeholder="Header Value">
                                    </div>
                                    <div class="col-2">
                                        <button class="btn btn-outline-danger w-100" onclick="this.parentElement.parentElement.remove()">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                `;
                                headersContainer.appendChild(headerRow);
                            });
                        }
                        
                        // Clear and re-add parameters
                        const paramsContainer = document.getElementById('test-params-container');
                        paramsContainer.innerHTML = '';
                        
                        if (endpoint.parameters && endpoint.parameters.length > 0) {
                            endpoint.parameters.forEach(param => {
                                const paramRow = document.createElement('div');
                                paramRow.className = 'row mb-2';
                                paramRow.innerHTML = `
                                    <div class="col-5">
                                        <input type="text" class="form-control" value="${this.escapeHtml(param.name)}" placeholder="Parameter Name">
                                    </div>
                                    <div class="col-5">
                                        <input type="text" class="form-control" value="${this.escapeHtml(param.value)}" placeholder="Parameter Value">
                                    </div>
                                    <div class="col-2">
                                        <button class="btn btn-outline-danger w-100" onclick="this.parentElement.parentElement.remove()">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                `;
                                paramsContainer.appendChild(paramRow);
                            });
                        }
                        
                        // Set authentication
                        document.getElementById('test-auth-type').value = endpoint.auth.type;
                        this.changeTestAuthType();
                        
                        // Set auth details based on the type
                        if (endpoint.auth.type === 'basic') {
                            document.getElementById('test-auth-username').value = endpoint.auth.username || '';
                            document.getElementById('test-auth-password').value = endpoint.auth.password || '';
                        } else if (endpoint.auth.type === 'bearer') {
                            document.getElementById('test-auth-token').value = endpoint.auth.token || '';
                        } else if (endpoint.auth.type === 'api-key') {
                            document.getElementById('test-auth-key-name').value = endpoint.auth.keyName || '';
                            document.getElementById('test-auth-key-value').value = endpoint.auth.keyValue || '';
                            document.getElementById('test-auth-key-location').value = endpoint.auth.addTo || 'header';
                        } else if (endpoint.auth.type === 'oauth2') {
                            document.getElementById('test-auth-oauth-profile').value = endpoint.auth.profileId || '';
                        }
                    }
                }
            }

            changeTestAuthType() {
                const authType = document.getElementById('test-auth-type').value;
                const authDetailsEl = document.getElementById('test-auth-details');
                
                authDetailsEl.className = `auth-${authType}`;
                
                let authForm = '';
                
                if (authType === 'basic') {
                    authForm = `
                        <div class="mb-3">
                            <label class="form-label">Username</label>
                            <input type="text" class="form-control" id="test-auth-username" placeholder="Username">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <input type="password" class="form-control" id="test-auth-password" placeholder="Password">
                        </div>
                    `;
                } else if (authType === 'bearer') {
                    authForm = `
                        <div class="mb-3">
                            <label class="form-label">Token</label>
                            <input type="text" class="form-control" id="test-auth-token" placeholder="Bearer Token">
                        </div>
                    `;
                } else if (authType === 'api-key') {
                    authForm = `
                        <div class="mb-3">
                            <label class="form-label">API Key Name</label>
                            <input type="text" class="form-control" id="test-auth-key-name" placeholder="API Key Name">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">API Key Value</label>
                            <input type="text" class="form-control" id="test-auth-key-value" placeholder="API Key Value">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Add To</label>
                            <select class="form-select" id="test-auth-key-location">
                                <option value="header">Header</option>
                                <option value="query">Query Parameter</option>
                            </select>
                        </div>
                    `;
                } else if (authType === 'oauth2') {
                    authForm = `
                        <div class="mb-3">
                            <label class="form-label">OAuth 2.0 Profile</label>
                            <select class="form-select" id="test-auth-oauth-profile">
                                <option value="">Select OAuth Profile</option>
                                ${this.getOAuthProfilesOptions()}
                            </select>
                        </div>
                    `;
                }
                
                authDetailsEl.innerHTML = authForm;
            }

            addTestHeader() {
                const headersContainer = document.getElementById('test-headers-container');
                const newHeaderRow = document.createElement('div');
                newHeaderRow.className = 'row mb-2';
                newHeaderRow.innerHTML = `
                    <div class="col-5">
                        <input type="text" class="form-control" placeholder="Header Name">
                    </div>
                    <div class="col-5">
                        <input type="text" class="form-control" placeholder="Header Value">
                    </div>
                    <div class="col-2">
                        <button class="btn btn-outline-danger w-100" onclick="this.parentElement.parentElement.remove()">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                `;
                headersContainer.appendChild(newHeaderRow);
            }

            addTestParam() {
                const paramsContainer = document.getElementById('test-params-container');
                const newParamRow = document.createElement('div');
                newParamRow.className = 'row mb-2';
                newParamRow.innerHTML = `
                    <div class="col-5">
                        <input type="text" class="form-control" placeholder="Parameter Name">
                    </div>
                    <div class="col-5">
                        <input type="text" class="form-control" placeholder="Parameter Value">
                    </div>
                    <div class="col-2">
                        <button class="btn btn-outline-danger w-100" onclick="this.parentElement.parentElement.remove()">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                `;
                paramsContainer.appendChild(newParamRow);
            }

            sendTestRequest() {
                const method = document.getElementById('test-method').value;
                let url = document.getElementById('test-url').value;
                const contentType = document.getElementById('test-content-type').value;
                const body = document.getElementById('test-body-content').value;
                const authType = document.getElementById('test-auth-type').value;
                
                if (!url) {
                    this.showAlert('Please enter a URL', 'warning');
                    return;
                }
                
                // Gather headers
                const headers = {};
                const headerRows = document.getElementById('test-headers-container').querySelectorAll('.row');
                headerRows.forEach(row => {
                    const nameInput = row.querySelector('input:nth-child(1)');
                    const valueInput = row.querySelector('input:nth-child(2)');
                    if (nameInput && valueInput && nameInput.value) {
                        headers[nameInput.value] = valueInput.value;
                    }
                });
                
                // Set content type header
                if (method !== 'GET' && method !== 'DELETE') {
                    headers['Content-Type'] = contentType;
                }
                
                // Gather query parameters
                const params = {};
                const paramRows = document.getElementById('test-params-container').querySelectorAll('.row');
                paramRows.forEach(row => {
                    const nameInput = row.querySelector('input:nth-child(1)');
                    const valueInput = row.querySelector('input:nth-child(2)');
                    if (nameInput && valueInput && nameInput.value) {
                        params[nameInput.value] = valueInput.value;
                    }
                });
                
                // Add query parameters to URL
                if (Object.keys(params).length > 0) {
                    const queryString = Object.entries(params)
                        .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
                        .join('&');
                    
                    url += (url.includes('?') ? '&' : '?') + queryString;
                }
                
                // Set authentication
                if (authType === 'basic') {
                    const username = document.getElementById('test-auth-username').value;
                    const password = document.getElementById('test-auth-password').value;
                    if (username) {
                        headers['Authorization'] = 'Basic ' + btoa(username + ':' + password);
                    }
                } else if (authType === 'bearer') {
                    const token = document.getElementById('test-auth-token').value;
                    if (token) {
                        headers['Authorization'] = 'Bearer ' + token;
                    }
                } else if (authType === 'api-key') {
                    const keyName = document.getElementById('test-auth-key-name').value;
                    const keyValue = document.getElementById('test-auth-key-value').value;
                    const keyLocation = document.getElementById('test-auth-key-location').value;
                    
                    if (keyName && keyValue) {
                        if (keyLocation === 'header') {
                            headers[keyName] = keyValue;
                        } else if (keyLocation === 'query') {
                            url += (url.includes('?') ? '&' : '?') + encodeURIComponent(keyName) + '=' + encodeURIComponent(keyValue);
                        }
                    }
                } else if (authType === 'oauth2') {
                    const profileId = document.getElementById('test-auth-oauth-profile').value;
                    if (profileId) {
                        const profile = this.config.authProfiles.find(p => p.id === profileId);
                        if (profile && profile.token) {
                            headers['Authorization'] = 'Bearer ' + profile.token;
                        }
                    }
                }
                
                // Prepare the request
                const fetchOptions = {
                    method: method,
                    headers: headers,
                    cache: 'no-cache'
                };
                
                // Add body for non-GET requests
                if (method !== 'GET' && method !== 'DELETE') {
                    fetchOptions.body = body;
                }
                
                // Create a request record
                const requestRecord = {
                    id: this.generateId(),
                    timestamp: new Date(),
                    method: method,
                    url: url,
                    headers: headers,
                    body: body,
                    contentType: contentType
                };
                
                // Show request in log and history
                this.log(`Sending ${method} request to ${url}`, 'info');
                
                // Add loading indicator to response container
                const responseContainer = document.getElementById('test-response-container');
                responseContainer.innerHTML = `
                    <div class="text-center p-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3">Sending request...</p>
                    </div>
                `;
                
                // Start timing the request
                const startTime = performance.now();
                
                // Make the request
                fetch(url, fetchOptions)
                    .then(response => {
                        const endTime = performance.now();
                        const duration = Math.round(endTime - startTime);
                        
                        requestRecord.status = response.status;
                        requestRecord.statusText = response.statusText;
                        requestRecord.duration = duration;
                        
                        // Determine the status class
                        let statusClass = 'response-info';
                        if (response.status >= 200 && response.status < 300) {
                            statusClass = 'response-success';
                        } else if (response.status >= 400) {
                            statusClass = 'response-error';
                        } else if (response.status >= 300) {
                            statusClass = 'response-redirect';
                        }
                        
                        // Clone the response for consumption
                        const clonedResponse = response.clone();
                        
                        return response.text().then(text => {
                            let responseBody = text;
                            let formattedBody = text;
                            
                            try {
                                // Try to parse as JSON
                                const contentType = clonedResponse.headers.get('content-type');
                                if (contentType && contentType.includes('application/json')) {
                                    const json = JSON.parse(text);
                                    formattedBody = JSON.stringify(json, null, 2);
                                    responseBody = json;
                                }
                            } catch (e) {
                                // Not JSON, just use the text
                            }
                            
                            // Get response headers
                            const responseHeaders = {};
                            clonedResponse.headers.forEach((value, name) => {
                                responseHeaders[name] = value;
                            });
                            
                            // Update request record with response data
                            requestRecord.responseBody = responseBody;
                            requestRecord.responseHeaders = responseHeaders;
                            
                            // Add to request history
                            this.requestHistory.unshift(requestRecord);
                            this.renderRequestHistory();
                            
                            // Show the response
                            responseContainer.innerHTML = `
                                <div>
                                    <div class="d-flex justify-content-between mb-3">
                                        <div>
                                            <span class="response-status ${statusClass}">${response.status} ${response.statusText}</span>
                                            <span class="ms-2 text-muted">${duration}ms</span>
                                        </div>
                                        <div>
                                            <button class="btn btn-outline-secondary btn-sm" onclick="manager.copyResponseToClipboard()">
                                                <i class="bi bi-clipboard"></i>
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <ul class="nav nav-tabs response-tabs" role="tablist">
                                        <li class="nav-item" role="presentation">
                                            <button class="nav-link active" id="response-body-tab" data-bs-toggle="tab" data-bs-target="#response-body" type="button" role="tab" aria-selected="true">
                                                Body
                                            </button>
                                        </li>
                                        <li class="nav-item" role="presentation">
                                            <button class="nav-link" id="response-headers-tab" data-bs-toggle="tab" data-bs-target="#response-headers" type="button" role="tab" aria-selected="false">
                                                Headers
                                            </button>
                                        </li>
                                    </ul>
                                    
                                    <div class="tab-content">
                                        <div class="tab-pane fade show active" id="response-body" role="tabpanel">
                                            <pre class="response-container">${this.escapeHtml(formattedBody)}</pre>
                                        </div>
                                        
                                        <div class="tab-pane fade" id="response-headers" role="tabpanel">
                                            <div class="response-container">
                                                <table class="table table-sm">
                                                    <thead>
                                                        <tr>
                                                            <th>Name</th>
                                                            <th>Value</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        ${Object.entries(responseHeaders).map(([name, value]) => `
                                                            <tr>
                                                                <td>${this.escapeHtml(name)}</td>
                                                                <td>${this.escapeHtml(value)}</td>
                                                            </tr>
                                                        `).join('')}
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `;
                            
                            this.log(`Received ${response.status} response in ${duration}ms`, 'info');
                            
                            // Update metrics
                            this.metrics.totalRequests++;
                            if (response.status >= 200 && response.status < 300) {
                                this.metrics.successRate = ((this.metrics.successRate * (this.metrics.totalRequests - 1)) + 100) / this.metrics.totalRequests;
                            } else {
                                this.metrics.successRate = ((this.metrics.successRate * (this.metrics.totalRequests - 1)) + 0) / this.metrics.totalRequests;
                            }
                            
                            // Update average response time
                            const prevTotal = this.metrics.avgResponseTime * (this.metrics.totalRequests - 1);
                            this.metrics.avgResponseTime = (prevTotal + duration) / this.metrics.totalRequests;
                            
                            this.updateMonitoringMetrics();
                        });
                    })
                    .catch(error => {
                        const endTime = performance.now();
                        const duration = Math.round(endTime - startTime);
                        
                        requestRecord.status = 0;
                        requestRecord.statusText = 'Error';
                        requestRecord.duration = duration;
                        requestRecord.error = error.message;
                        
                        // Add to request history
                        this.requestHistory.unshift(requestRecord);
                        this.renderRequestHistory();
                        
                        // Show the error
                        responseContainer.innerHTML = `
                            <div class="alert alert-danger">
                                <h5>Request Failed</h5>
                                <p>${error.message}</p>
                            </div>
                        `;
                        
                        this.log(`Request failed: ${error.message}`, 'error');
                        
                        // Update metrics
                        this.metrics.totalRequests++;
                        this.metrics.successRate = ((this.metrics.successRate * (this.metrics.totalRequests - 1)) + 0) / this.metrics.totalRequests;
                        this.updateMonitoringMetrics();
                    });
            }

            copyResponseToClipboard() {
                const responseBodyElement = document.getElementById('response-body').querySelector('pre');
                if (responseBodyElement) {
                    navigator.clipboard.writeText(responseBodyElement.textContent)
                        .then(() => {
                            this.showAlert('Response copied to clipboard', 'success');
                        })
                        .catch(err => {
                            this.showAlert('Failed to copy response: ' + err.message, 'danger');
                        });
                }
            }

            renderRequestHistory() {
                const historyList = document.getElementById('request-history-list');
                if (historyList) {
                    if (this.requestHistory.length === 0) {
                        historyList.innerHTML = `
                            <div class="list-group-item text-center p-4 text-muted">
                                <p>No request history available</p>
                            </div>
                        `;
                        return;
                    }
                    
                    historyList.innerHTML = '';
                    
                    this.requestHistory.forEach(request => {
                        const methodClass = this.getMethodClass(request.method);
                        const statusClass = this.getStatusClass(request.status);
                        
                        const historyItem = document.createElement('div');
                        historyItem.className = 'list-group-item history-item';
                        historyItem.onclick = () => this.loadRequestFromHistory(request.id);
                        
                        const dateStr = new Date(request.timestamp).toLocaleString();
                        
                        historyItem.innerHTML = `
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="badge ${methodClass}">${request.method}</span>
                                    <span class="ms-2">${this.truncateString(request.url, 50)}</span>
                                </div>
                                <div>
                                    <span class="badge ${statusClass}">${request.status}</span>
                                    <span class="ms-2 text-muted">${request.duration}ms</span>
                                </div>
                            </div>
                            <div class="mt-2">
                                <small class="text-muted">${dateStr}</small>
                            </div>
                        `;
                        
                        historyList.appendChild(historyItem);
                    });
                }
            }

            loadRequestFromHistory(requestId) {
                const request = this.requestHistory.find(req => req.id === requestId);
                if (request) {
                    // Switch to the test console
                    const testConsoleTab = document.getElementById('endpoint-tester-tab');
                    if (testConsoleTab) {
                        const bootstrapTab = new bootstrap.Tab(testConsoleTab);
                        bootstrapTab.show();
                        
                        // Fill in request details
                        document.getElementById('test-method').value = request.method;
                        document.getElementById('test-url').value = request.url;
                        document.getElementById('test-content-type').value = request.contentType || 'application/json';
                        document.getElementById('test-body-content').value = typeof request.body === 'string' ? request.body : JSON.stringify(request.body, null, 2);
                        
                        // Clear and re-add headers
                        const headersContainer = document.getElementById('test-headers-container');
                        headersContainer.innerHTML = '';
                        
                        if (request.headers) {
                            Object.entries(request.headers).forEach(([name, value]) => {
                                // Skip auth and content-type headers
                                if (name.toLowerCase() === 'authorization' || name.toLowerCase() === 'content-type') {
                                    return;
                                }
                                
                                const headerRow = document.createElement('div');
                                headerRow.className = 'row mb-2';
                                headerRow.innerHTML = `
                                    <div class="col-5">
                                        <input type="text" class="form-control" value="${this.escapeHtml(name)}" placeholder="Header Name">
                                    </div>
                                    <div class="col-5">
                                        <input type="text" class="form-control" value="${this.escapeHtml(value)}" placeholder="Header Value">
                                    </div>
                                    <div class="col-2">
                                        <button class="btn btn-outline-danger w-100" onclick="this.parentElement.parentElement.remove()">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                `;
                                headersContainer.appendChild(headerRow);
                            });
                        }
                        
                        // Set authentication if present
                        let authType = 'none';
                        if (request.headers && request.headers['Authorization']) {
                            const authHeader = request.headers['Authorization'];
                            if (authHeader.startsWith('Basic ')) {
                                authType = 'basic';
                                const credentials = atob(authHeader.substring(6)).split(':');
                                
                                document.getElementById('test-auth-type').value = 'basic';
                                this.changeTestAuthType();
                                
                                document.getElementById('test-auth-username').value = credentials[0] || '';
                                document.getElementById('test-auth-password').value = credentials[1] || '';
                            } else if (authHeader.startsWith('Bearer ')) {
                                authType = 'bearer';
                                
                                document.getElementById('test-auth-type').value = 'bearer';
                                this.changeTestAuthType();
                                
                                document.getElementById('test-auth-token').value = authHeader.substring(7);
                            }
                        } else {
                            document.getElementById('test-auth-type').value = 'none';
                            this.changeTestAuthType();
                        }
                    }
                }
            }

            getMethodClass(method) {
                switch (method) {
                    case 'GET': return 'bg-success';
                    case 'POST': return 'bg-primary';
                    case 'PUT': return 'bg-warning text-dark';
                    case 'DELETE': return 'bg-danger';
                    case 'PATCH': return 'bg-info text-dark';
                    default: return 'bg-secondary';
                }
            }

            getStatusClass(status) {
                if (status >= 200 && status < 300) {
                    return 'bg-success';
                } else if (status >= 300 && status < 400) {
                    return 'bg-warning text-dark';
                } else if (status >= 400) {
                    return 'bg-danger';
                } else {
                    return 'bg-secondary';
                }
            }

            // Test Management
            createTestSuite() {
                const modal = document.getElementById('testCreationModal');
                if (modal) {
                    // Reset the form
                    document.getElementById('testSuiteName').value = '';
                    document.getElementById('testSuiteDescription').value = '';
                    document.getElementById('testSuiteEndpoint').value = '';
                    
                    // Reset test cases
                    const testCasesContainer = document.getElementById('testCasesContainer');
                    testCasesContainer.innerHTML = `
                        <div class="card mb-3 test-case" data-id="1">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <div>Test Case #1</div>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="manager.removeTestCase(1)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Test Name</label>
                                    <input type="text" class="form-control" placeholder="Test case name">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Input Parameters</label>
                                    <textarea class="form-control code-editor" rows="3" placeholder='{ "key": "value" }'></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Expected Status Code</label>
                                    <input type="number" class="form-control" value="200">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Expected Response</label>
                                    <textarea class="form-control code-editor" rows="3" placeholder='{ "key": "value" }'></textarea>
                                </div>
                                <div class="form-check mb-3">
                                    <input class="form-check-input" type="checkbox" id="validateExactMatch1">
                                    <label class="form-check-label" for="validateExactMatch1">
                                        Validate Exact Match
                                    </label>
                                </div>
                            </div>
                        </div>
                    `;
                    
                    this.testCaseCounter = 1;
                    
                    // Update endpoint selector
                    const endpointSelector = document.getElementById('testSuiteEndpoint');
                    endpointSelector.innerHTML = '<option value="">Select an endpoint</option>';
                    
                    this.config.endpoints.forEach(endpoint => {
                        const option = document.createElement('option');
                        option.value = endpoint.id;
                        option.textContent = endpoint.name;
                        endpointSelector.appendChild(option);
                    });
                    
                    // Show the modal
                    const bsModal = new bootstrap.Modal(modal);
                    bsModal.show();
                }
            }

            addTestCase() {
                this.testCaseCounter++;
                const testCasesContainer = document.getElementById('testCasesContainer');
                const testCaseId = this.testCaseCounter;
                
                const testCaseElement = document.createElement('div');
                testCaseElement.className = 'card mb-3 test-case';
                testCaseElement.dataset.id = testCaseId;
                
                testCaseElement.innerHTML = `
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <div>Test Case #${testCaseId}</div>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="manager.removeTestCase(${testCaseId})">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label">Test Name</label>
                            <input type="text" class="form-control" placeholder="Test case name">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Input Parameters</label>
                            <textarea class="form-control code-editor" rows="3" placeholder='{ "key": "value" }'></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Expected Status Code</label>
                            <input type="number" class="form-control" value="200">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Expected Response</label>
                            <textarea class="form-control code-editor" rows="3" placeholder='{ "key": "value" }'></textarea>
                        </div>
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="validateExactMatch${testCaseId}">
                            <label class="form-check-label" for="validateExactMatch${testCaseId}">
                                Validate Exact Match
                            </label>
                        </div>
                    </div>
                `;
                
                testCasesContainer.appendChild(testCaseElement);
            }

            removeTestCase(testCaseId) {
                const testCaseElement = document.querySelector(`.test-case[data-id="${testCaseId}"]`);
                if (testCaseElement) {
                    testCaseElement.remove();
                }
            }

            saveTestSuite() {
                const name = document.getElementById('testSuiteName').value;
                const description = document.getElementById('testSuiteDescription').value;
                const endpointId = document.getElementById('testSuiteEndpoint').value;
                
                if (!name) {
                    this.showAlert('Please enter a test suite name', 'warning');
                    return;
                }
                
                if (!endpointId) {
                    this.showAlert('Please select an endpoint', 'warning');
                    return;
                }
                
                // Gather test cases
                const testCases = [];
                const testCaseElements = document.querySelectorAll('.test-case');
                testCaseElements.forEach(element => {
                    const testCaseId = element.dataset.id;
                    const nameInput = element.querySelector('input[placeholder="Test case name"]');
                    const paramsInput = element.querySelector('textarea[placeholder="{ \\"key\\": \\"value\\" }"]');
                    const statusInput = element.querySelector('input[type="number"]');
                    const responseInput = element.querySelector('textarea:nth-of-type(2)');
                    const exactMatchInput = element.querySelector(`#validateExactMatch${testCaseId}`);
                    
                    if (nameInput && paramsInput && statusInput && responseInput) {
                        let inputParams = {};
                        try {
                            if (paramsInput.value) {
                                inputParams = JSON.parse(paramsInput.value);
                            }
                        } catch (e) {
                            this.showAlert(`Invalid JSON in test case #${testCaseId} input parameters`, 'warning');
                            return;
                        }
                        
                        let expectedResponse = {};
                        try {
                            if (responseInput.value) {
                                expectedResponse = JSON.parse(responseInput.value);
                            }
                        } catch (e) {
                            this.showAlert(`Invalid JSON in test case #${testCaseId} expected response`, 'warning');
                            return;
                        }
                        
                        testCases.push({
                            id: this.generateId(),
                            name: nameInput.value || `Test Case #${testCaseId}`,
                            inputParams: inputParams,
                            expectedStatus: parseInt(statusInput.value) || 200,
                            expectedResponse: expectedResponse,
                            validateExactMatch: exactMatchInput ? exactMatchInput.checked : false
                        });
                    }
                });
                
                if (testCases.length === 0) {
                    this.showAlert('Please add at least one test case', 'warning');
                    return;
                }
                
                // Create and save the test suite
                const testSuite = {
                    id: this.generateId(),
                    name: name,
                    description: description,
                    endpointId: endpointId,
                    testCases: testCases,
                    createdAt: new Date(),
                    lastRun: null,
                    results: null
                };
                
                this.config.tests.push(testSuite);
                this.renderTests();
                this.saveConfig();
                this.log(`Test suite "${name}" created with ${testCases.length} test cases`, 'info');
                this.addRecentActivity(`Test suite "${name}" created`);
                this.updateDashboard();
                
                // Close the modal
                const modal = document.getElementById('testCreationModal');
                const bsModal = bootstrap.Modal.getInstance(modal);
                if (bsModal) {
                    bsModal.hide();
                }
            }

            runAllTests() {
                if (this.config.tests.length === 0) {
                    this.showAlert('No test suites available to run', 'warning');
                    return;
                }
                
                this.log('Running all test suites', 'info');
                this.addRecentActivity('Started running all test suites');
                
                const testResults = [];
                let passCount = 0;
                let failCount = 0;
                
                // Run each test suite
                const runPromises = this.config.tests.map(testSuite => {
                    return this.runTestSuite(testSuite.id)
                        .then(result => {
                            testResults.push(result);
                            passCount += result.passCount;
                            failCount += result.failCount;
                        });
                });
                
                // Show results after all tests complete
                Promise.all(runPromises)
                    .then(() => {
                        const totalCount = passCount + failCount;
                        const passRate = totalCount > 0 ? (passCount / totalCount * 100).toFixed(1) : 0;
                        
                        this.showAlert(`All tests completed: ${passCount} passed, ${failCount} failed (${passRate}% pass rate)`, 
                            passCount === totalCount ? 'success' : 'warning');
                        
                        this.log(`All test suites completed: ${passCount} passed, ${failCount} failed (${passRate}% pass rate)`, 'info');
                        this.addRecentActivity(`All test suites completed (${passRate}% pass rate)`);
                        
                        // Show test results tab
                        const testResultsTab = document.getElementById('headingTestResults');
                        if (testResultsTab) {
                            testResultsTab.click();
                        }
                    })
                    .catch(error => {
                        this.log('Error running tests', 'error', error);
                        this.showAlert(`Error running tests: ${error.message}`, 'danger');
                    });
            }

            runTestSuite(testSuiteId) {
                const testSuite = this.config.tests.find(suite => suite.id === testSuiteId);
                if (!testSuite) {
                    return Promise.reject(new Error('Test suite not found'));
                }
                
                const endpoint = this.config.endpoints.find(endpoint => endpoint.id === testSuite.endpointId);
                if (!endpoint) {
                    return Promise.reject(new Error('Endpoint not found'));
                }
                
                this.log(`Running test suite "${testSuite.name}"`, 'info');
                
                // Prepare result container
                const results = {
                    id: this.generateId(),
                    testSuiteId: testSuiteId,
                    testSuiteName: testSuite.name,
                    endpointName: endpoint.name,
                    timestamp: new Date(),
                    passCount: 0,
                    failCount: 0,
                    duration: 0,
                    testCaseResults: []
                };
                
                // Start timing
                const startTime = performance.now();
                
                // Run each test case sequentially
                return testSuite.testCases.reduce((chain, testCase) => {
                    return chain.then(() => this.runTestCase(endpoint, testCase));
                }, Promise.resolve([]))
                    .then(testCaseResults => {
                        // Calculate duration
                        const endTime = performance.now();
                        results.duration = Math.round(endTime - startTime);
                        
                        // Compile results
                        results.testCaseResults = testCaseResults;
                        results.passCount = testCaseResults.filter(result => result.passed).length;
                        results.failCount = testCaseResults.length - results.passCount;
                        
                        // Update test suite with results
                        testSuite.lastRun = new Date();
                        testSuite.results = results;
                        
                        // Render and save
                        this.renderTestResults();
                        this.saveConfig();
                        
                        this.log(`Test suite "${testSuite.name}" completed: ${results.passCount} passed, ${results.failCount} failed`, 
                            results.failCount === 0 ? 'info' : 'warning');
                        
                        return results;
                    });
            }

            runTestCase(endpoint, testCase) {
                const url = endpoint.url;
                const method = endpoint.method;
                
                if (!url) {
                    return Promise.resolve({
                        testCaseId: testCase.id,
                        testCaseName: testCase.name,
                        passed: false,
                        status: 0,
                        duration: 0,
                        error: 'Endpoint URL is not defined'
                    });
                }
                
                // Prepare headers
                const headers = {};
                endpoint.headers.forEach(header => {
                    if (header.name) {
                        headers[header.name] = header.value;
                    }
                });
                
                // Set content type
                if (method !== 'GET' && method !== 'DELETE') {
                    headers['Content-Type'] = endpoint.contentType;
                }
                
                // Set authentication
                if (endpoint.auth.type === 'basic') {
                    if (endpoint.auth.username) {
                        headers['Authorization'] = 'Basic ' + btoa(endpoint.auth.username + ':' + (endpoint.auth.password || ''));
                    }
                } else if (endpoint.auth.type === 'bearer') {
                    if (endpoint.auth.token) {
                        headers['Authorization'] = 'Bearer ' + endpoint.auth.token;
                    }
                } else if (endpoint.auth.type === 'api-key') {
                    if (endpoint.auth.keyName && endpoint.auth.keyValue) {
                        if (endpoint.auth.addTo === 'header') {
                            headers[endpoint.auth.keyName] = endpoint.auth.keyValue;
                        }
                    }
                } else if (endpoint.auth.type === 'oauth2') {
                    if (endpoint.auth.profileId) {
                        const profile = this.config.authProfiles.find(p => p.id === endpoint.auth.profileId);
                        if (profile && profile.token) {
                            headers['Authorization'] = 'Bearer ' + profile.token;
                        }
                    }
                }
                
                // Prepare request
                let fullUrl = url;
                
                // Add query parameters
                const queryParams = new URLSearchParams();
                let hasQueryParams = false;
                
                endpoint.parameters.forEach(param => {
                    if (param.name) {
                        queryParams.append(param.name, param.value || '');
                        hasQueryParams = true;
                    }
                });
                
                // Add test case input parameters to query for GET requests
                if (method === 'GET' && testCase.inputParams) {
                    Object.entries(testCase.inputParams).forEach(([key, value]) => {
                        queryParams.append(key, value);
                        hasQueryParams = true;
                    });
                }
                
                // Add API key to query if configured that way
                if (endpoint.auth.type === 'api-key' && endpoint.auth.addTo === 'query') {
                    if (endpoint.auth.keyName && endpoint.auth.keyValue) {
                        queryParams.append(endpoint.auth.keyName, endpoint.auth.keyValue);
                        hasQueryParams = true;
                    }
                }
                
                if (hasQueryParams) {
                    fullUrl += (fullUrl.includes('?') ? '&' : '?') + queryParams.toString();
                }
                
                // Prepare request options
                const fetchOptions = {
                    method: method,
                    headers: headers,
                    cache: 'no-cache'
                };
                
                // Add body for non-GET requests
                if (method !== 'GET' && method !== 'DELETE') {
                    if (method === 'POST' || method === 'PUT' || method === 'PATCH') {
                        if (testCase.inputParams) {
                            fetchOptions.body = JSON.stringify(testCase.inputParams);
                        } else if (endpoint.body) {
                            fetchOptions.body = endpoint.body;
                        }
                    }
                }
                
                // Start timing
                const startTime = performance.now();
                
                // Make the request
                return fetch(fullUrl, fetchOptions)
                    .then(response => {
                        // Calculate duration
                        const endTime = performance.now();
                        const duration = Math.round(endTime - startTime);
                        
                        // Check status code
                        const statusPassed = response.status === testCase.expectedStatus;
                        
                        return response.text().then(text => {
                            let responseBody = text;
                            let bodyPassed = true;
                            let error = null;
                            
                            try {
                                // Try to parse as JSON if expected response is an object
                                if (Object.keys(testCase.expectedResponse).length > 0) {
                                    let jsonResponse = {};
                                    
                                    try {
                                        jsonResponse = JSON.parse(text);
                                    } catch (e) {
                                        bodyPassed = false;
                                        error = 'Response is not valid JSON';
                                    }
                                    
                                    if (bodyPassed) {
                                        if (testCase.validateExactMatch) {
                                            // Check for exact match
                                            bodyPassed = this.objectEquals(jsonResponse, testCase.expectedResponse);
                                            if (!bodyPassed) {
                                                error = 'Response body does not exactly match expected response';
                                            }
                                        } else {
                                            // Check if expected response is a subset of the actual response
                                            bodyPassed = this.objectContains(jsonResponse, testCase.expectedResponse);
                                            if (!bodyPassed) {
                                                error = 'Response body does not contain expected properties';
                                            }
                                        }
                                    }
                                    
                                    responseBody = jsonResponse;
                                }
                            } catch (e) {
                                bodyPassed = false;
                                error = `Error validating response: ${e.message}`;
                            }
                            
                            return {
                                testCaseId: testCase.id,
                                testCaseName: testCase.name,
                                passed: statusPassed && bodyPassed,
                                status: response.status,
                                duration: duration,
                                responseBody: responseBody,
                                error: error
                            };
                        });
                    })
                    .catch(error => {
                        const endTime = performance.now();
                        const duration = Math.round(endTime - startTime);
                        
                        return {
                            testCaseId: testCase.id,
                            testCaseName: testCase.name,
                            passed: false,
                            status: 0,
                            duration: duration,
                            error: error.message
                        };
                    });
            }

            objectEquals(obj1, obj2) {
                return JSON.stringify(obj1) === JSON.stringify(obj2);
            }

            objectContains(obj, subset) {
                if (typeof subset !== 'object' || subset === null) {
                    return obj === subset;
                }
                
                for (const key in subset) {
                    if (subset.hasOwnProperty(key)) {
                        if (!obj.hasOwnProperty(key)) {
                            return false;
                        }
                        
                        if (typeof subset[key] === 'object' && subset[key] !== null) {
                            if (typeof obj[key] !== 'object' || obj[key] === null) {
                                return false;
                            }
                            
                            if (!this.objectContains(obj[key], subset[key])) {
                                return false;
                            }
                        } else if (obj[key] !== subset[key]) {
                            return false;
                        }
                    }
                }
                
                return true;
            }

            createMockResponse() {
                const modal = document.getElementById('mockResponseModal');
                if (modal) {
                    // Reset the form
                    document.getElementById('mockResponseName').value = '';
                    document.getElementById('mockResponseMethod').value = 'GET';
                    document.getElementById('mockResponsePath').value = '';
                    document.getElementById('mockResponseStatus').value = '200';
                    document.getElementById('mockResponseDelay').value = '0';
                    document.getElementById('mockResponseBody').value = '';
                    document.getElementById('mockResponseUseTemplate').checked = false;
                    
                    // Reset mock headers
                    const mockHeadersContainer = document.getElementById('mockResponseHeadersContainer');
                    mockHeadersContainer.innerHTML = `
                        <div class="row mb-2">
                            <div class="col-md-5">
                                <input type="text" class="form-control" placeholder="Header Name">
                            </div>
                            <div class="col-md-5">
                                <input type="text" class="form-control" placeholder="Header Value">
                            </div>
                            <div class="col-md-2">
                                <button type="button" class="btn btn-outline-danger w-100">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    `;
                    
                    // Show the modal
                    const bsModal = new bootstrap.Modal(modal);
                    bsModal.show();
                }
            }

            addMockHeader() {
                const mockHeadersContainer = document.getElementById('mockResponseHeadersContainer');
                const newHeaderRow = document.createElement('div');
                newHeaderRow.className = 'row mb-2';
                newHeaderRow.innerHTML = `
                    <div class="col-md-5">
                        <input type="text" class="form-control" placeholder="Header Name">
                    </div>
                    <div class="col-md-5">
                        <input type="text" class="form-control" placeholder="Header Value">
                    </div>
                    <div class="col-md-2">
                        <button type="button" class="btn btn-outline-danger w-100" onclick="this.parentElement.parentElement.remove()">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                `;
                mockHeadersContainer.appendChild(newHeaderRow);
            }

            saveMockResponse() {
                const name = document.getElementById('mockResponseName').value;
                const method = document.getElementById('mockResponseMethod').value;
                const path = document.getElementById('mockResponsePath').value;
                const status = parseInt(document.getElementById('mockResponseStatus').value);
                const delay = parseInt(document.getElementById('mockResponseDelay').value);
                const body = document.getElementById('mockResponseBody').value;
                const useTemplate = document.getElementById('mockResponseUseTemplate').checked;
                
                if (!name) {
                    this.showAlert('Please enter a name for the mock response', 'warning');
                    return;
                }
                
                if (!path) {
                    this.showAlert('Please enter a path pattern', 'warning');
                    return;
                }
                
                // Gather headers
                const headers = {};
                const headerRows = document.getElementById('mockResponseHeadersContainer').querySelectorAll('.row');
                headerRows.forEach(row => {
                    const nameInput = row.querySelector('input:nth-child(1)');
                    const valueInput = row.querySelector('input:nth-child(2)');
                    if (nameInput && valueInput && nameInput.value) {
                        headers[nameInput.value] = valueInput.value;
                    }
                });
                
                // Create and save the mock response
                const mockResponse = {
                    id: this.generateId(),
                    name: name,
                    method: method,
                    path: path,
                    status: status,
                    delay: delay,
                    headers: headers,
                    body: body,
                    useTemplate: useTemplate,
                    createdAt: new Date()
                };
                
                this.config.mockResponses.push(mockResponse);
                this.renderMockResponses();
                this.saveConfig();
                this.log(`Mock response "${name}" created`, 'info');
                this.addRecentActivity(`Mock response "${name}" created`);
                
                // Close the modal
                const modal = document.getElementById('mockResponseModal');
                const bsModal = bootstrap.Modal.getInstance(modal);
                if (bsModal) {
                    bsModal.hide();
                }
            }

            // Authentication Management
            addAuthProfile() {
                const modal = document.getElementById('authProfileModal');
                if (modal) {
                    // Reset the form
                    document.getElementById('authProfileName').value = '';
                    document.getElementById('authProfileType').value = 'basic';
                    
                    // Render the auth details form
                    this.changeAuthProfileType();
                    
                    // Show the modal
                    const bsModal = new bootstrap.Modal(modal);
                    bsModal.show();
                }
            }

            changeAuthProfileType() {
                const authType = document.getElementById('authProfileType').value;
                const authDetailsEl = document.getElementById('authProfileDetails');
                
                let authForm = '';
                
                if (authType === 'basic') {
                    authForm = `
                        <div class="mb-3">
                            <label class="form-label">Username</label>
                            <input type="text" class="form-control" id="authProfileUsername" placeholder="Username">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <input type="password" class="form-control" id="authProfilePassword" placeholder="Password">
                        </div>
                    `;
                } else if (authType === 'bearer') {
                    authForm = `
                        <div class="mb-3">
                            <label class="form-label">Token</label>
                            <input type="text" class="form-control" id="authProfileToken" placeholder="Bearer Token">
                        </div>
                    `;
                } else if (authType === 'api-key') {
                    authForm = `
                        <div class="mb-3">
                            <label class="form-label">API Key Name</label>
                            <input type="text" class="form-control" id="authProfileKeyName" placeholder="API Key Name">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">API Key Value</label>
                            <input type="text" class="form-control" id="authProfileKeyValue" placeholder="API Key Value">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Add To</label>
                            <select class="form-select" id="authProfileAddTo">
                                <option value="header">Header</option>
                                <option value="query">Query Parameter</option>
                            </select>
                        </div>
                    `;
                } else if (authType === 'oauth2') {
                    authForm = `
                        <div class="mb-3">
                            <label class="form-label">Client ID</label>
                            <input type="text" class="form-control" id="authProfileClientId" placeholder="Client ID">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Client Secret</label>
                            <input type="password" class="form-control" id="authProfileClientSecret" placeholder="Client Secret">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Authorization URL</label>
                            <input type="url" class="form-control" id="authProfileAuthUrl" placeholder="https://example.com/oauth/authorize">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Token URL</label>
                            <input type="url" class="form-control" id="authProfileTokenUrl" placeholder="https://example.com/oauth/token">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Scope</label>
                            <input type="text" class="form-control" id="authProfileScope" placeholder="read write">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Token</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="authProfileOAuthToken" placeholder="OAuth Token" readonly>
                                <button type="button" class="btn btn-outline-primary" onclick="manager.requestOAuthToken()">
                                    <i class="bi bi-arrow-repeat"></i> Get Token
                                </button>
                            </div>
                        </div>
                    `;
                }
                
                authDetailsEl.innerHTML = authForm;
            }

            requestOAuthToken() {
                const clientId = document.getElementById('authProfileClientId').value;
                const clientSecret = document.getElementById('authProfileClientSecret').value;
                const authUrl = document.getElementById('authProfileAuthUrl').value;
                const tokenUrl = document.getElementById('authProfileTokenUrl').value;
                const scope = document.getElementById('authProfileScope').value;
                
                if (!clientId || !clientSecret || !authUrl || !tokenUrl) {
                    this.showAlert('Please fill in all required OAuth2 fields', 'warning');
                    return;
                }
                
                // In a real application, we would initiate the OAuth flow here
                // For this demo, we'll just show a message about the flow
                this.showAlert('OAuth2 flow would be initiated in a real application', 'info');
                
                // Simulate getting a token
                const simulatedToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';
                document.getElementById('authProfileOAuthToken').value = simulatedToken;
            }

            saveAuthProfile() {
                const name = document.getElementById('authProfileName').value;
                const type = document.getElementById('authProfileType').value;
                
                if (!name) {
                    this.showAlert('Please enter a profile name', 'warning');
                    return;
                }
                
                // Create a base profile object
                const profile = {
                    id: this.generateId(),
                    name: name,
                    type: type,
                    createdAt: new Date()
                };
                
                // Add type-specific properties
                if (type === 'basic') {
                    profile.username = document.getElementById('authProfileUsername').value;
                    profile.password = document.getElementById('authProfilePassword').value;
                } else if (type === 'bearer') {
                    profile.token = document.getElementById('authProfileToken').value;
                } else if (type === 'api-key') {
                    profile.keyName = document.getElementById('authProfileKeyName').value;
                    profile.keyValue = document.getElementById('authProfileKeyValue').value;
                    profile.addTo = document.getElementById('authProfileAddTo').value;
                } else if (type === 'oauth2') {
                    profile.clientId = document.getElementById('authProfileClientId').value;
                    profile.clientSecret = document.getElementById('authProfileClientSecret').value;
                    profile.authUrl = document.getElementById('authProfileAuthUrl').value;
                    profile.tokenUrl = document.getElementById('authProfileTokenUrl').value;
                    profile.scope = document.getElementById('authProfileScope').value;
                    profile.token = document.getElementById('authProfileOAuthToken').value;
                }
                
                // Save the profile
                this.config.authProfiles.push(profile);
                this.renderAuthProfiles();
                this.saveConfig();
                this.log(`Authentication profile "${name}" created`, 'info');
                this.addRecentActivity(`Authentication profile "${name}" created`);
                
                // Close the modal
                const modal = document.getElementById('authProfileModal');
                const bsModal = bootstrap.Modal.getInstance(modal);
                if (bsModal) {
                    bsModal.hide();
                }
            }

            generateApiKey() {
                const key = this.generateId() + '-' + this.generateId();
                const apiKey = {
                    id: this.generateId(),
                    key: key,
                    name: 'API Key ' + (this.config.apiKeys.length + 1),
                    createdAt: new Date(),
                    lastUsed: null,
                    permissions: []
                };
                
                this.config.apiKeys.push(apiKey);
                this.renderApiKeys();
                this.saveConfig();
                this.log('New API key generated', 'info');
                this.addRecentActivity('New API key generated');
            }

            // Documentation Generation
            generateDocs() {
                this.log('Generating API documentation', 'info');
                this.addRecentActivity('API documentation generated');
                
                const docsContent = document.getElementById('docsContent');
                
                // Get API info
                const apiTitle = document.getElementById('api-title').value || 'API Documentation';
                const apiDescription = document.getElementById('api-description').value || 'Generated API documentation';
                const apiVersion = document.getElementById('api-version').value || '1.0.0';
                const apiBaseUrl = document.getElementById('api-base-url').value || '';
                
                // Generate markdown content
                const markdownContent = this.generateMarkdownDocs(apiTitle, apiDescription, apiVersion, apiBaseUrl);
                
                // Display the documentation
                docsContent.innerHTML = `
                    <div class="mb-3">
                        <div class="d-flex justify-content-between mb-3">
                            <h3>${apiTitle} - v${apiVersion}</h3>
                            <div>
                                <button class="btn btn-outline-secondary btn-sm" onclick="manager.copyDocsToClipboard()">
                                    <i class="bi bi-clipboard"></i> Copy Markdown
                                </button>
                            </div>
                        </div>
                        <div>${apiDescription}</div>
                        ${apiBaseUrl ? `<div><strong>Base URL:</strong> ${apiBaseUrl}</div>` : ''}
                    </div>
                    
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Documentation</h5>
                        </div>
                        <div class="card-body">
                            <pre class="response-container">${markdownContent}</pre>
                        </div>
                    </div>
                `;
            }

            generateMarkdownDocs(title, description, version, baseUrl) {
                let markdown = `# ${title}\n\n`;
                markdown += `${description}\n\n`;
                markdown += `**Version:** ${version}\n\n`;
                
                if (baseUrl) {
                    markdown += `**Base URL:** ${baseUrl}\n\n`;
                }
                
                // Add endpoints
                if (this.config.endpoints.length > 0) {
                    markdown += `## Endpoints\n\n`;
                    
                    this.config.endpoints.forEach(endpoint => {
                        markdown += `### ${endpoint.name}\n\n`;
                        markdown += `\`${endpoint.method} ${endpoint.url}\`\n\n`;
                        
                        if (endpoint.description) {
                            markdown += `${endpoint.description}\n\n`;
                        }
                        
                        // Headers
                        if (endpoint.headers && endpoint.headers.length > 0) {
                            markdown += `#### Headers\n\n`;
                            markdown += `| Name | Value | Description |\n`;
                            markdown += `| ---- | ----- | ----------- |\n`;
                            
                            endpoint.headers.forEach(header => {
                                if (header.name) {
                                    markdown += `| ${header.name} | ${header.value || ''} | |\n`;
                                }
                            });
                            
                            markdown += `\n`;
                        }
                        
                        // Parameters
                        if (endpoint.parameters && endpoint.parameters.length > 0) {
                            markdown += `#### Parameters\n\n`;
                            markdown += `| Name | Value | Description |\n`;
                            markdown += `| ---- | ----- | ----------- |\n`;
                            
                            endpoint.parameters.forEach(param => {
                                if (param.name) {
                                    markdown += `| ${param.name} | ${param.value || ''} | |\n`;
                                }
                            });
                            
                            markdown += `\n`;
                        }
                        
                        // Request Body
                        if (endpoint.method !== 'GET' && endpoint.method !== 'DELETE') {
                            markdown += `#### Request Body\n\n`;
                            markdown += `Content-Type: ${endpoint.contentType}\n\n`;
                            
                            if (endpoint.body) {
                                markdown += `\`\`\`json\n${endpoint.body}\n\`\`\`\n\n`;
                            } else {
                                markdown += `No example body provided.\n\n`;
                            }
                        }
                        
                        // Authentication
                        if (endpoint.auth.type !== 'none') {
                            markdown += `#### Authentication\n\n`;
                            markdown += `Type: ${this.capitalizeFirstLetter(endpoint.auth.type)}\n\n`;
                        }
                    });
                }
                
                // Add test suites
                if (this.config.tests.length > 0) {
                    markdown += `## Test Suites\n\n`;
                    
                    this.config.tests.forEach(testSuite => {
                        markdown += `### ${testSuite.name}\n\n`;
                        
                        if (testSuite.description) {
                            markdown += `${testSuite.description}\n\n`;
                        }
                        
                        const endpoint = this.config.endpoints.find(e => e.id === testSuite.endpointId);
                        if (endpoint) {
                            markdown += `Endpoint: ${endpoint.name}\n\n`;
                        }
                        
                        // Test Cases
                        markdown += `#### Test Cases\n\n`;
                        
                        testSuite.testCases.forEach(testCase => {
                            markdown += `- **${testCase.name}**\n`;
                            markdown += `  - Expected Status: ${testCase.expectedStatus}\n`;
                            
                            if (Object.keys(testCase.inputParams).length > 0) {
                                markdown += `  - Input Parameters: \`${JSON.stringify(testCase.inputParams)}\`\n`;
                            }
                            
                            if (Object.keys(testCase.expectedResponse).length > 0) {
                                markdown += `  - Expected Response: \`${JSON.stringify(testCase.expectedResponse)}\`\n`;
                            }
                            
                            markdown += `\n`;
                        });
                    });
                }
                
                // Add webhooks
                if (this.config.webhooks.length > 0) {
                    markdown += `## Webhooks\n\n`;
                    
                    this.config.webhooks.forEach(webhook => {
                        markdown += `### ${webhook.name}\n\n`;
                        
                        if (webhook.description) {
                            markdown += `${webhook.description}\n\n`;
                        }
                        
                        markdown += `URL: ${webhook.url}\n\n`;
                        markdown += `Events: ${webhook.events.join(', ')}\n\n`;
                    });
                }
                
                return markdown;
            }

             exportOpenAPI() {
                this.log('Generating OpenAPI specification', 'info');
                
                // Create the OpenAPI spec
                const spec = {
                    openapi: '3.0.0',
                    info: {
                        title: document.getElementById('api-title').value || 'API Documentation',
                        description: document.getElementById('api-description').value || 'Generated API documentation',
                        version: document.getElementById('api-version').value || '1.0.0'
                    },
                    servers: [
                        {
                            url: document.getElementById('api-base-url').value || 'https://api.example.com'
                        }
                    ],
                    paths: {}
                };
                
                // Add endpoints
                this.config.endpoints.forEach(endpoint => {
                    const path = endpoint.url.replace(/https?:\/\/[^\/]+/, '');
                    
                    if (!spec.paths[path]) {
                        spec.paths[path] = {};
                    }
                    
                    const method = endpoint.method.toLowerCase();
                    
                    spec.paths[path][method] = {
                        summary: endpoint.name,
                        description: endpoint.description || '',
                        parameters: []
                    };
                    
                    // Add parameters
                    endpoint.parameters.forEach(param => {
                        if (param.name) {
                            spec.paths[path][method].parameters.push({
                                name: param.name,
                                in: 'query',
                                schema: {
                                    type: 'string'
                                },
                                example: param.value || ''
                            });
                        }
                    });
                    
                    // Add request body
                    if (method !== 'get' && method !== 'delete') {
                        spec.paths[path][method].requestBody = {
                            content: {
                                [endpoint.contentType]: {
                                    schema: {
                                        type: 'object'
                                    }
                                }
                            }
                        };
                        
                        if (endpoint.body) {
                            try {
                                const bodyExample = JSON.parse(endpoint.body);
                                spec.paths[path][method].requestBody.content[endpoint.contentType].example = bodyExample;
                            } catch (e) {
                                // Not JSON, use as string
                                spec.paths[path][method].requestBody.content[endpoint.contentType].example = endpoint.body;
                            }
                        }
                    }
                    
                    // Add responses
                    spec.paths[path][method].responses = {
                        '200': {
                            description: 'Successful response'
                        },
                        '400': {
                            description: 'Bad request'
                        },
                        '401': {
                            description: 'Unauthorized'
                        },
                        '404': {
                            description: 'Not found'
                        },
                        '500': {
                            description: 'Server error'
                        }
                    };
                    
                    // Add authentication
                    if (endpoint.auth.type !== 'none') {
                        if (!spec.components) {
                            spec.components = { securitySchemes: {} };
                        }
                        
                        if (endpoint.auth.type === 'basic') {
                            spec.components.securitySchemes.basicAuth = {
                                type: 'http',
                                scheme: 'basic'
                            };
                            
                            spec.paths[path][method].security = [{ basicAuth: [] }];
                        } else if (endpoint.auth.type === 'bearer') {
                            spec.components.securitySchemes.bearerAuth = {
                                type: 'http',
                                scheme: 'bearer'
                            };
                            
                            spec.paths[path][method].security = [{ bearerAuth: [] }];
                        } else if (endpoint.auth.type === 'api-key') {
                            const keyName = endpoint.auth.keyName || 'api_key';
                            
                            spec.components.securitySchemes.apiKey = {
                                type: 'apiKey',
                                name: keyName,
                                in: endpoint.auth.addTo === 'header' ? 'header' : 'query'
                            };
                            
                            spec.paths[path][method].security = [{ apiKey: [] }];
                        } else if (endpoint.auth.type === 'oauth2') {
                            spec.components.securitySchemes.oauth2 = {
                                type: 'oauth2',
                                flows: {
                                    authorizationCode: {
                                        authorizationUrl: 'https://example.com/oauth/authorize',
                                        tokenUrl: 'https://example.com/oauth/token',
                                        scopes: {
                                            read: 'Read access',
                                            write: 'Write access'
                                        }
                                    }
                                }
                            };
                            
                            spec.paths[path][method].security = [{ oauth2: ['read', 'write'] }];
                        }
                    }
                });
                
                // Export the spec
                const specJson = JSON.stringify(spec, null, 2);
                const blob = new Blob([specJson], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'openapi-spec.json';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                this.log('OpenAPI specification exported', 'info');
                this.addRecentActivity('OpenAPI specification exported');
            }

            copyDocsToClipboard() {
                const docsContainer = document.querySelector('#docsContent pre');
                if (docsContainer) {
                    navigator.clipboard.writeText(docsContainer.textContent)
                        .then(() => {
                            this.showAlert('Documentation copied to clipboard', 'success');
                        })
                        .catch(err => {
                            this.showAlert('Failed to copy documentation: ' + err.message, 'danger');
                        });
                }
            }

            // Webhook Management
            addWebhook() {
                const id = this.generateId();
                const newWebhook = {
                    id: id,
                    name: 'New Webhook',
                    url: '',
                    description: '',
                    events: [],
                    headers: [],
                    enabled: true,
                    createdAt: new Date(),
                    lastTriggered: null
                };
                
                this.config.webhooks.push(newWebhook);
                this.renderWebhooks();
                this.saveConfig();
                this.log('Webhook added', 'info');
                this.addRecentActivity('New webhook added');
            }

            updateWebhook(id, updates) {
                const webhookIndex = this.config.webhooks.findIndex(webhook => webhook.id === id);
                if (webhookIndex !== -1) {
                    this.config.webhooks[webhookIndex] = {
                        ...this.config.webhooks[webhookIndex],
                        ...updates
                    };
                    this.saveConfig();
                    this.log(`Webhook ${updates.name || id} updated`, 'info');
                }
            }

            deleteWebhook(id) {
                this.showConfirmation(
                    'Are you sure you want to delete this webhook?',
                    () => {
                        const webhookIndex = this.config.webhooks.findIndex(webhook => webhook.id === id);
                        if (webhookIndex !== -1) {
                            const name = this.config.webhooks[webhookIndex].name;
                            this.config.webhooks.splice(webhookIndex, 1);
                            this.renderWebhooks();
                            this.saveConfig();
                            this.log(`Webhook "${name}" deleted`, 'info');
                            this.addRecentActivity(`Webhook "${name}" deleted`);
                        }
                    }
                );
            }

            triggerWebhook(id) {
                const webhook = this.config.webhooks.find(webhook => webhook.id === id);
                if (webhook && webhook.url) {
                    this.log(`Manually triggering webhook "${webhook.name}"`, 'info');
                    
                    // Prepare headers
                    const headers = {
                        'Content-Type': 'application/json'
                    };
                    
                    webhook.headers.forEach(header => {
                        if (header.name) {
                            headers[header.name] = header.value;
                        }
                    });
                    
                    // Prepare payload
                    const payload = {
                        event: 'manual_trigger',
                        webhook_id: webhook.id,
                        webhook_name: webhook.name,
                        timestamp: new Date().toISOString(),
                        data: {}
                    };
                    
                    // Make the request
                    fetch(webhook.url, {
                        method: 'POST',
                        headers: headers,
                        body: JSON.stringify(payload)
                    })
                        .then(response => {
                            if (response.ok) {
                                this.log(`Webhook "${webhook.name}" triggered successfully`, 'info');
                                this.showAlert(`Webhook triggered successfully: ${response.status} ${response.statusText}`, 'success');
                                
                                webhook.lastTriggered = new Date();
                                this.renderWebhooks();
                                this.saveConfig();
                            } else {
                                this.log(`Webhook "${webhook.name}" trigger failed: ${response.status} ${response.statusText}`, 'error');
                                this.showAlert(`Webhook trigger failed: ${response.status} ${response.statusText}`, 'danger');
                            }
                        })
                        .catch(error => {
                            this.log(`Webhook "${webhook.name}" trigger error: ${error.message}`, 'error');
                            this.showAlert(`Webhook trigger error: ${error.message}`, 'danger');
                        });
                }
            }

            // Mapping Management
            addMapping() {
                const id = this.generateId();
                const mappingType = document.getElementById('mappingType').value;
                
                const newMapping = {
                    id: id,
                    name: 'New Mapping',
                    type: mappingType,
                    description: '',
                    source: [],
                    target: [],
                    rules: []
                };
                
                this.config.mappings.push(newMapping);
                this.renderMappings();
                this.saveConfig();
                this.log('Mapping added', 'info');
                this.addRecentActivity('New mapping added');
            }

            updateMapping(id, updates) {
                const mappingIndex = this.config.mappings.findIndex(mapping => mapping.id === id);
                if (mappingIndex !== -1) {
                    this.config.mappings[mappingIndex] = {
                        ...this.config.mappings[mappingIndex],
                        ...updates
                    };
                    this.saveConfig();
                    this.log(`Mapping ${updates.name || id} updated`, 'info');
                }
            }

            deleteMapping(id) {
                this.showConfirmation(
                    'Are you sure you want to delete this mapping?',
                    () => {
                        const mappingIndex = this.config.mappings.findIndex(mapping => mapping.id === id);
                        if (mappingIndex !== -1) {
                            const name = this.config.mappings[mappingIndex].name;
                            this.config.mappings.splice(mappingIndex, 1);
                            this.renderMappings();
                            this.saveConfig();
                            this.log(`Mapping "${name}" deleted`, 'info');
                            this.addRecentActivity(`Mapping "${name}" deleted`);
                        }
                    }
                );
            }

            // Transformation Management
            addTransformation() {
                const id = this.generateId();
                const newTransformation = {
                    id: id,
                    name: 'New Transformation',
                    description: '',
                    type: 'json',
                    code: 'function transform(input) {\n  // Transform the input data\n  return input;\n}'
                };
                
                this.config.transformations.push(newTransformation);
                this.renderTransformations();
                this.saveConfig();
                this.log('Transformation added', 'info');
                this.addRecentActivity('New transformation added');
            }

            updateTransformation(id, updates) {
                const transformationIndex = this.config.transformations.findIndex(transformation => transformation.id === id);
                if (transformationIndex !== -1) {
                    this.config.transformations[transformationIndex] = {
                        ...this.config.transformations[transformationIndex],
                        ...updates
                    };
                    this.saveConfig();
                    this.log(`Transformation ${updates.name || id} updated`, 'info');
                }
            }

            deleteTransformation(id) {
                this.showConfirmation(
                    'Are you sure you want to delete this transformation?',
                    () => {
                        const transformationIndex = this.config.transformations.findIndex(transformation => transformation.id === id);
                        if (transformationIndex !== -1) {
                            const name = this.config.transformations[transformationIndex].name;
                            this.config.transformations.splice(transformationIndex, 1);
                            this.renderTransformations();
                            this.saveConfig();
                            this.log(`Transformation "${name}" deleted`, 'info');
                            this.addRecentActivity(`Transformation "${name}" deleted`);
                        }
                    }
                );
            }

            testTransformation(id) {
                const transformation = this.config.transformations.find(transformation => transformation.id === id);
                if (transformation) {
                    const inputData = document.getElementById(`transformation-input-${id}`).value;
                    let input;
                    
                    try {
                        input = JSON.parse(inputData);
                    } catch (e) {
                        input = inputData;
                    }
                    
                    try {
                        // Create a function from the transformation code
                        const transformFunc = new Function('input', transformation.code + '\nreturn transform(input);');
                        
                        // Execute the transformation
                        const output = transformFunc(input);
                        
                        // Display the result
                        document.getElementById(`transformation-output-${id}`).value = typeof output === 'object' ? 
                            JSON.stringify(output, null, 2) : 
                            output.toString();
                        
                        this.showAlert('Transformation executed successfully', 'success');
                    } catch (error) {
                        document.getElementById(`transformation-output-${id}`).value = `Error: ${error.message}`;
                        this.showAlert(`Transformation error: ${error.message}`, 'danger');
                    }
                }
            }

            addTransformNode() {
                const visualBuilder = document.getElementById('visual-transform-builder');
                const newNodeRow = document.createElement('div');
                newNodeRow.className = 'row mt-3';
                newNodeRow.innerHTML = `
                    <div class="col-md-12">
                        <div class="transform-connection"></div>
                        <div class="transform-node">
                            <div class="drag-handle">New Node</div>
                        </div>
                    </div>
                `;
                visualBuilder.appendChild(newNodeRow);
            }

            saveVisualTransform() {
                const transformName = document.getElementById('visual-transform-name').value;
                const transformType = document.getElementById('visual-transform-type').value;
                
                if (!transformName) {
                    this.showAlert('Please enter a transformation name', 'warning');
                    return;
                }
                
                // In a real application, we would serialize the visual transformation
                // into a code representation
                const transformationCode = `function transform(input) {
  // Auto-generated from visual transformation builder
  // Transformation type: ${transformType}
  
  // Process the input data
  let result = input;
  
  // Apply transformations
  ${transformType === 'data-mapping' ? 
    '// Map fields from input to output\n  result = Object.assign({}, input);' : 
    transformType === 'format-conversion' ? 
    '// Convert input format\n  result = JSON.stringify(input);' : 
    transformType === 'validation' ? 
    '// Validate input data\n  const isValid = input && typeof input === "object";\n  result = { valid: isValid, data: input };' : 
    '// Enrich input data\n  result = Object.assign({}, input, { enriched: true, timestamp: new Date().toISOString() });'}
  
  return result;
}`;
                
                const newTransformation = {
                    id: this.generateId(),
                    name: transformName,
                    description: `Visual ${transformType} transformation`,
                    type: 'json',
                    code: transformationCode
                };
                
                this.config.transformations.push(newTransformation);
                this.renderTransformations();
                this.saveConfig();
                this.log('Visual transformation saved', 'info');
                this.addRecentActivity('Visual transformation saved');
                
                // Switch to the code tab
                const codeTab = document.getElementById('code-transform-tab');
                if (codeTab) {
                    const bootstrapTab = new bootstrap.Tab(codeTab);
                    bootstrapTab.show();
                }
                
                this.showAlert('Visual transformation saved as code', 'success');
            }

            exportVisualTransform() {
                const transformName = document.getElementById('visual-transform-name').value || 'Visual Transformation';
                const transformType = document.getElementById('visual-transform-type').value;
                
                // Generate code from the visual transformation
                const transformationCode = `function transform(input) {
  // Auto-generated from visual transformation builder
  // Transformation type: ${transformType}
  
  // Process the input data
  let result = input;
  
  // Apply transformations
  ${transformType === 'data-mapping' ? 
    '// Map fields from input to output\n  result = Object.assign({}, input);' : 
    transformType === 'format-conversion' ? 
    '// Convert input format\n  result = JSON.stringify(input);' : 
    transformType === 'validation' ? 
    '// Validate input data\n  const isValid = input && typeof input === "object";\n  result = { valid: isValid, data: input };' : 
    '// Enrich input data\n  result = Object.assign({}, input, { enriched: true, timestamp: new Date().toISOString() });'}
  
  return result;
}`;
                
                // Create a download for the code
                const blob = new Blob([transformationCode], { type: 'text/javascript' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `${transformName.replace(/\s+/g, '_').toLowerCase()}.js`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                this.log('Visual transformation exported to code', 'info');
                this.showAlert('Transformation exported to JavaScript file', 'success');
            }

            // Monitoring and Metrics
            configureMonitoring() {
                const settingsTab = document.getElementById('monitoring-settings-tab');
                if (settingsTab) {
                    // Switch to monitoring settings tab
                    const tabsEl = document.getElementById('settingsTabs');
                    const settingsTabsObj = new bootstrap.Tab(settingsTab);
                    settingsTabsObj.show();
                    
                    // Then switch to settings tab if needed
                    const mainSettingsTab = document.getElementById('settings');
                    const mainTabsEl = document.querySelector('.nav-link[href="#settings"]');
                    if (mainTabsEl) {
                        const mainTabsObj = new bootstrap.Tab(mainTabsEl);
                        mainTabsObj.show();
                    }
                }
            }

            refreshMetrics() {
                this.log('Refreshing metrics', 'info');
                this.updateMonitoringMetrics();
                this.showAlert('Metrics refreshed', 'success');
            }

            updateMonitoringMetrics() {
                // Update the metrics in the UI
                document.getElementById('totalRequestsCount').textContent = this.metrics.totalRequests;
                document.getElementById('successRatePercent').textContent = `${this.metrics.successRate.toFixed(1)}%`;
                document.getElementById('avgResponseTime').textContent = `${this.metrics.avgResponseTime.toFixed(0)}ms`;
                document.getElementById('activeEndpointsCount').textContent = this.config.endpoints.length;
                
                // In a real application, we would update charts here
                // For the demo, we'll just log the metrics
                this.log(`Metrics updated: ${this.metrics.totalRequests} requests, ${this.metrics.successRate.toFixed(1)}% success rate, ${this.metrics.avgResponseTime.toFixed(0)}ms avg response time`, 'info');
            }

            // Logs Management
            log(message, level = 'info', details = null) {
                const logEntry = {
                    id: this.generateId(),
                    timestamp: new Date(),
                    level: level,
                    message: message,
                    details: details
                };
                
                this.logs.unshift(logEntry);
                
                // Limit the number of logs
                if (this.logs.length > 1000) {
                    this.logs.pop();
                }
                
                this.renderLogs();
                
                // Output to console
                if (level === 'error') {
                    console.error(message, details);
                } else if (level === 'warning') {
                    console.warn(message, details);
                } else {
                    console.log(message, details);
                }
            }

            clearLogs() {
                this.showConfirmation(
                    'Are you sure you want to clear all logs?',
                    () => {
                        this.logs = [];
                        this.renderLogs();
                        console.clear();
                        this.showAlert('Logs cleared', 'success');
                    }
                );
            }

            exportLogs() {
                const logsJson = JSON.stringify(this.logs, null, 2);
                const blob = new Blob([logsJson], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `api_manager_logs_${new Date().toISOString()}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                this.log('Logs exported', 'info');
                this.showAlert('Logs exported successfully', 'success');
            }

            searchLogs() {
                const searchTerm = document.getElementById('logSearch').value.toLowerCase();
                const logLevel = document.getElementById('logLevel').value;
                const logDate = document.getElementById('logDate').value;
                
                // Filter logs
                const filteredLogs = this.logs.filter(log => {
                    // Filter by search term
                    const messageMatches = log.message.toLowerCase().includes(searchTerm);
                    const detailsMatches = log.details && JSON.stringify(log.details).toLowerCase().includes(searchTerm);
                    
                    // Filter by level
                    const levelMatches = logLevel === 'all' || log.level === logLevel;
                    
                    // Filter by date
                    let dateMatches = true;
                    if (logDate) {
                        const logDateStr = log.timestamp.toISOString().split('T')[0];
                        dateMatches = logDateStr === logDate;
                    }
                    
                    return (messageMatches || detailsMatches) && levelMatches && dateMatches;
                });
                
                this.renderFilteredLogs(filteredLogs);
            }

            renderFilteredLogs(filteredLogs) {
                const logsList = document.getElementById('logsList');
                if (logsList) {
                    if (filteredLogs.length === 0) {
                        logsList.innerHTML = `
                            <div class="alert alert-info">
                                No logs match your search criteria.
                            </div>
                        `;
                        return;
                    }
                    
                    logsList.innerHTML = '';
                    
                    filteredLogs.forEach(log => {
                        const logEntry = document.createElement('div');
                        logEntry.className = `log-entry log-${log.level}`;
                        
                        const timestamp = log.timestamp.toLocaleString();
                        
                        logEntry.innerHTML = `
                            <div class="d-flex justify-content-between">
                                <span class="timestamp">${timestamp}</span>
                                <span class="badge bg-${this.getLogLevelClass(log.level)}">${log.level}</span>
                            </div>
                            <div class="message mt-1">${this.escapeHtml(log.message)}</div>
                            ${log.details ? `<div class="details mt-1"><small>${typeof log.details === 'object' ? JSON.stringify(log.details, null, 2) : this.escapeHtml(log.details)}</small></div>` : ''}
                        `;
                        
                        logsList.appendChild(logEntry);
                    });
                }
            }

            getLogLevelClass(level) {
                switch (level) {
                    case 'info': return 'info';
                    case 'warning': return 'warning';
                    case 'error': return 'danger';
                    default: return 'secondary';
                }
            }

            // Settings Management
            updateStorageProvider(provider) {
                // Hide all storage provider settings
                const providerSettings = document.querySelectorAll('.storage-provider-settings');
                providerSettings.forEach(el => el.classList.add('d-none'));
                
                // Show the selected provider settings
                const selectedSettings = document.getElementById(`${provider}Settings`);
                if (selectedSettings) {
                    selectedSettings.classList.remove('d-none');
                }
                
                // Update the config
                this.config.settings.storage.provider = provider;
                
                this.saveConfig();
                this.log(`Storage provider changed to ${provider}`, 'info');
            }

            // Dashboard
            updateDashboard() {
                document.getElementById('dashboardEndpointCount').textContent = this.config.endpoints.length;
                document.getElementById('dashboardTestCount').textContent = this.config.tests.length;
                
                // Update environment badge
                const badge = document.getElementById('environmentBadge');
                badge.textContent = this.capitalizeFirstLetter(this.currentEnvironment);
                badge.className = 'environment-badge';
                
                if (this.currentEnvironment === 'development') {
                    badge.classList.add('environment-development');
                } else if (this.currentEnvironment === 'staging') {
                    badge.classList.add('environment-staging');
                } else if (this.currentEnvironment === 'production') {
                    badge.classList.add('environment-production');
                }
            }

            addRecentActivity(message) {
                const recentActivity = document.getElementById('recentActivity');
                if (recentActivity) {
                    const activityItem = document.createElement('div');
                    activityItem.className = 'list-group-item list-group-item-action';
                    
                    const time = new Date().toLocaleTimeString();
                    
                    activityItem.innerHTML = `
                        <div class="d-flex w-100 justify-content-between">
                            <h6 class="mb-1">${this.escapeHtml(message)}</h6>
                            <small>${time}</small>
                        </div>
                        <small class="text-muted">Environment: ${this.capitalizeFirstLetter(this.currentEnvironment)}</small>
                    `;
                    
                    // Insert at the top
                    recentActivity.insertBefore(activityItem, recentActivity.firstChild);
                    
                    // Limit to 5 items
                    if (recentActivity.children.length > 5) {
                        recentActivity.removeChild(recentActivity.lastChild);
                    }
                }
            }

            // Rendering functions
            renderAll() {
                this.renderEndpoints();
                this.renderTests();
                this.renderWebhooks();
                this.renderMappings();
                this.renderTransformations();
                this.renderAuthProfiles();
                this.renderApiKeys();
                this.renderMockResponses();
                this.renderLogs();
                this.renderSettings();
                this.updateDashboard();
            }

            renderEndpoints() {
                const endpointsList = document.getElementById('endpointsList');
                if (endpointsList) {
                    if (this.config.endpoints.length === 0) {
                        endpointsList.innerHTML = `
                            <div class="alert alert-info">
                                No endpoints configured yet. Click "Add Endpoint" to get started.
                            </div>
                        `;
                        return;
                    }
                    
                    endpointsList.innerHTML = '';
                    
                    this.config.endpoints.forEach(endpoint => {
                        const endpointCard = document.createElement('div');
                        endpointCard.className = 'card mb-3';
                        endpointCard.dataset.id = endpoint.id;
                        
                        endpointCard.innerHTML = `
                            <div class="card-header">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">${this.escapeHtml(endpoint.name)}</h5>
                                    <div>
                                        <button class="btn btn-sm btn-outline-secondary me-1" onclick="manager.testEndpoint('${endpoint.id}')">
                                            <i class="bi bi-play-fill"></i> Test
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="manager.deleteEndpoint('${endpoint.id}')">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label class="form-label">Name</label>
                                        <input type="text" class="form-control" value="${this.escapeHtml(endpoint.name)}" 
                                               onchange="manager.updateEndpoint('${endpoint.id}', {name: this.value})" 
                                               placeholder="Endpoint Name">
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Method</label>
                                        <select class="form-select" 
                                                onchange="manager.updateEndpoint('${endpoint.id}', {method: this.value})">
                                            <option value="GET" ${endpoint.method === 'GET' ? 'selected' : ''}>GET</option>
                                            <option value="POST" ${endpoint.method === 'POST' ? 'selected' : ''}>POST</option>
                                            <option value="PUT" ${endpoint.method === 'PUT' ? 'selected' : ''}>PUT</option>
                                            <option value="DELETE" ${endpoint.method === 'DELETE' ? 'selected' : ''}>DELETE</option>
                                            <option value="PATCH" ${endpoint.method === 'PATCH' ? 'selected' : ''}>PATCH</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Version</label>
                                        <input type="text" class="form-control" value="${this.escapeHtml(endpoint.version)}" 
                                               onchange="manager.updateEndpoint('${endpoint.id}', {version: this.value})" 
                                               placeholder="API Version">
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">URL</label>
                                    <input type="url" class="form-control" value="${this.escapeHtml(endpoint.url)}" 
                                           onchange="manager.updateEndpoint('${endpoint.id}', {url: this.value})" 
                                           placeholder="https://api.example.com/resource">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" rows="2" 
                                              onchange="manager.updateEndpoint('${endpoint.id}', {description: this.value})" 
                                              placeholder="Describe what this endpoint does">${this.escapeHtml(endpoint.description)}</textarea>
                                </div>
                                
                                <ul class="nav nav-tabs mb-3" role="tablist">
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#headers-${endpoint.id}" type="button" role="tab" aria-selected="true">
                                            Headers
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#params-${endpoint.id}" type="button" role="tab" aria-selected="false">
                                            Parameters
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#body-${endpoint.id}" type="button" role="tab" aria-selected="false">
                                            Body
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#auth-${endpoint.id}" type="button" role="tab" aria-selected="false">
                                            Auth
                                        </button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#advanced-${endpoint.id}" type="button" role="tab" aria-selected="false">
                                            Advanced
                                        </button>
                                    </li>
                                </ul>
                                
                                <div class="tab-content">
                                    <div class="tab-pane fade show active" id="headers-${endpoint.id}" role="tabpanel">
                                        <div id="headers-container-${endpoint.id}">
                                            ${this.renderEndpointHeaders(endpoint)}
                                        </div>
                                        <button class="btn btn-outline-secondary btn-sm" onclick="manager.addHeader('${endpoint.id}')">
                                            <i class="bi bi-plus-lg"></i> Add Header
                                        </button>
                                    </div>
                                    
                                    <div class="tab-pane fade" id="params-${endpoint.id}" role="tabpanel">
                                        <div id="params-container-${endpoint.id}">
                                            ${this.renderEndpointParams(endpoint)}
                                        </div>
                                        <button class="btn btn-outline-secondary btn-sm" onclick="manager.addParameter('${endpoint.id}')">
                                            <i class="bi bi-plus-lg"></i> Add Parameter
                                        </button>
                                    </div>
                                    
                                    <div class="tab-pane fade" id="body-${endpoint.id}" role="tabpanel">
                                        <div class="mb-3">
                                            <label class="form-label">Content Type</label>
                                            <select class="form-select" onchange="manager.updateEndpoint('${endpoint.id}', {contentType: this.value})">
                                                <option value="application/json" ${endpoint.contentType === 'application/json' ? 'selected' : ''}>application/json</option>
                                                <option value="application/xml" ${endpoint.contentType === 'application/xml' ? 'selected' : ''}>application/xml</option>
                                                <option value="multipart/form-data" ${endpoint.contentType === 'multipart/form-data' ? 'selected' : ''}>multipart/form-data</option>
                                                <option value="text/plain" ${endpoint.contentType === 'text/plain' ? 'selected' : ''}>text/plain</option>
                                            </select>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Request Body</label>
                                            <textarea class="form-control code-editor" rows="8" 
                                                      onchange="manager.updateEndpoint('${endpoint.id}', {body: this.value})" 
                                                      placeholder='{ "key": "value" }'>${this.escapeHtml(endpoint.body)}</textarea>
                                        </div>
                                    </div>
                                    
                                    <div class="tab-pane fade" id="auth-${endpoint.id}" role="tabpanel">
                                        <div class="mb-3">
                                            <label class="form-label">Authentication Type</label>
                                            <select class="form-select" onchange="manager.updateEndpointAuth('${endpoint.id}', {type: this.value})">
                                                <option value="none" ${endpoint.auth.type === 'none' ? 'selected' : ''}>None</option>
                                                <option value="basic" ${endpoint.auth.type === 'basic' ? 'selected' : ''}>Basic Auth</option>
                                                <option value="bearer" ${endpoint.auth.type === 'bearer' ? 'selected' : ''}>Bearer Token</option>
                                                <option value="api-key" ${endpoint.auth.type === 'api-key' ? 'selected' : ''}>API Key</option>
                                                <option value="oauth2" ${endpoint.auth.type === 'oauth2' ? 'selected' : ''}>OAuth 2.0</option>
                                            </select>
                                        </div>
                                        
                                        <div id="auth-details-${endpoint.id}" class="auth-${endpoint.auth.type}">
                                            ${this.renderEndpointAuthDetails(endpoint)}
                                        </div>
                                    </div>
                                    
                                    <div class="tab-pane fade" id="advanced-${endpoint.id}" role="tabpanel">
                                        <div class="mb-3">
                                            <label class="form-label">Timeout (milliseconds)</label>
                                            <input type="number" class="form-control" value="${endpoint.timeout}" 
                                                   onchange="manager.updateEndpoint('${endpoint.id}', {timeout: parseInt(this.value)})">
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Retry Count</label>
                                            <input type="number" class="form-control" value="${endpoint.retryCount}" 
                                                   onchange="manager.updateEndpoint('${endpoint.id}', {retryCount: parseInt(this.value)})">
                                        </div>
                                        <div class="form-check mb-3">
                                            <input class="form-check-input" type="checkbox" id="follow-redirects-${endpoint.id}" 
                                                   ${endpoint.followRedirects ? 'checked' : ''} 
                                                   onchange="manager.updateEndpoint('${endpoint.id}', {followRedirects: this.checked})">
                                            <label class="form-check-label" for="follow-redirects-${endpoint.id}">
                                                Follow Redirects
                                            </label>
                                        </div>
                                        <div class="form-check mb-3">
                                            <input class="form-check-input" type="checkbox" id="cache-response-${endpoint.id}" 
                                                   ${endpoint.cacheResponse ? 'checked' : ''} 
                                                   onchange="manager.updateEndpoint('${endpoint.id}', {cacheResponse: this.checked})">
                                            <label class="form-check-label" for="cache-response-${endpoint.id}">
                                                Cache Response
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                        
                        endpointsList.appendChild(endpointCard);
                    });
                    
                    // Update the test endpoint selector
                    const testEndpointSelector = document.getElementById('test-endpoint-selector');
                    if (testEndpointSelector) {
                        testEndpointSelector.innerHTML = '<option value="">-- Select Endpoint --</option>';
                        
                        this.config.endpoints.forEach(endpoint => {
                            const option = document.createElement('option');
                            option.value = endpoint.id;
                            option.textContent = endpoint.name;
                            testEndpointSelector.appendChild(option);
                        });
                    }
                }
            }

            renderEndpointHeaders(endpoint) {
                if (!endpoint.headers || endpoint.headers.length === 0) {
                    return `
                        <div class="row mb-2">
                            <div class="col-md-5">
                                <input type="text" class="form-control" placeholder="Header Name">
                            </div>
                            <div class="col-md-5">
                                <input type="text" class="form-control" placeholder="Header Value">
                            </div>
                            <div class="col-md-2">
                                <button class="btn btn-outline-danger w-100">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    `;
                }
                
                return endpoint.headers.map((header, index) => `
                    <div class="row mb-2">
                        <div class="col-md-5">
                            <input type="text" class="form-control" value="${this.escapeHtml(header.name || '')}" placeholder="Header Name"
                                   onchange="manager.updateEndpointHeader('${endpoint.id}', this.parentElement.parentElement, 'name', this.value)">
                        </div>
                        <div class="col-md-5">
                            <input type="text" class="form-control" value="${this.escapeHtml(header.value || '')}" placeholder="Header Value"
                                   onchange="manager.updateEndpointHeader('${endpoint.id}', this.parentElement.parentElement, 'value', this.value)">
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-outline-danger w-100" onclick="manager.removeEndpointHeader('${endpoint.id}', this.parentElement.parentElement)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                `).join('');
            }

            renderEndpointParams(endpoint) {
                if (!endpoint.parameters || endpoint.parameters.length === 0) {
                    return `
                        <div class="row mb-2">
                            <div class="col-md-5">
                                <input type="text" class="form-control" placeholder="Parameter Name">
                            </div>
                            <div class="col-md-5">
                                <input type="text" class="form-control" placeholder="Parameter Value">
                            </div>
                            <div class="col-md-2">
                                <button class="btn btn-outline-danger w-100">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    `;
                }
                
                return endpoint.parameters.map((param, index) => `
                    <div class="row mb-2">
                        <div class="col-md-5">
                            <input type="text" class="form-control" value="${this.escapeHtml(param.name || '')}" placeholder="Parameter Name"
                                   onchange="manager.updateEndpointParam('${endpoint.id}', this.parentElement.parentElement, 'name', this.value)">
                        </div>
                        <div class="col-md-5">
                            <input type="text" class="form-control" value="${this.escapeHtml(param.value || '')}" placeholder="Parameter Value"
                                   onchange="manager.updateEndpointParam('${endpoint.id}', this.parentElement.parentElement, 'value', this.value)">
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-outline-danger w-100" onclick="manager.removeEndpointParam('${endpoint.id}', this.parentElement.parentElement)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                `).join('');
            }

            renderEndpointAuthDetails(endpoint) {
                const auth = endpoint.auth;
                
                if (auth.type === 'basic') {
                    return `
                        <div class="mb-3">
                            <label class="form-label">Username</label>
                            <input type="text" class="form-control" value="${this.escapeHtml(auth.username || '')}" 
                                   onchange="manager.updateEndpointAuth('${endpoint.id}', {username: this.value})" 
                                   placeholder="Username">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <input type="password" class="form-control" value="${this.escapeHtml(auth.password || '')}" 
                                   onchange="manager.updateEndpointAuth('${endpoint.id}', {password: this.value})" 
                                   placeholder="Password">
                        </div>
                    `;
                } else if (auth.type === 'bearer') {
                    return `
                        <div class="mb-3">
                            <label class="form-label">Token</label>
                            <input type="text" class="form-control" value="${this.escapeHtml(auth.token || '')}" 
                                   onchange="manager.updateEndpointAuth('${endpoint.id}', {token: this.value})" 
                                   placeholder="Bearer Token">
                        </div>
                    `;
                } else if (auth.type === 'api-key') {
                    return `
                        <div class="mb-3">
                            <label class="form-label">API Key Name</label>
                            <input type="text" class="form-control" value="${this.escapeHtml(auth.keyName || '')}" 
                                   onchange="manager.updateEndpointAuth('${endpoint.id}', {keyName: this.value})" 
                                   placeholder="API Key Name">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">API Key Value</label>
                            <input type="text" class="form-control" value="${this.escapeHtml(auth.keyValue || '')}" 
                                   onchange="manager.updateEndpointAuth('${endpoint.id}', {keyValue: this.value})" 
                                   placeholder="API Key Value">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Add To</label>
                            <select class="form-select" 
                                    onchange="manager.updateEndpointAuth('${endpoint.id}', {addTo: this.value})">
                                <option value="header" ${auth.addTo === 'header' ? 'selected' : ''}>Header</option>
                                <option value="query" ${auth.addTo === 'query' ? 'selected' : ''}>Query Parameter</option>
                            </select>
                        </div>
                    `;
                } else if (auth.type === 'oauth2') {
                    return `
                        <div class="mb-3">
                            <label class="form-label">OAuth 2.0 Profile</label>
                            <select class="form-select" 
                                    onchange="manager.updateEndpointAuth('${endpoint.id}', {profileId: this.value})">
                                <option value="">Select OAuth Profile</option>
                                ${this.getOAuthProfilesOptions()}
                            </select>
                        </div>
                    `;
                }
                
                return '';
            }

            renderTests() {
                const automatedTestsList = document.getElementById('automatedTestsList');
                if (automatedTestsList) {
                    if (this.config.tests.length === 0) {
                        automatedTestsList.innerHTML = `
                            <div class="text-center p-4 text-muted">
                                <p>No automated test suites yet. Create one to get started.</p>
                            </div>
                        `;
                        return;
                    }
                    
                    automatedTestsList.innerHTML = '';
                    
                    this.config.tests.forEach(testSuite => {
                        const endpoint = this.config.endpoints.find(e => e.id === testSuite.endpointId);
                        const endpointName = endpoint ? endpoint.name : 'Unknown Endpoint';
                        
                        const testSuiteCard = document.createElement('div');
                        testSuiteCard.className = 'card mb-3';
                        testSuiteCard.dataset.id = testSuite.id;
                        
                        let lastRunInfo = '';
                        if (testSuite.lastRun) {
                            const lastRunDate = new Date(testSuite.lastRun).toLocaleString();
                            const passCount = testSuite.results ? testSuite.results.passCount : 0;
                            const totalCount = testSuite.results ? (testSuite.results.passCount + testSuite.results.failCount) : 0;
                            const passRate = totalCount > 0 ? Math.round(passCount / totalCount * 100) : 0;
                            
                            lastRunInfo = `
                                <div class="text-muted mb-2">
                                    Last run: ${lastRunDate} - ${passCount}/${totalCount} passed (${passRate}%)
                                </div>
                            `;
                        }
                        
                        testSuiteCard.innerHTML = `
                            <div class="card-header">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">${this.escapeHtml(testSuite.name)}</h5>
                                    <div>
                                        <button class="btn btn-sm btn-outline-primary me-1" onclick="manager.runTestSuite('${testSuite.id}')">
                                            <i class="bi bi-play-fill"></i> Run
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="manager.deleteTestSuite('${testSuite.id}')">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <strong>Endpoint:</strong> ${this.escapeHtml(endpointName)}
                                </div>
                                ${testSuite.description ? `<div class="mb-3">${this.escapeHtml(testSuite.description)}</div>` : ''}
                                ${lastRunInfo}
                                <div class="mb-3">
                                    <strong>Test Cases:</strong> ${testSuite.testCases.length}
                                </div>
                                <div>
                                    <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#testCases-${testSuite.id}">
                                        <i class="bi bi-list-ul me-1"></i> View Test Cases
                                    </button>
                                </div>
                                <div class="collapse mt-3" id="testCases-${testSuite.id}">
                                    <div class="list-group">
                                        ${testSuite.testCases.map(testCase => `
                                            <div class="list-group-item">
                                                <div class="d-flex justify-content-between">
                                                    <h6 class="mb-1">${this.escapeHtml(testCase.name)}</h6>
                                                    <small>Expected: ${testCase.expectedStatus}</small>
                                                </div>
                                                <div>
                                                    <small>Input: ${Object.keys(testCase.inputParams).length > 0 ? JSON.stringify(testCase.inputParams) : 'None'}</small>
                                                </div>
                                            </div>
                                        `).join('')}
                                    </div>
                                </div>
                            </div>
                        `;
                        
                        automatedTestsList.appendChild(testSuiteCard);
                    });
                }
                
                this.renderTestResults();
            }

            renderTestResults() {
                const testResultsList = document.getElementById('testResultsList');
                if (testResultsList) {
                    // Gather results from all test suites
                    const results = [];
                    this.config.tests.forEach(testSuite => {
                        if (testSuite.results) {
                            results.push(testSuite.results);
                        }
                    });
                    
                    if (results.length === 0) {
                        testResultsList.innerHTML = `
                            <div class="text-center p-4 text-muted">
                                <p>No test results available yet. Run a test to see results.</p>
                            </div>
                        `;
                        return;
                    }
                    
                    testResultsList.innerHTML = '';
                    
                    // Sort by most recent first
                    results.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
                    
                    results.forEach(result => {
                        const resultCard = document.createElement('div');
                        resultCard.className = 'card mb-3';
                        resultCard.dataset.id = result.id;
                        
                        const timestamp = new Date(result.timestamp).toLocaleString();
                        const passRate = Math.round(result.passCount / (result.passCount + result.failCount) * 100);
                        const resultClass = result.failCount === 0 ? 'test-result-success' : 'test-result-failure';
                        
                        resultCard.innerHTML = `
                            <div class="card-header ${resultClass}">
                                <div class="test-result-header">
                                    <div>
                                        <strong>${this.escapeHtml(result.testSuiteName)}</strong> - ${this.escapeHtml(result.endpointName)}
                                    </div>
                                    <div>
                                        <span class="badge ${result.failCount === 0 ? 'bg-success' : 'bg-danger'}">
                                            ${result.passCount}/${result.passCount + result.failCount} (${passRate}%)
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <strong>Run Time:</strong> ${timestamp}
                                </div>
                                <div class="mb-3">
                                    <strong>Duration:</strong> ${result.duration}ms
                                </div>
                                <div>
                                    <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#testCaseResults-${result.id}">
                                        <i class="bi bi-list-ul me-1"></i> View Test Case Results
                                    </button>
                                </div>
                                <div class="collapse mt-3" id="testCaseResults-${result.id}">
                                    <div class="list-group">
                                        ${result.testCaseResults.map(tcResult => `
                                            <div class="list-group-item ${tcResult.passed ? 'test-result-success' : 'test-result-failure'}">
                                                <div class="d-flex justify-content-between">
                                                    <h6 class="mb-1">${this.escapeHtml(tcResult.testCaseName)}</h6>
                                                    <small>
                                                        <span class="badge ${tcResult.passed ? 'bg-success' : 'bg-danger'}">
                                                            ${tcResult.passed ? 'PASS' : 'FAIL'}
                                                        </span>
                                                    </small>
                                                </div>
                                                <div>
                                                    <small>Status: ${tcResult.status} (${tcResult.duration}ms)</small>
                                                </div>
                                                ${tcResult.error ? `<div class="mt-2 text-danger">${this.escapeHtml(tcResult.error)}</div>` : ''}
                                            </div>
                                        `).join('')}
                                    </div>
                                </div>
                            </div>
                        `;
                        
                        testResultsList.appendChild(resultCard);
                    });
                }
            }

            renderWebhooks() {
                const webhooksList = document.getElementById('webhooksList');
                if (webhooksList) {
                    if (this.config.webhooks.length === 0) {
                        webhooksList.innerHTML = `
                            <div class="text-center p-5 text-muted">
                                <p>No webhooks configured yet.</p>
                            </div>
                        `;
                        return;
                    }
                    
                    webhooksList.innerHTML = '';
                    
                    this.config.webhooks.forEach(webhook => {
                        const webhookCard = document.createElement('div');
                        webhookCard.className = 'card mb-3';
                        webhookCard.dataset.id = webhook.id;
                        
                        let lastTriggeredInfo = '';
                        if (webhook.lastTriggered) {
                            const lastTriggeredDate = new Date(webhook.lastTriggered).toLocaleString();
                            lastTriggeredInfo = `<div class="text-muted mb-2">Last triggered: ${lastTriggeredDate}</div>`;
                        }
                        
                        webhookCard.innerHTML = `
                            <div class="card-header">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">${this.escapeHtml(webhook.name)}</h5>
                                    <div>
                                        <button class="btn btn-sm btn-outline-primary me-1" onclick="manager.triggerWebhook('${webhook.id}')">
                                            <i class="bi bi-lightning-fill"></i> Trigger
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="manager.deleteWebhook('${webhook.id}')">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Name</label>
                                    <input type="text" class="form-control" value="${this.escapeHtml(webhook.name)}" 
                                           onchange="manager.updateWebhook('${webhook.id}', {name: this.value})" 
                                           placeholder="Webhook Name">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">URL</label>
                                    <input type="url" class="form-control" value="${this.escapeHtml(webhook.url)}" 
                                           onchange="manager.updateWebhook('${webhook.id}', {url: this.value})" 
                                           placeholder="https://example.com/webhook">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" rows="2" 
                                              onchange="manager.updateWebhook('${webhook.id}', {description: this.value})" 
                                              placeholder="Describe this webhook">${this.escapeHtml(webhook.description)}</textarea>
                                </div>
                                ${lastTriggeredInfo}
                                <div class="mb-3">
                                    <label class="form-label">Trigger Events</label>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" id="event-request-${webhook.id}" 
                                                       ${webhook.events.includes('request') ? 'checked' : ''} 
                                                       onchange="manager.updateWebhookEvents('${webhook.id}', 'request', this.checked)">
                                                <label class="form-check-label" for="event-request-${webhook.id}">
                                                    API Request
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" id="event-response-${webhook.id}" 
                                                       ${webhook.events.includes('response') ? 'checked' : ''} 
                                                       onchange="manager.updateWebhookEvents('${webhook.id}', 'response', this.checked)">
                                                <label class="form-check-label" for="event-response-${webhook.id}">
                                                    API Response
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" id="event-error-${webhook.id}" 
                                                       ${webhook.events.includes('error') ? 'checked' : ''} 
                                                       onchange="manager.updateWebhookEvents('${webhook.id}', 'error', this.checked)">
                                                <label class="form-check-label" for="event-error-${webhook.id}">
                                                    API Error
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input" type="checkbox" id="webhook-enabled-${webhook.id}" 
                                           ${webhook.enabled ? 'checked' : ''} 
                                           onchange="manager.updateWebhook('${webhook.id}', {enabled: this.checked})">
                                    <label class="form-check-label" for="webhook-enabled-${webhook.id}">
                                        Enabled
                                    </label>
                                </div>
                            </div>
                        `;
                        
                        webhooksList.appendChild(webhookCard);
                    });
                }
            }

            updateWebhookEvents(id, event, checked) {
                const webhook = this.config.webhooks.find(webhook => webhook.id === id);
                if (webhook) {
                    if (checked && !webhook.events.includes(event)) {
                        webhook.events.push(event);
                    } else if (!checked && webhook.events.includes(event)) {
                        webhook.events = webhook.events.filter(e => e !== event);
                    }
                    
                    this.saveConfig();
                }
            }

            renderMappings() {
                const mappingsList = document.getElementById('mappingsList');
                if (mappingsList) {
                    if (this.config.mappings.length === 0) {
                        mappingsList.innerHTML = `
                            <div class="text-center p-5 text-muted">
                                <p>No mappings configured yet.</p>
                            </div>
                        `;
                        return;
                    }
                    
                    mappingsList.innerHTML = '';
                    
                    this.config.mappings.forEach(mapping => {
                        const mappingCard = document.createElement('div');
                        mappingCard.className = 'card mb-3';
                        mappingCard.dataset.id = mapping.id;
                        
                        const typeLabel = {
                            'simple': 'Simple Mapping',
                            'transform': 'Transform',
                            'conditional': 'Conditional',
                            'array': 'Array Mapping'
                        }[mapping.type] || mapping.type;
                        
                        mappingCard.innerHTML = `
                            <div class="card-header">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">${this.escapeHtml(mapping.name)}</h5>
                                    <div>
                                        <span class="badge bg-secondary">${typeLabel}</span>
                                        <button class="btn btn-sm btn-outline-danger ms-2" onclick="manager.deleteMapping('${mapping.id}')">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Name</label>
                                    <input type="text" class="form-control" value="${this.escapeHtml(mapping.name)}" 
                                           onchange="manager.updateMapping('${mapping.id}', {name: this.value})" 
                                           placeholder="Mapping Name">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" rows="2" 
                                              onchange="manager.updateMapping('${mapping.id}', {description: this.value})" 
                                              placeholder="Describe this mapping">${this.escapeHtml(mapping.description)}</textarea>
                                </div>
                                
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Source Fields</label>
                                            <div id="source-fields-${mapping.id}">
                                                ${mapping.source.map((field, index) => `
                                                    <div class="input-group mb-2">
                                                        <input type="text" class="form-control" value="${this.escapeHtml(field)}" 
                                                               onchange="manager.updateMappingField('${mapping.id}', 'source', ${index}, this.value)" 
                                                               placeholder="Field path">
                                                        <button class="btn btn-outline-danger" onclick="manager.removeMappingField('${mapping.id}', 'source', ${index})">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </div>
                                                `).join('')}
                                                <button class="btn btn-outline-secondary btn-sm" onclick="manager.addMappingField('${mapping.id}', 'source')">
                                                    <i class="bi bi-plus-lg"></i> Add Field
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Target Fields</label>
                                            <div id="target-fields-${mapping.id}">
                                                ${mapping.target.map((field, index) => `
                                                    <div class="input-group mb-2">
                                                        <input type="text" class="form-control" value="${this.escapeHtml(field)}" 
                                                               onchange="manager.updateMappingField('${mapping.id}', 'target', ${index}, this.value)" 
                                                               placeholder="Field path">
                                                        <button class="btn btn-outline-danger" onclick="manager.removeMappingField('${mapping.id}', 'target', ${index})">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </div>
                                                `).join('')}
                                                <button class="btn btn-outline-secondary btn-sm" onclick="manager.addMappingField('${mapping.id}', 'target')">
                                                    <i class="bi bi-plus-lg"></i> Add Field
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                ${mapping.type === 'transform' || mapping.type === 'conditional' ? `
                                    <div class="mb-3">
                                        <label class="form-label">Transformation Rules</label>
                                        <textarea class="form-control code-editor" rows="5" 
                                                  onchange="manager.updateMappingRules('${mapping.id}', this.value)" 
                                                  placeholder='{ "condition": "value > 0", "transform": "value * 2" }'>${mapping.rules && mapping.rules.length > 0 ? JSON.stringify(mapping.rules, null, 2) : ''}</textarea>
                                    </div>
                                ` : ''}
                            </div>
                        `;
                        
                        mappingsList.appendChild(mappingCard);
                    });
                }
            }

            addMappingField(mappingId, fieldType) {
                const mapping = this.config.mappings.find(mapping => mapping.id === mappingId);
                if (mapping) {
                    mapping[fieldType].push('');
                    this.renderMappings();
                    this.saveConfig();
                }
            }

            updateMappingField(mappingId, fieldType, index, value) {
                const mapping = this.config.mappings.find(mapping => mapping.id === mappingId);
                if (mapping && mapping[fieldType] && mapping[fieldType][index] !== undefined) {
                    mapping[fieldType][index] = value;
                    this.saveConfig();
                }
            }

            removeMappingField(mappingId, fieldType, index) {
                const mapping = this.config.mappings.find(mapping => mapping.id === mappingId);
                if (mapping && mapping[fieldType] && mapping[fieldType][index] !== undefined) {
                    mapping[fieldType].splice(index, 1);
                    this.renderMappings();
                    this.saveConfig();
                }
            }

            updateMappingRules(mappingId, rulesJson) {
                const mapping = this.config.mappings.find(mapping => mapping.id === mappingId);
                if (mapping) {
                    try {
                        mapping.rules = JSON.parse(rulesJson);
                        this.saveConfig();
                    } catch (error) {
                        this.showAlert('Invalid JSON for mapping rules', 'danger');
                    }
                }
            }

            renderTransformations() {
                const transformationsList = document.getElementById('transformationsList');
                if (transformationsList) {
                    if (this.config.transformations.length === 0) {
                        transformationsList.innerHTML = `
                            <div class="text-center p-5 text-muted">
                                <p>No transformations configured yet.</p>
                            </div>
                        `;
                        return;
                    }
                    
                    transformationsList.innerHTML = '';
                    
                    this.config.transformations.forEach(transformation => {
                        const transformationCard = document.createElement('div');
                        transformationCard.className = 'card mb-3';
                        transformationCard.dataset.id = transformation.id;
                        
                        transformationCard.innerHTML = `
                            <div class="card-header">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">${this.escapeHtml(transformation.name)}</h5>
                                    <div>
                                        <span class="badge bg-info">${transformation.type.toUpperCase()}</span>
                                        <button class="btn btn-sm btn-outline-danger ms-2" onclick="manager.deleteTransformation('${transformation.id}')">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Name</label>
                                    <input type="text" class="form-control" value="${this.escapeHtml(transformation.name)}" 
                                           onchange="manager.updateTransformation('${transformation.id}', {name: this.value})" 
                                           placeholder="Transformation Name">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" rows="2" 
                                              onchange="manager.updateTransformation('${transformation.id}', {description: this.value})" 
                                              placeholder="Describe this transformation">${this.escapeHtml(transformation.description)}</textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Type</label>
                                    <select class="form-select" 
                                            onchange="manager.updateTransformation('${transformation.id}', {type: this.value})">
                                        <option value="json" ${transformation.type === 'json' ? 'selected' : ''}>JSON</option>
                                        <option value="xml" ${transformation.type === 'xml' ? 'selected' : ''}>XML</option>
                                        <option value="text" ${transformation.type === 'text' ? 'selected' : ''}>Text</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Transformation Code</label>
                                    <textarea class="form-control code-editor" rows="8" 
                                              onchange="manager.updateTransformation('${transformation.id}', {code: this.value})" 
                                              placeholder="function transform(input) {\n  // Transform the input data\n  return input;\n}">${this.escapeHtml(transformation.code)}</textarea>
                                </div>
                                
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Test Input</label>
                                            <textarea class="form-control code-editor" rows="5" id="transformation-input-${transformation.id}" 
                                                      placeholder='{ "key": "value" }'></textarea>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Test Output</label>
                                            <textarea class="form-control code-editor" rows="5" id="transformation-output-${transformation.id}" 
                                                      placeholder="Output will appear here" readonly></textarea>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="d-grid">
                                    <button class="btn btn-primary" onclick="manager.testTransformation('${transformation.id}')">
                                        <i class="bi bi-play-fill"></i> Test Transformation
                                    </button>
                                </div>
                            </div>
                        `;
                        
                        transformationsList.appendChild(transformationCard);
                    });
                }
            }

            renderAuthProfiles() {
                const authProfilesList = document.getElementById('authProfilesList');
                if (authProfilesList) {
                    if (this.config.authProfiles.length === 0) {
                        authProfilesList.innerHTML = `
                            <div class="text-center p-5 text-muted">
                                <p>No authentication profiles configured yet.</p>
                            </div>
                        `;
                        return;
                    }
                    
                    authProfilesList.innerHTML = '';
                    
                    this.config.authProfiles.forEach(profile => {
                        const profileCard = document.createElement('div');
                        profileCard.className = 'card mb-3';
                        profileCard.dataset.id = profile.id;
                        
                        const typeLabel = {
                            'basic': 'Basic Auth',
                            'bearer': 'Bearer Token',
                            'api-key': 'API Key',
                            'oauth2': 'OAuth 2.0'
                        }[profile.type] || profile.type;
                        
                        let profileDetails = '';
                        
                        if (profile.type === 'basic') {
                            profileDetails = `
                                <div class="mb-3">
                                    <strong>Username:</strong> ${this.escapeHtml(profile.username)}
                                </div>
                                <div class="mb-3">
                                    <strong>Password:</strong> ********
                                </div>
                            `;
                        } else if (profile.type === 'bearer') {
                            const tokenPreview = profile.token ? 
                                profile.token.substring(0, 10) + '...' : 
                                'Not set';
                            
                            profileDetails = `
                                <div class="mb-3">
                                    <strong>Token:</strong> ${tokenPreview}
                                </div>
                            `;
                        } else if (profile.type === 'api-key') {
                            profileDetails = `
                                <div class="mb-3">
                                    <strong>Key Name:</strong> ${this.escapeHtml(profile.keyName)}
                                </div>
                                <div class="mb-3">
                                    <strong>Key Value:</strong> ${profile.keyValue ? profile.keyValue.substring(0, 10) + '...' : 'Not set'}
                                </div>
                                <div class="mb-3">
                                    <strong>Add To:</strong> ${profile.addTo === 'header' ? 'Header' : 'Query Parameter'}
                                </div>
                            `;
                        } else if (profile.type === 'oauth2') {
                            profileDetails = `
                                <div class="mb-3">
                                    <strong>Client ID:</strong> ${this.escapeHtml(profile.clientId)}
                                </div>
                                <div class="mb-3">
                                    <strong>Authorization URL:</strong> ${this.escapeHtml(profile.authUrl)}
                                </div>
                                <div class="mb-3">
                                    <strong>Token URL:</strong> ${this.escapeHtml(profile.tokenUrl)}
                                </div>
                                <div class="mb-3">
                                    <strong>Scope:</strong> ${this.escapeHtml(profile.scope)}
                                </div>
                            `;
                        }
                        
                        const createdAt = new Date(profile.createdAt).toLocaleString();
                        
                        profileCard.innerHTML = `
                            <div class="card-header">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">${this.escapeHtml(profile.name)}</h5>
                                    <div>
                                        <span class="badge bg-secondary">${typeLabel}</span>
                                        <button class="btn btn-sm btn-outline-danger ms-2" onclick="manager.deleteAuthProfile('${profile.id}')">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                ${profileDetails}
                                <div class="text-muted mt-3">
                                    <small>Created: ${createdAt}</small>
                                </div>
                            </div>
                        `;
                        
                        authProfilesList.appendChild(profileCard);
                    });
                }
            }

            deleteAuthProfile(id) {
                this.showConfirmation(
                    'Are you sure you want to delete this authentication profile?',
                    () => {
                        const profileIndex = this.config.authProfiles.findIndex(profile => profile.id === id);
                        if (profileIndex !== -1) {
                            const name = this.config.authProfiles[profileIndex].name;
                            this.config.authProfiles.splice(profileIndex, 1);
                            this.renderAuthProfiles();
                            this.saveConfig();
                            this.log(`Authentication profile "${name}" deleted`, 'info');
                            this.addRecentActivity(`Authentication profile "${name}" deleted`);
                        }
                    }
                );
            }

            renderApiKeys() {
                const apiKeysList = document.getElementById('apiKeysList');
                if (apiKeysList) {
                    if (this.config.apiKeys.length === 0) {
                        apiKeysList.innerHTML = `
                            <div class="text-center p-5 text-muted">
                                <p>No API keys generated yet.</p>
                            </div>
                        `;
                        return;
                    }
                    
                    apiKeysList.innerHTML = '';
                    
                    this.config.apiKeys.forEach(apiKey => {
                        const apiKeyCard = document.createElement('div');
                        apiKeyCard.className = 'card mb-3';
                        apiKeyCard.dataset.id = apiKey.id;
                        
                        const createdAt = new Date(apiKey.createdAt).toLocaleString();
                        const lastUsed = apiKey.lastUsed ? new Date(apiKey.lastUsed).toLocaleString() : 'Never';
                        
                        apiKeyCard.innerHTML = `
                            <div class="card-header">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">${this.escapeHtml(apiKey.name)}</h5>
                                    <div>
                                        <button class="btn btn-sm btn-outline-danger" onclick="manager.deleteApiKey('${apiKey.id}')">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Name</label>
                                    <input type="text" class="form-control" value="${this.escapeHtml(apiKey.name)}" 
                                           onchange="manager.updateApiKey('${apiKey.id}', {name: this.value})" 
                                           placeholder="API Key Name">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">API Key</label>
                                    <div class="input-group">
                                        <input type="text" class="form-control" value="${this.escapeHtml(apiKey.key)}" readonly>
                                        <button class="btn btn-outline-secondary" onclick="manager.copyApiKey('${apiKey.id}')">
                                            <i class="bi bi-clipboard"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <strong>Created:</strong> ${createdAt}
                                </div>
                                <div class="mb-3">
                                    <strong>Last Used:</strong> ${lastUsed}
                                </div>
                            </div>
                        `;
                        
                        apiKeysList.appendChild(apiKeyCard);
                    });
                }
            }

            updateApiKey(id, updates) {
                const keyIndex = this.config.apiKeys.findIndex(key => key.id === id);
                if (keyIndex !== -1) {
                    this.config.apiKeys[keyIndex] = {
                        ...this.config.apiKeys[keyIndex],
                        ...updates
                    };
                    this.saveConfig();
                    this.log(`API key ${updates.name || id} updated`, 'info');
                }
            }

            deleteApiKey(id) {
                this.showConfirmation(
                    'Are you sure you want to delete this API key?',
                    () => {
                        const keyIndex = this.config.apiKeys.findIndex(key => key.id === id);
                        if (keyIndex !== -1) {
                            const name = this.config.apiKeys[keyIndex].name;
                            this.config.apiKeys.splice(keyIndex, 1);
                            this.renderApiKeys();
                            this.saveConfig();
                            this.log(`API key "${name}" deleted`, 'info');
                            this.addRecentActivity(`API key "${name}" deleted`);
                        }
                    }
                );
            }

            copyApiKey(id) {
                const apiKey = this.config.apiKeys.find(key => key.id === id);
                if (apiKey) {
                    navigator.clipboard.writeText(apiKey.key)
                        .then(() => {
                            this.showAlert('API key copied to clipboard', 'success');
                        })
                        .catch(err => {
                            this.showAlert('Failed to copy API key: ' + err.message, 'danger');
                        });
                }
            }

            renderMockResponses() {
                const mockResponsesList = document.getElementById('mockResponsesList');
                if (mockResponsesList) {
                    if (this.config.mockResponses.length === 0) {
                        mockResponsesList.innerHTML = `
                            <div class="text-center p-4 text-muted">
                                <p>No mock responses configured yet.</p>
                            </div>
                        `;
                        return;
                    }
                    
                    mockResponsesList.innerHTML = '';
                    
                    this.config.mockResponses.forEach(mockResponse => {
                        const mockResponseCard = document.createElement('div');
                        mockResponseCard.className = 'card mb-3';
                        mockResponseCard.dataset.id = mockResponse.id;
                        
                        const createdAt = new Date(mockResponse.createdAt).toLocaleString();
                        
                        let bodyPreview = mockResponse.body;
                        if (bodyPreview && bodyPreview.length > 100) {
                            bodyPreview = bodyPreview.substring(0, 100) + '...';
                        }
                        
                        mockResponseCard.innerHTML = `
                            <div class="card-header">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">${this.escapeHtml(mockResponse.name)}</h5>
                                    <div>
                                        <span class="badge bg-primary">${mockResponse.method}</span>
                                        <button class="btn btn-sm btn-outline-danger ms-2" onclick="manager.deleteMockResponse('${mockResponse.id}')">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <strong>Path:</strong> ${this.escapeHtml(mockResponse.path)}
                                </div>
                                <div class="mb-3">
                                    <strong>Status:</strong> ${mockResponse.status}
                                </div>
                                <div class="mb-3">
                                    <strong>Delay:</strong> ${mockResponse.delay}ms
                                </div>
                                <div class="mb-3">
                                    <strong>Body:</strong>
                                    <pre class="mt-2 p-2 bg-light">${this.escapeHtml(bodyPreview)}</pre>
                                </div>
                                <div class="text-muted mt-3">
                                    <small>Created: ${createdAt}</small>
                                </div>
                            </div>
                        `;
                        
                        mockResponsesList.appendChild(mockResponseCard);
                    });
                }
            }

            deleteMockResponse(id) {
                this.showConfirmation(
                    'Are you sure you want to delete this mock response?',
                    () => {
                        const responseIndex = this.config.mockResponses.findIndex(response => response.id === id);
                        if (responseIndex !== -1) {
                            const name = this.config.mockResponses[responseIndex].name;
                            this.config.mockResponses.splice(responseIndex, 1);
                            this.renderMockResponses();
                            this.saveConfig();
                            this.log(`Mock response "${name}" deleted`, 'info');
                            this.addRecentActivity(`Mock response "${name}" deleted`);
                        }
                    }
                );
            }

            renderLogs() {
                const logsList = document.getElementById('logsList');
                if (logsList) {
                    if (this.logs.length === 0) {
                        logsList.innerHTML = `
                            <div class="alert alert-info">
                                No logs available.
                            </div>
                        `;
                        return;
                    }
                    
                    // Only show the most recent 100 logs
                    const recentLogs = this.logs.slice(0, 100);
                    this.renderFilteredLogs(recentLogs);
                }
            }

             renderSettings() {
                // General settings
                document.getElementById('defaultFormat').value = this.config.settings.defaultFormat || 'json';
                document.getElementById('autoSaveConfig').checked = this.config.settings.autoSave || false;
                
                // Network settings
                document.getElementById('rateLimit').value = this.config.settings.rateLimit || 100;
                document.getElementById('timeout').value = this.config.settings.timeout || 30;
                document.getElementById('retryCount').value = this.config.settings.retryCount || 3;
                document.getElementById('followRedirects').checked = this.config.settings.followRedirects !== false;
                document.getElementById('enableCaching').checked = this.config.settings.cacheResponse || false;
                
                // Storage settings
                document.getElementById('storageProvider').value = this.config.settings.storage.provider || 'local';
                
                if (this.config.settings.storage.provider === 's3') {
                    document.getElementById('s3Settings').classList.remove('d-none');
                    document.getElementById('s3BucketName').value = this.config.settings.storage.s3.bucketName || '';
                    document.getElementById('awsRegion').value = this.config.settings.storage.s3.region || '';
                    document.getElementById('awsAccessKey').value = this.config.settings.storage.s3.accessKeyId || '';
                    document.getElementById('awsSecretKey').value = this.config.settings.storage.s3.secretAccessKey || '';
                } else {
                    document.getElementById('s3Settings').classList.add('d-none');
                }
                
                document.getElementById('backupFrequency').value = this.config.settings.storage.backupFrequency || 'daily';
                document.getElementById('backupVersions').value = this.config.settings.storage.backupVersions || 5;
                
                // Monitoring settings
                document.getElementById('enableMonitoring').checked = this.config.settings.monitoring.enabled !== false;
                document.getElementById('healthCheckInterval').value = this.config.settings.monitoring.healthCheckInterval || 5;
                document.getElementById('responseTimeThreshold').value = this.config.settings.monitoring.responseTimeThreshold || 1000;
                document.getElementById('errorRateThreshold').value = this.config.settings.monitoring.errorRateThreshold || 5;
                
                // Notification settings
                document.getElementById('enableEmailNotifications').checked = this.config.settings.notifications.email.enabled || false;
                document.getElementById('notificationEmail').value = this.config.settings.notifications.email.address || '';
                document.getElementById('enableSlackNotifications').checked = this.config.settings.notifications.slack.enabled || false;
                document.getElementById('slackWebhookUrl').value = this.config.settings.notifications.slack.webhookUrl || '';
                document.getElementById('notifyOnError').checked = this.config.settings.notifications.notifyOn.error !== false;
                document.getElementById('notifyOnWarning').checked = this.config.settings.notifications.notifyOn.warning !== false;
                document.getElementById('notifyOnTest').checked = this.config.settings.notifications.notifyOn.test || false;
                
                // API Info
                document.getElementById('api-title').value = this.config.apiInfo.title || 'My API';
                document.getElementById('api-description').value = this.config.apiInfo.description || '';
                document.getElementById('api-version').value = this.config.apiInfo.version || '1.0.0';
                document.getElementById('api-base-url').value = this.config.apiInfo.baseUrl || '';
            }

            // Utility functions
            setupEventListeners() {
                // Setup form submissions
                document.getElementById('settingsForm').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.saveSettings();
                });
                
                document.getElementById('apiInfoForm').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.saveApiInfo();
                });
                
                document.getElementById('oauthSettingsForm').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.saveOAuthSettings();
                });
                
                // Setup log filtering
                document.getElementById('logLevel').addEventListener('change', () => this.searchLogs());
                document.getElementById('logDate').addEventListener('change', () => this.searchLogs());
                document.getElementById('logSearch').addEventListener('input', () => this.searchLogs());
                
                // File import handler
                const fileImportHandler = (e) => {
                    const file = e.target.files[0];
                    if (file) {
                        this.importConfiguration(file);
                    }
                };
                
                // Create a hidden file input for importing
                const fileInput = document.createElement('input');
                fileInput.type = 'file';
                fileInput.accept = 'application/json';
                fileInput.style.display = 'none';
                fileInput.addEventListener('change', fileImportHandler);
                document.body.appendChild(fileInput);
                
                // Add click handler for import button
                document.addEventListener('click', (e) => {
                    if (e.target.id === 'importConfigButton' || e.target.parentElement?.id === 'importConfigButton') {
                        fileInput.click();
                    }
                });
                
                // Setup tab showing logic to trigger render
                const tabElements = document.querySelectorAll('[data-bs-toggle="tab"]');
                tabElements.forEach(tabElement => {
                    tabElement.addEventListener('shown.bs.tab', (e) => {
                        const targetId = e.target.getAttribute('href') || e.target.getAttribute('data-bs-target');
                        if (targetId === '#endpoints' || targetId === '#endpoints-list') {
                            this.renderEndpoints();
                        } else if (targetId === '#tests') {
                            this.renderTests();
                        } else if (targetId === '#webhooks') {
                            this.renderWebhooks();
                        } else if (targetId === '#mappings') {
                            this.renderMappings();
                        } else if (targetId === '#transformations' || targetId === '#code-transform') {
                            this.renderTransformations();
                        } else if (targetId === '#auth' || targetId === '#auth-profiles') {
                            this.renderAuthProfiles();
                        } else if (targetId === '#api-keys') {
                            this.renderApiKeys();
                        } else if (targetId === '#oauth-settings') {
                            // Nothing to render
                        } else if (targetId === '#docs') {
                            // Nothing to render yet
                        } else if (targetId === '#monitor') {
                            this.updateMonitoringMetrics();
                        } else if (targetId === '#logs') {
                            this.renderLogs();
                        } else if (targetId === '#settings') {
                            this.renderSettings();
                        }
                    });
                });
                
                // Auto-save toggle
                document.getElementById('autoSaveConfig').addEventListener('change', (e) => {
                    this.config.settings.autoSave = e.target.checked;
                    this.saveConfig();
                });
            }

            saveSettings() {
                // Save general settings
                this.config.settings.defaultFormat = document.getElementById('defaultFormat').value;
                this.config.settings.autoSave = document.getElementById('autoSaveConfig').checked;
                
                // Save network settings
                this.config.settings.rateLimit = parseInt(document.getElementById('rateLimit').value);
                this.config.settings.timeout = parseInt(document.getElementById('timeout').value);
                this.config.settings.retryCount = parseInt(document.getElementById('retryCount').value);
                this.config.settings.followRedirects = document.getElementById('followRedirects').checked;
                this.config.settings.cacheResponse = document.getElementById('enableCaching').checked;
                
                // Save storage settings
                this.config.settings.storage.provider = document.getElementById('storageProvider').value;
                
                if (this.config.settings.storage.provider === 's3') {
                    this.config.settings.storage.s3 = {
                        bucketName: document.getElementById('s3BucketName').value,
                        region: document.getElementById('awsRegion').value,
                        accessKeyId: document.getElementById('awsAccessKey').value,
                        secretAccessKey: document.getElementById('awsSecretKey').value
                    };
                }
                
                this.config.settings.storage.backupFrequency = document.getElementById('backupFrequency').value;
                this.config.settings.storage.backupVersions = parseInt(document.getElementById('backupVersions').value);
                
                // Save monitoring settings
                this.config.settings.monitoring.enabled = document.getElementById('enableMonitoring').checked;
                this.config.settings.monitoring.healthCheckInterval = parseInt(document.getElementById('healthCheckInterval').value);
                this.config.settings.monitoring.responseTimeThreshold = parseInt(document.getElementById('responseTimeThreshold').value);
                this.config.settings.monitoring.errorRateThreshold = parseInt(document.getElementById('errorRateThreshold').value);
                
                // Save notification settings
                this.config.settings.notifications.email.enabled = document.getElementById('enableEmailNotifications').checked;
                this.config.settings.notifications.email.address = document.getElementById('notificationEmail').value;
                this.config.settings.notifications.slack.enabled = document.getElementById('enableSlackNotifications').checked;
                this.config.settings.notifications.slack.webhookUrl = document.getElementById('slackWebhookUrl').value;
                this.config.settings.notifications.notifyOn = {
                    error: document.getElementById('notifyOnError').checked,
                    warning: document.getElementById('notifyOnWarning').checked,
                    test: document.getElementById('notifyOnTest').checked
                };
                
                this.saveConfig();
                this.showAlert('Settings saved successfully', 'success');
                this.log('Settings updated', 'info');
            }

            saveApiInfo() {
                this.config.apiInfo = {
                    title: document.getElementById('api-title').value,
                    description: document.getElementById('api-description').value,
                    version: document.getElementById('api-version').value,
                    baseUrl: document.getElementById('api-base-url').value
                };
                
                this.saveConfig();
                this.showAlert('API info saved successfully', 'success');
                this.log('API info updated', 'info');
            }

            saveOAuthSettings() {
                // In a real application, this would update the OAuth configuration
                this.showAlert('OAuth settings saved successfully', 'success');
                this.log('OAuth settings updated', 'info');
            }

            deleteTestSuite(id) {
                this.showConfirmation(
                    'Are you sure you want to delete this test suite?',
                    () => {
                        const testSuiteIndex = this.config.tests.findIndex(test => test.id === id);
                        if (testSuiteIndex !== -1) {
                            const name = this.config.tests[testSuiteIndex].name;
                            this.config.tests.splice(testSuiteIndex, 1);
                            this.renderTests();
                            this.saveConfig();
                            this.log(`Test suite "${name}" deleted`, 'info');
                            this.addRecentActivity(`Test suite "${name}" deleted`);
                            this.updateDashboard();
                        }
                    }
                );
            }

            showAlert(message, type = 'info') {
                // Create alert element
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
                alertDiv.role = 'alert';
                
                alertDiv.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                
                // Find a good place for the alert
                const mainContent = document.querySelector('main');
                
                if (mainContent) {
                    // Insert at the top of the main content
                    mainContent.insertBefore(alertDiv, mainContent.firstChild);
                    
                    // Auto dismiss after 5 seconds
                    setTimeout(() => {
                        alertDiv.classList.remove('show');
                        
                        setTimeout(() => {
                            alertDiv.remove();
                        }, 150);
                    }, 5000);
                }
            }

            showConfirmation(message, onConfirm) {
                const modal = document.getElementById('confirmationModal');
                const messageElement = document.getElementById('confirmationMessage');
                const confirmButton = document.getElementById('confirmButton');
                
                if (modal && messageElement && confirmButton) {
                    messageElement.textContent = message;
                    
                    // Remove existing event listeners
                    const newConfirmButton = confirmButton.cloneNode(true);
                    confirmButton.parentNode.replaceChild(newConfirmButton, confirmButton);
                    
                    // Add the new event listener
                    newConfirmButton.addEventListener('click', () => {
                        const bsModal = bootstrap.Modal.getInstance(modal);
                        bsModal.hide();
                        onConfirm();
                    });
                    
                    // Show the modal
                    const bsModal = new bootstrap.Modal(modal);
                    bsModal.show();
                }
            }

            escapeHtml(str) {
                if (!str) return '';
                
                const htmlEntities = {
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    "'": '&#39;'
                };
                
                return str.toString().replace(/[&<>"']/g, (match) => htmlEntities[match]);
            }

            capitalizeFirstLetter(string) {
                if (!string) return '';
                return string.charAt(0).toUpperCase() + string.slice(1);
            }

            truncateString(str, maxLength) {
                if (!str) return '';
                if (str.length <= maxLength) return str;
                return str.substring(0, maxLength) + '...';
            }

            generateId() {
                // Generate a random UUID-like string
                const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
                return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
            }

            // Mock API server functionality
            startMockServer() {
                // This would be implemented in a real application to create
                // a mock server based on the defined endpoints and responses
                this.showAlert('Mock server started', 'success');
                this.log('Mock server started', 'info');
                this.addRecentActivity('Mock server started');
            }

            stopMockServer() {
                // This would stop the mock server in a real application
                this.showAlert('Mock server stopped', 'info');
                this.log('Mock server stopped', 'info');
                this.addRecentActivity('Mock server stopped');
            }

            // CLI command generation
            generateCurlCommand(endpointId) {
                const endpoint = this.config.endpoints.find(endpoint => endpoint.id === endpointId);
                if (!endpoint) {
                    return '';
                }
                
                let curlCommand = `curl -X ${endpoint.method} `;
                
                // Add headers
                if (endpoint.headers && endpoint.headers.length > 0) {
                    endpoint.headers.forEach(header => {
                        if (header.name) {
                            curlCommand += `-H "${header.name}: ${header.value}" `;
                        }
                    });
                }
                
                // Add authentication
                if (endpoint.auth.type === 'basic') {
                    curlCommand += `-u "${endpoint.auth.username}:${endpoint.auth.password}" `;
                } else if (endpoint.auth.type === 'bearer') {
                    curlCommand += `-H "Authorization: Bearer ${endpoint.auth.token}" `;
                } else if (endpoint.auth.type === 'api-key') {
                    if (endpoint.auth.addTo === 'header') {
                        curlCommand += `-H "${endpoint.auth.keyName}: ${endpoint.auth.keyValue}" `;
                    }
                }
                
                // Build URL with query parameters
                let url = endpoint.url;
                
                if (endpoint.parameters && endpoint.parameters.length > 0) {
                    const queryParams = new URLSearchParams();
                    
                    endpoint.parameters.forEach(param => {
                        if (param.name) {
                            queryParams.append(param.name, param.value || '');
                        }
                    });
                    
                    // Add API key to query if configured that way
                    if (endpoint.auth.type === 'api-key' && endpoint.auth.addTo === 'query') {
                        if (endpoint.auth.keyName && endpoint.auth.keyValue) {
                            queryParams.append(endpoint.auth.keyName, endpoint.auth.keyValue);
                        }
                    }
                    
                    if (queryParams.toString()) {
                        url += (url.includes('?') ? '&' : '?') + queryParams.toString();
                    }
                }
                
                curlCommand += `${url}`;
                
                // Add body for non-GET requests
                if (endpoint.method !== 'GET' && endpoint.method !== 'DELETE') {
                    if (endpoint.body) {
                        curlCommand += ` -d '${endpoint.body.replace(/'/g, "'\\''")}'`;
                    }
                }
                
                return curlCommand;
            }

            generatePythonCode(endpointId) {
                const endpoint = this.config.endpoints.find(endpoint => endpoint.id === endpointId);
                if (!endpoint) {
                    return '';
                }
                
                let pythonCode = 'import requests\n\n';
                
                // Build URL with query parameters
                let url = endpoint.url;
                let queryParams = {};
                
                if (endpoint.parameters && endpoint.parameters.length > 0) {
                    endpoint.parameters.forEach(param => {
                        if (param.name) {
                            queryParams[param.name] = param.value || '';
                        }
                    });
                    
                    // Add API key to query if configured that way
                    if (endpoint.auth.type === 'api-key' && endpoint.auth.addTo === 'query') {
                        if (endpoint.auth.keyName && endpoint.auth.keyValue) {
                            queryParams[endpoint.auth.keyName] = endpoint.auth.keyValue;
                        }
                    }
                }
                
                // Add headers
                pythonCode += 'headers = {\n';
                
                if (endpoint.headers && endpoint.headers.length > 0) {
                    endpoint.headers.forEach(header => {
                        if (header.name) {
                            pythonCode += `    '${header.name}': '${header.value}',\n`;
                        }
                    });
                }
                
                // Add content type for non-GET requests
                if (endpoint.method !== 'GET' && endpoint.method !== 'DELETE') {
                    pythonCode += `    'Content-Type': '${endpoint.contentType}',\n`;
                }
                
                // Add authentication
                if (endpoint.auth.type === 'basic') {
                    // Basic auth is handled separately in Python requests
                } else if (endpoint.auth.type === 'bearer') {
                    pythonCode += `    'Authorization': 'Bearer ${endpoint.auth.token}',\n`;
                } else if (endpoint.auth.type === 'api-key' && endpoint.auth.addTo === 'header') {
                    pythonCode += `    '${endpoint.auth.keyName}': '${endpoint.auth.keyValue}',\n`;
                }
                
                pythonCode += '}\n\n';
                
                // Add body for non-GET requests
                if (endpoint.method !== 'GET' && endpoint.method !== 'DELETE') {
                    if (endpoint.contentType === 'application/json') {
                        pythonCode += 'import json\n\n';
                        pythonCode += `data = ${endpoint.body || '{}'}\n\n`;
                    } else {
                        pythonCode += `data = '''${endpoint.body || ''}'''\n\n`;
                    }
                }
                
                // Create the request
                pythonCode += `response = requests.${endpoint.method.toLowerCase()}(\n`;
                pythonCode += `    url='${url}',\n`;
                
                if (Object.keys(queryParams).length > 0) {
                    pythonCode += `    params=${JSON.stringify(queryParams, null, 8).replace(/"([^"]+)":/g, '$1:')},\n`;
                }
                
                pythonCode += '    headers=headers,\n';
                
                if (endpoint.method !== 'GET' && endpoint.method !== 'DELETE') {
                    if (endpoint.contentType === 'application/json') {
                        pythonCode += '    json=data,\n';
                    } else {
                        pythonCode += '    data=data,\n';
                    }
                }
                
                if (endpoint.auth.type === 'basic') {
                    pythonCode += `    auth=('${endpoint.auth.username}', '${endpoint.auth.password}'),\n`;
                }
                
                pythonCode += `    timeout=${endpoint.timeout / 1000},\n`;
                pythonCode += ')\n\n';
                
                // Process the response
                pythonCode += 'print(f"Status Code: {response.status_code}")\n';
                pythonCode += 'try:\n';
                pythonCode += '    json_response = response.json()\n';
                pythonCode += '    print("Response JSON:")\n';
                pythonCode += '    print(json.dumps(json_response, indent=4))\n';
                pythonCode += 'except ValueError:\n';
                pythonCode += '    print("Response Text:")\n';
                pythonCode += '    print(response.text)\n';
                
                return pythonCode;
            }

            generateNodeCode(endpointId) {
                const endpoint = this.config.endpoints.find(endpoint => endpoint.id === endpointId);
                if (!endpoint) {
                    return '';
                }
                
                let nodeCode = 'const axios = require(\'axios\');\n\n';
                
                // Build request config
                nodeCode += 'async function makeRequest() {\n';
                nodeCode += '    try {\n';
                nodeCode += '        const config = {\n';
                nodeCode += `            method: '${endpoint.method.toLowerCase()}',\n`;
                nodeCode += `            url: '${endpoint.url}',\n`;
                
                // Add headers
                nodeCode += '            headers: {\n';
                
                if (endpoint.headers && endpoint.headers.length > 0) {
                    endpoint.headers.forEach(header => {
                        if (header.name) {
                            nodeCode += `                '${header.name}': '${header.value}',\n`;
                        }
                    });
                }
                
                // Add content type for non-GET requests
                if (endpoint.method !== 'GET' && endpoint.method !== 'DELETE') {
                    nodeCode += `                'Content-Type': '${endpoint.contentType}',\n`;
                }
                
                // Add authentication
                if (endpoint.auth.type === 'basic') {
                    const authString = `${endpoint.auth.username}:${endpoint.auth.password}`;
                    const base64Auth = Buffer.from(authString).toString('base64');
                    nodeCode += `                'Authorization': 'Basic ${base64Auth}',\n`;
                } else if (endpoint.auth.type === 'bearer') {
                    nodeCode += `                'Authorization': 'Bearer ${endpoint.auth.token}',\n`;
                } else if (endpoint.auth.type === 'api-key' && endpoint.auth.addTo === 'header') {
                    nodeCode += `                '${endpoint.auth.keyName}': '${endpoint.auth.keyValue}',\n`;
                }
                
                nodeCode += '            },\n';
                
                // Add query parameters
                if (endpoint.parameters && endpoint.parameters.length > 0) {
                    nodeCode += '            params: {\n';
                    
                    endpoint.parameters.forEach(param => {
                        if (param.name) {
                            nodeCode += `                '${param.name}': '${param.value || ''}',\n`;
                        }
                    });
                    
                    // Add API key to query if configured that way
                    if (endpoint.auth.type === 'api-key' && endpoint.auth.addTo === 'query') {
                        if (endpoint.auth.keyName && endpoint.auth.keyValue) {
                            nodeCode += `                '${endpoint.auth.keyName}': '${endpoint.auth.keyValue}',\n`;
                        }
                    }
                    
                    nodeCode += '            },\n';
                }
                
                // Add body for non-GET requests
                if (endpoint.method !== 'GET' && endpoint.method !== 'DELETE') {
                    if (endpoint.contentType === 'application/json') {
                        try {
                            const jsonBody = JSON.parse(endpoint.body || '{}');
                            nodeCode += `            data: ${JSON.stringify(jsonBody, null, 16)},\n`;
                        } catch (e) {
                            nodeCode += `            data: ${endpoint.body || '{}'},\n`;
                        }
                    } else {
                        nodeCode += `            data: \`${endpoint.body || ''}\`,\n`;
                    }
                }
                
                // Add timeout
                nodeCode += `            timeout: ${endpoint.timeout},\n`;
                
                nodeCode += '        };\n\n';
                
                // Make the request
                nodeCode += '        const response = await axios(config);\n\n';
                
                // Process the response
                nodeCode += '        console.log(`Status Code: ${response.status}`);\n';
                nodeCode += '        console.log(\'Response Headers:\', response.headers);\n';
                nodeCode += '        console.log(\'Response Data:\', response.data);\n';
                nodeCode += '        return response.data;\n';
                nodeCode += '    } catch (error) {\n';
                nodeCode += '        console.error(\'Error making request:\', error.message);\n';
                nodeCode += '        if (error.response) {\n';
                nodeCode += '            console.log(`Status Code: ${error.response.status}`);\n';
                nodeCode += '            console.log(\'Response Headers:\', error.response.headers);\n';
                nodeCode += '            console.log(\'Response Data:\', error.response.data);\n';
                nodeCode += '        }\n';
                nodeCode += '        throw error;\n';
                nodeCode += '    }\n';
                nodeCode += '}\n\n';
                
                // Execute the function
                nodeCode += 'makeRequest()\n';
                nodeCode += '    .then(data => console.log(\'Request completed successfully\'))\n';
                nodeCode += '    .catch(err => console.log(\'Request failed\'));\n';
                
                return nodeCode;
            }

            // Export functions for Code Generation
            exportEndpointCode(endpointId, language) {
                let code = '';
                let filename = '';
                
                const endpoint = this.config.endpoints.find(endpoint => endpoint.id === endpointId);
                if (!endpoint) {
                    this.showAlert('Endpoint not found', 'danger');
                    return;
                }
                
                const endpointName = endpoint.name.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();
                
                if (language === 'curl') {
                    code = this.generateCurlCommand(endpointId);
                    filename = `${endpointName}_curl_command.sh`;
                } else if (language === 'python') {
                    code = this.generatePythonCode(endpointId);
                    filename = `${endpointName}_request.py`;
                } else if (language === 'node') {
                    code = this.generateNodeCode(endpointId);
                    filename = `${endpointName}_request.js`;
                } else {
                    this.showAlert('Unsupported language', 'danger');
                    return;
                }
                
                // Create and download the file
                const blob = new Blob([code], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                this.log(`Generated ${language} code for endpoint "${endpoint.name}"`, 'info');
                this.showAlert(`${language.toUpperCase()} code exported successfully`, 'success');
            }

            // Health Check functions
            performHealthCheck() {
                if (!this.config.settings.monitoring.enabled) {
                    return;
                }
                
                this.log('Starting health check for all endpoints', 'info');
                
                const results = {
                    total: this.config.endpoints.length,
                    successful: 0,
                    failed: 0,
                    details: []
                };
                
                // Check each endpoint
                const checkPromises = this.config.endpoints.map(endpoint => {
                    return this.checkEndpointHealth(endpoint)
                        .then(result => {
                            results.details.push(result);
                            
                            if (result.status === 'success') {
                                results.successful++;
                            } else {
                                results.failed++;
                            }
                        });
                });
                
                // Process results
                Promise.all(checkPromises)
                    .then(() => {
                        this.log(`Health check completed: ${results.successful}/${results.total} endpoints operational`, 'info');
                        
                        if (results.failed > 0) {
                            this.log(`${results.failed} endpoints failed health check`, 'warning');
                            
                            // Send notifications if configured
                            if (this.config.settings.notifications.notifyOn.error) {
                                this.sendNotification(
                                    'Health Check Failed', 
                                    `${results.failed}/${results.total} endpoints failed health check`
                                );
                            }
                        }
                        
                        // Update metrics
                        this.metrics.activeEndpoints = results.successful;
                        this.updateMonitoringMetrics();
                    })
                    .catch(error => {
                        this.log('Error performing health check', 'error', error);
                    });
            }

            checkEndpointHealth(endpoint) {
                return new Promise((resolve) => {
                    // In a real application, this would make an actual request
                    // For demo purposes, we'll simulate a request with random results
                    
                    setTimeout(() => {
                        const isSuccess = Math.random() > 0.2; // 80% success rate
                        const responseTime = Math.floor(Math.random() * 500) + 100; // 100-600ms
                        
                        resolve({
                            endpointId: endpoint.id,
                            endpointName: endpoint.name,
                            url: endpoint.url,
                            status: isSuccess ? 'success' : 'failure',
                            responseTime: responseTime,
                            timestamp: new Date()
                        });
                    }, Math.random() * 1000); // Simulate network delay
                });
            }

            sendNotification(title, message) {
                // In a real application, this would send actual notifications
                // For demo purposes, we'll just log it
                
                if (this.config.settings.notifications.email.enabled) {
                    const address = this.config.settings.notifications.email.address;
                    this.log(`Email notification sent to ${address}: ${title} - ${message}`, 'info');
                }
                
                if (this.config.settings.notifications.slack.enabled) {
                    this.log(`Slack notification sent: ${title} - ${message}`, 'info');
                }
            }

            // Theme toggling
            toggleTheme(theme) {
                const html = document.documentElement;
                
                if (theme === 'dark') {
                    html.setAttribute('data-bs-theme', 'dark');
                    this.log('Switched to dark theme', 'info');
                } else {
                    html.setAttribute('data-bs-theme', 'light');
                    this.log('Switched to light theme', 'info');
                }
                
                this.config.settings.theme = theme;
                this.saveConfig();
            }
        }
    
        
        
        // Initialize the API Manager
        const manager = new APIManager();

        // Set up health check interval if enabled
        if (manager.config.settings.monitoring.enabled) {
            setInterval(() => {
                manager.performHealthCheck();
            }, manager.config.settings.monitoring.healthCheckInterval * 60 * 1000);
        }

        // Schedule auto-save if enabled
        if (manager.config.settings.autoSave) {
            setInterval(() => {
                manager.saveConfig();
            }, 60 * 1000); // Auto-save every minute
        }

        // Schedule auto-backup if enabled
        if (manager.config.settings.storage.backupFrequency !== 'never') {
            let interval = 24 * 60 * 60 * 1000; // Default to daily
            
            if (manager.config.settings.storage.backupFrequency === 'hourly') {
                interval = 60 * 60 * 1000;
            } else if (manager.config.settings.storage.backupFrequency === 'weekly') {
                interval = 7 * 24 * 60 * 60 * 1000;
            }
            
            setInterval(() => {
                manager.saveConfigToCloud();
            }, interval);
        }

        // Apply theme from settings
        if (manager.config.settings.theme) {
            manager.toggleTheme(manager.config.settings.theme);
        }


        
// API Manager with Integrated NLP using compromise.js
// First, let's add compromise.js as a dependency

class NLPEnhancedAPIManager extends APIManager {
    constructor() {
        super();
        
        // Load compromise library
        this.loadCompromiseLibrary();
        
        // Initialize NLP models and data
        this.nlpModels = {
            endpoints: null,
            api_patterns: null,
            test_cases: null
        };
        
        // NLP-related settings
        this.nlpSettings = {
            enabled: true,
            voiceCommands: false,
            autoComplete: true,
            smartSearch: true,
            intelligentMapping: true
        };
        
        // Initialize NLP capabilities
        this.initializeNLP();
    }
    
    async loadCompromiseLibrary() {
        // Load compromise and plugins
        const script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/compromise/14.8.2/compromise.min.js';
        script.onload = () => {
            this.nlp = window.nlp;
            this.log('Compromise.js NLP library loaded', 'info');
            
            // Load additional compromise plugins
            this.loadCompromisePlugins();
        };
        document.head.appendChild(script);
    }
    
    async loadCompromisePlugins() {
        // Load useful compromise plugins
        const plugins = [
            { name: 'numbers', url: 'https://cdnjs.cloudflare.com/ajax/libs/compromise-numbers/1.4.0/compromise-numbers.min.js' },
            { name: 'dates', url: 'https://cdnjs.cloudflare.com/ajax/libs/compromise-dates/2.2.1/compromise-dates.min.js' }
        ];
        
        for (const plugin of plugins) {
            await new Promise((resolve, reject) => {
                const script = document.createElement('script');
                script.src = plugin.url;
                script.onload = () => {
                    this.log(`Compromise ${plugin.name} plugin loaded`, 'info');
                    resolve();
                };
                script.onerror = () => {
                    this.log(`Failed to load Compromise ${plugin.name} plugin`, 'error');
                    reject();
                };
                document.head.appendChild(script);
            });
        }
        
        // After all plugins are loaded, initialize NLP features
        this.initializeNLPModels();
    }
    
    initializeNLP() {
        // Add NLP settings tab to UI
        this.addNLPSettingsUI();
        
        // Initialize voice recognition if enabled
        if (this.nlpSettings.voiceCommands) {
            this.initializeVoiceRecognition();
        }
        
        // Initialize natural language search
        if (this.nlpSettings.smartSearch) {
            this.initializeNLSearch();
        }
    }
    
    async initializeNLPModels() {
        if (!this.nlp) {
            this.log('NLP library not available yet', 'warning');
            return;
        }
        
        // Train NLP models based on existing API configurations
        
        // 1. Endpoint model for understanding endpoint descriptions
        this.nlpModels.endpoints = this.nlp();
        
        // Add API-related terms to the model vocabulary
        const apiTerms = [
            'GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'API', 'REST', 'JSON', 'XML',
            'header', 'parameter', 'endpoint', 'request', 'response', 'authenticate',
            'token', 'bearer', 'basic auth', 'OAuth', 'API key', 'timeout', 'retry',
            'webhook', 'payload', 'resource', 'query', 'path', 'client', 'server',
            'status code', 'JSON schema', 'content type', 'cache', 'CORS'
        ];
        
        // Learn API vocabulary
        this.nlpModels.endpoints.buildTrie(apiTerms);
        
        // 2. API patterns model for understanding common API patterns
        // Extract patterns from existing endpoints
        const endpointPatterns = this.config.endpoints.map(endpoint => {
            return {
                url: endpoint.url,
                method: endpoint.method,
                name: endpoint.name,
                description: endpoint.description
            };
        });
        
        // Learn from existing endpoints
        this.nlpModels.api_patterns = this.learnAPIPatterns(endpointPatterns);
        
        // 3. Test case model for generating test cases
        this.nlpModels.test_cases = this.createTestCaseModel();
        
        this.log('NLP models initialized', 'info');
    }
    
    learnAPIPatterns(endpoints) {
        if (!this.nlp) return null;
        
        const model = this.nlp();
        
        // Extract common patterns from URL paths
        const urlPatterns = endpoints.map(endpoint => {
            const url = endpoint.url;
            
            // Extract path from URL
            const urlObj = new URL(url);
            const path = urlObj.pathname;
            
            // Identify path segments
            const segments = path.split('/').filter(Boolean);
            
            // Identify patterns (resource IDs, versioning, etc.)
            const analyzedSegments = segments.map(segment => {
                if (/^v\d+$/.test(segment)) {
                    return { type: 'version', value: segment };
                } else if (/^\{.*\}$/.test(segment) || /^:.*$/.test(segment)) {
                    return { type: 'parameter', value: segment };
                } else if (/^\d+$/.test(segment)) {
                    return { type: 'id', value: segment };
                } else {
                    return { type: 'resource', value: segment };
                }
            });
            
            return {
                original: url,
                method: endpoint.method,
                name: endpoint.name,
                host: urlObj.host,
                path: path,
                segments: analyzedSegments
            };
        });
        
        // Store the learned patterns
        model.patterns = urlPatterns;
        
        return model;
    }
    
    createTestCaseModel() {
        if (!this.nlp) return null;
        
        const model = this.nlp();
        
        // Learn from existing test cases if available
        const testCases = [];
        this.config.tests.forEach(testSuite => {
            testSuite.testCases.forEach(testCase => {
                testCases.push({
                    name: testCase.name,
                    expectedStatus: testCase.expectedStatus,
                    inputParams: testCase.inputParams,
                    expectedResponse: testCase.expectedResponse
                });
            });
        });
        
        // Train on test case patterns
        model.testCases = testCases;
        
        return model;
    }
    
    addNLPSettingsUI() {
        // Add NLP settings tab to the settings section
        const settingsTabs = document.getElementById('settingsTabs');
        if (settingsTabs) {
            // Add NLP settings tab
            const nlpTab = document.createElement('li');
            nlpTab.className = 'nav-item';
            nlpTab.role = 'presentation';
            nlpTab.innerHTML = `
                <button class="nav-link" id="nlp-settings-tab" data-bs-toggle="tab" data-bs-target="#nlp-settings" type="button" role="tab" aria-controls="nlp-settings" aria-selected="false">
                    <i class="bi bi-robot me-2"></i> NLP
                </button>
            `;
            settingsTabs.appendChild(nlpTab);
            
            // Add NLP settings content
            const settingsContent = document.getElementById('settingsTabsContent');
            if (settingsContent) {
                const nlpSettingsPane = document.createElement('div');
                nlpSettingsPane.className = 'tab-pane fade';
                nlpSettingsPane.id = 'nlp-settings';
                nlpSettingsPane.role = 'tabpanel';
                nlpSettingsPane.setAttribute('aria-labelledby', 'nlp-settings-tab');
                
                nlpSettingsPane.innerHTML = `
                    <div class="mb-3">
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" type="checkbox" id="enableNLP" ${this.nlpSettings.enabled ? 'checked' : ''}>
                            <label class="form-check-label" for="enableNLP">Enable NLP Features</label>
                        </div>
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" type="checkbox" id="enableVoiceCommands" ${this.nlpSettings.voiceCommands ? 'checked' : ''}>
                            <label class="form-check-label" for="enableVoiceCommands">Voice Commands</label>
                        </div>
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" type="checkbox" id="enableAutoComplete" ${this.nlpSettings.autoComplete ? 'checked' : ''}>
                            <label class="form-check-label" for="enableAutoComplete">Intelligent Auto-complete</label>
                        </div>
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" type="checkbox" id="enableSmartSearch" ${this.nlpSettings.smartSearch ? 'checked' : ''}>
                            <label class="form-check-label" for="enableSmartSearch">Natural Language Search</label>
                        </div>
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" type="checkbox" id="enableIntelligentMapping" ${this.nlpSettings.intelligentMapping ? 'checked' : ''}>
                            <label class="form-check-label" for="enableIntelligentMapping">Intelligent Mapping & Transformations</label>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">NLP Training</label>
                        <button type="button" class="btn btn-primary" onclick="nlpManager.retrainNLPModels()">
                            <i class="bi bi-arrow-repeat me-1"></i> Retrain NLP Models
                        </button>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Custom Vocabulary</label>
                        <textarea class="form-control" id="customVocabulary" rows="5" placeholder="Enter domain-specific terms, one per line"></textarea>
                    </div>
                    
                    <button type="button" class="btn btn-primary" onclick="nlpManager.saveNLPSettings()">
                        Save NLP Settings
                    </button>
                `;
                
                settingsContent.appendChild(nlpSettingsPane);
            }
        }
        
        // Add the natural language command center
        this.addNLCommandCenter();
    }
    
    addNLCommandCenter() {
        // Create a natural language command center
        const commandCenter = document.createElement('div');
        commandCenter.className = 'position-fixed bottom-0 end-0 m-3';
        commandCenter.innerHTML = `
            <div class="card" style="width: 300px;">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="mb-0"><i class="bi bi-robot me-2"></i> NL Command</h6>
                    <button type="button" class="btn-close" aria-label="Close" onclick="nlpManager.toggleCommandCenter()"></button>
                </div>
                <div class="card-body">
                    <div class="input-group mb-2">
                        <input type="text" class="form-control" id="nlCommandInput" placeholder="Type a command...">
                        <button class="btn btn-primary" type="button" id="nlCommandButton" onclick="nlpManager.processNLCommand()">
                            <i class="bi bi-arrow-right"></i>
                        </button>
                    </div>
                    <div id="voiceCommandBtn" class="text-center d-none">
                        <button class="btn btn-outline-primary rounded-circle" style="width: 50px; height: 50px;" onclick="nlpManager.toggleVoiceCommand()">
                            <i class="bi bi-mic"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(commandCenter);
        
        // Add event listener for Enter key
        document.getElementById('nlCommandInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.processNLCommand();
            }
        });
        
        // Show voice command button if speech recognition is available
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            document.getElementById('voiceCommandBtn').classList.remove('d-none');
        }
    }
    
    toggleCommandCenter() {
        const commandCenter = document.querySelector('.position-fixed.bottom-0.end-0.m-3 .card');
        if (commandCenter) {
            commandCenter.classList.toggle('d-none');
        }
    }
    
    initializeVoiceRecognition() {
        if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
            this.log('Speech recognition not supported in this browser', 'warning');
            return;
        }
        
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        this.recognition = new SpeechRecognition();
        
        this.recognition.continuous = false;
        this.recognition.interimResults = false;
        this.recognition.lang = 'en-US';
        
        this.recognition.onresult = (event) => {
            const transcript = event.results[0][0].transcript;
            this.log(`Voice command recognized: ${transcript}`, 'info');
            
            // Fill the command input with the transcript
            const commandInput = document.getElementById('nlCommandInput');
            if (commandInput) {
                commandInput.value = transcript;
                
                // Process the command
                this.processNLCommand();
            }
        };
        
        this.recognition.onerror = (event) => {
            this.log(`Voice recognition error: ${event.error}`, 'error');
        };
        
        this.log('Voice recognition initialized', 'info');
    }
    
    toggleVoiceCommand() {
        if (!this.recognition) {
            this.initializeVoiceRecognition();
            if (!this.recognition) return;
        }
        
        const voiceBtn = document.querySelector('#voiceCommandBtn button');
        if (voiceBtn) {
            if (this.isListening) {
                // Stop listening
                this.recognition.stop();
                this.isListening = false;
                voiceBtn.classList.replace('btn-danger', 'btn-outline-primary');
                voiceBtn.querySelector('i').classList.replace('bi-mic-mute', 'bi-mic');
            } else {
                // Start listening
                this.recognition.start();
                this.isListening = true;
                voiceBtn.classList.replace('btn-outline-primary', 'btn-danger');
                voiceBtn.querySelector('i').classList.replace('bi-mic', 'bi-mic-mute');
            }
        }
    }
    
    initializeNLSearch() {
        // Add natural language search functionality to the log search
        const logSearch = document.getElementById('logSearch');
        if (logSearch) {
            logSearch.setAttribute('placeholder', 'Search logs using natural language...');
            
            // Override the search logs function
            this.originalSearchLogs = this.searchLogs;
            this.searchLogs = this.nlpSearchLogs.bind(this);
        }
    }
    
    nlpSearchLogs() {
        if (!this.nlp || !this.nlpSettings.smartSearch) {
            // Fall back to original search if NLP is not available
            return this.originalSearchLogs();
        }
        
        const searchTerm = document.getElementById('logSearch').value;
        const logLevel = document.getElementById('logLevel').value;
        const logDate = document.getElementById('logDate').value;
        
        // Use NLP to understand the search query
        const query = this.nlp(searchTerm);
        
        // Check for time expressions
        let startDate = null;
        let endDate = null;
        
        if (query.dates().length > 0) {
            const dates = query.dates().json();
            if (dates.length === 1) {
                // Single date/time reference
                startDate = new Date(dates[0].start);
                endDate = new Date(dates[0].end || dates[0].start);
            } else if (dates.length >= 2) {
                // Date range
                startDate = new Date(dates[0].start);
                endDate = new Date(dates[dates.length - 1].end || dates[dates.length - 1].start);
            }
        }
        
        // Extract mentioned log levels
        const logLevels = [];
        const levelTerms = {
            'error': ['error', 'errors', 'failed', 'failure', 'exception', 'crash'],
            'warning': ['warning', 'warnings', 'warn', 'caution', 'alert'],
            'info': ['info', 'information', 'notification', 'message', 'log']
        };
        
        for (const [level, terms] of Object.entries(levelTerms)) {
            if (terms.some(term => searchTerm.toLowerCase().includes(term))) {
                logLevels.push(level);
            }
        }
        
        // Check for numerical references
        const numberMatches = query.numbers().json();
        const statusCodes = [];
        
        for (const match of numberMatches) {
            const num = match.number;
            if (num >= 100 && num < 600) {
                statusCodes.push(num);
            }
        }
        
        // Filter logs
        const filteredLogs = this.logs.filter(log => {
            // Filter by extracted date/time
            let dateMatches = true;
            if (startDate && endDate) {
                const logTime = new Date(log.timestamp);
                dateMatches = logTime >= startDate && logTime <= endDate;
            } else if (logDate) {
                const logDateStr = new Date(log.timestamp).toISOString().split('T')[0];
                dateMatches = logDateStr === logDate;
            }
            
            // Filter by extracted log levels
            let levelMatches = true;
            if (logLevels.length > 0) {
                levelMatches = logLevels.includes(log.level);
            } else if (logLevel !== 'all') {
                levelMatches = log.level === logLevel;
            }
            
            // Filter by message content (more sophisticated than simple includes)
            let contentMatches = true;
            
            if (searchTerm) {
                // Remove date/time and level terms from the search term for content matching
                let contentSearch = searchTerm;
                for (const level of Object.values(levelTerms).flat()) {
                    contentSearch = contentSearch.replace(new RegExp('\\b' + level + '\\b', 'gi'), '');
                }
                
                // Also remove time-related words
                const timeWords = ['today', 'yesterday', 'last', 'past', 'recent', 'hour', 'day', 'week', 'month', 'year'];
                for (const word of timeWords) {
                    contentSearch = contentSearch.replace(new RegExp('\\b' + word + '\\b', 'gi'), '');
                }
                
                contentSearch = contentSearch.trim();
                
                if (contentSearch) {
                    const messageMatches = log.message.toLowerCase().includes(contentSearch.toLowerCase());
                    const detailsMatches = log.details && JSON.stringify(log.details).toLowerCase().includes(contentSearch.toLowerCase());
                    contentMatches = messageMatches || detailsMatches;
                }
            }
            
            // Filter by status codes
            let statusMatches = true;
            if (statusCodes.length > 0 && log.details && log.details.status) {
                statusMatches = statusCodes.includes(log.details.status);
            }
            
            return dateMatches && levelMatches && contentMatches && statusMatches;
        });
        
        this.renderFilteredLogs(filteredLogs);
    }
    
    processNLCommand() {
        const commandInput = document.getElementById('nlCommandInput');
        if (!commandInput) return;
        
        const command = commandInput.value.trim();
        if (!command) return;
        
        // Log the command
        this.log(`Processing natural language command: ${command}`, 'info');
        
        // Process the command with NLP
        if (!this.nlp) {
            this.showAlert('NLP engine not yet initialized', 'warning');
            return;
        }
        
        const doc = this.nlp(command);
        
        // Clear the input
        commandInput.value = '';
        
        // Simple command taxonomy - look for actions and subjects
        const actions = {
            create: ['create', 'add', 'new', 'make'],
            delete: ['delete', 'remove', 'drop'],
            test: ['test', 'run', 'execute', 'try'],
            show: ['show', 'display', 'list', 'view'],
            switch: ['switch', 'change', 'go to'],
            save: ['save', 'store', 'export', 'backup']
        };
        
        const subjects = {
            endpoint: ['endpoint', 'api', 'service', 'route'],
            test: ['test', 'suite', 'case', 'scenario'],
            webhook: ['webhook', 'hook', 'callback'],
            setting: ['setting', 'config', 'configuration', 'preference'],
            environment: ['environment', 'env', 'dev', 'development', 'staging', 'production']
        };
        
        // Extract action
        let actionType = null;
        for (const [type, terms] of Object.entries(actions)) {
            for (const term of terms) {
                if (command.toLowerCase().includes(term)) {
                    actionType = type;
                    break;
                }
            }
            if (actionType) break;
        }
        
        // Extract subject
        let subjectType = null;
        for (const [type, terms] of Object.entries(subjects)) {
            for (const term of terms) {
                if (command.toLowerCase().includes(term)) {
                    subjectType = type;
                    break;
                }
            }
            if (subjectType) break;
        }
        
        // Handle command based on action and subject
        if (actionType && subjectType) {
            this.executeCommand(actionType, subjectType, command);
        } else {
            // Try intelligent guessing for what the user wants
            this.intelligentCommandExecution(command);
        }
    }
    
    executeCommand(action, subject, fullCommand) {
        this.log(`Executing command: ${action} ${subject}`, 'info');
        
        // Handle create actions
        if (action === 'create') {
            if (subject === 'endpoint') {
                this.createEndpointFromNL(fullCommand);
            } else if (subject === 'test') {
                this.createTestFromNL(fullCommand);
            } else if (subject === 'webhook') {
                this.createWebhookFromNL(fullCommand);
            }
        }
        // Handle test actions
        else if (action === 'test') {
            if (subject === 'endpoint') {
                this.testEndpointFromNL(fullCommand);
            } else if (subject === 'test') {
                this.runTestsFromNL(fullCommand);
            }
        }
        // Handle show actions
        else if (action === 'show') {
            if (subject === 'endpoint') {
                this.showEndpointsFromNL(fullCommand);
            } else if (subject === 'test') {
                this.showTestsFromNL(fullCommand);
            } else if (subject === 'setting') {
                this.showSettingsFromNL(fullCommand);
            }
        }
        // Handle switch actions
        else if (action === 'switch') {
            if (subject === 'environment') {
                this.switchEnvironmentFromNL(fullCommand);
            }
        }
        // Handle save actions
        else if (action === 'save') {
            if (subject === 'setting') {
                this.saveSettings();
                this.showAlert('Settings saved successfully', 'success');
            } else if (subject === 'endpoint') {
                this.saveConfig();
                this.showAlert('Endpoints saved successfully', 'success');
            }
        }
        // Handle delete actions
        else if (action === 'delete') {
            if (subject === 'endpoint') {
                this.deleteEndpointFromNL(fullCommand);
            } else if (subject === 'test') {
                this.deleteTestFromNL(fullCommand);
            } else if (subject === 'webhook') {
                this.deleteWebhookFromNL(fullCommand);
            }
        }
    }
    
    intelligentCommandExecution(command) {
        // Try to understand what the user wants based on the full command
        const doc = this.nlp(command);
        
        // Check for general questions
        if (command.toLowerCase().includes('help') || 
            command.endsWith('?') || 
            command.toLowerCase().startsWith('how') ||
            command.toLowerCase().startsWith('what')) {
            
            this.showHelp(command);
            return;
        }
        
        // Check for navigation
        const navigationTerms = ['go to', 'open', 'navigate', 'show me'];
        if (navigationTerms.some(term => command.toLowerCase().includes(term))) {
            const sections = ['dashboard', 'endpoints', 'tests', 'webhooks', 'mappings', 
                             'transformations', 'authentication', 'documentation', 
                             'monitoring', 'logs', 'settings'];
            
            for (const section of sections) {
                if (command.toLowerCase().includes(section)) {
                    this.navigateTo(section);
                    return;
                }
            }
        }
        
        // Check for general actions
        if (command.toLowerCase().includes('run all tests')) {
            this.runAllTests();
            return;
        }
        
        if (command.toLowerCase().includes('save') || command.toLowerCase().includes('export')) {
            if (command.toLowerCase().includes('cloud') || command.toLowerCase().includes('s3')) {
                this.saveConfigToCloud();
                return;
            } else {
                this.saveConfig();
                this.showAlert('Configuration saved', 'success');
                return;
            }
        }
        
        // If we got here, we couldn't understand the command
        this.showAlert('Sorry, I couldn\'t understand that command. Try being more specific.', 'warning');
    }
    
    createEndpointFromNL(command) {
        // Extract relevant information from the command
        const doc = this.nlp(command);
        
        // Create the new endpoint with a unique ID
        const id = this.generateId();
        
        // Try to extract method
        let method = 'GET'; // Default method
        const methodRegex = /(GET|POST|PUT|DELETE|PATCH)/i;
        const methodMatch = command.match(methodRegex);
        if (methodMatch) {
            method = methodMatch[1].toUpperCase();
        }
        
        // Try to extract URL
        let url = '';
        const urlRegex = /(https?:\/\/[^\s]+)/i;
        const urlMatch = command.match(urlRegex);
        if (urlMatch) {
            url = urlMatch[1];
        }
        
        // Extract name if specified, otherwise generate one
        let name = '';
        const nameRegex = /(?:called|named) ["'](.+?)["']/i;
        const nameMatch = command.match(nameRegex);
        if (nameMatch) {
            name = nameMatch[1];
        } else {
            // Generate a name based on the URL or method
            name = url ? new URL(url).pathname.split('/').filter(Boolean).pop() || 'New Endpoint' : 'New Endpoint';
            name = method + ' ' + name;
        }
        
        // Create the endpoint
        const newEndpoint = {
            id: id,
            name: name,
            method: method,
            url: url,
            version: 'v1',
            description: command, // Use the command as initial description
            headers: [],
            parameters: [],
            body: '',
            contentType: 'application/json',
            auth: {
                type: 'none'
            },
            timeout: 30000,
            retryCount: 3,
            followRedirects: true,
            cacheResponse: false
        };
        
        // Extract any specified headers
        const headerRegex = /header ["'](.+?)["']\s*(?:with value|:|=)\s*["'](.+?)["']/gi;
        let headerMatch;
        while ((headerMatch = headerRegex.exec(command)) !== null) {
            newEndpoint.headers.push({
                name: headerMatch[1],
                value: headerMatch[2]
            });
        }
        
        // Extract any specified parameters
        const paramRegex = /param(?:eter)? ["'](.+?)["']\s*(?:with value|:|=)\s*["'](.+?)["']/gi;
        let paramMatch;
        while ((paramMatch = paramRegex.exec(command)) !== null) {
            newEndpoint.parameters.push({
                name: paramMatch[1],
                value: paramMatch[2]
            });
        }
        
        // Add the endpoint to the configuration
        this.config.endpoints.push(newEndpoint);
        this.renderEndpoints();
        this.saveConfig();
        
        // Switch to the endpoints tab
        this.navigateTo('endpoints');
        
        this.log(`Created new ${method} endpoint "${name}"`, 'info');
        this.showAlert(`Endpoint "${name}" created successfully`, 'success');
    }
    
    testEndpointFromNL(command) {
        // Try to identify which endpoint to test
        const doc = this.nlp(command);
        
        // Look for endpoint name
        let endpoint = null;
        
        for (const ep of this.config.endpoints) {
            if (command.toLowerCase().includes(ep.name.toLowerCase())) {
                endpoint = ep;
                break;
            }
        }
        
        if (!endpoint) {
            // Try to identify by URL or method + resource pattern
            for (const ep of this.config.endpoints) {
                if (ep.url && command.toLowerCase().includes(new URL(ep.url).pathname.toLowerCase())) {
                    endpoint = ep;
                    break;
                }
                
                // Check for method + last path segment
                if (ep.url) {
                    const pathSegment = new URL(ep.url).pathname.split('/').filter(Boolean).pop();
                    if (pathSegment && command.toLowerCase().includes(ep.method.toLowerCase()) && 
                        command.toLowerCase().includes(pathSegment.toLowerCase())) {
                        endpoint = ep;
                        break;
                    }
                }
            }
        }
        
        if (endpoint) {
            this.testEndpoint(endpoint.id);
            
            this.log(`Testing endpoint "${endpoint.name}"`, 'info');
            this.showAlert(`Testing endpoint "${endpoint.name}"`, 'success');
        } else {
            this.showAlert('Sorry, I couldn\'t identify which endpoint to test. Please be more specific.', 'warning');
        }
    }
    
    deleteEndpointFromNL(command) {
        // Try to identify which endpoint to delete
        const doc = this.nlp(command);
        
        // Look for endpoint name
        let endpoint = null;
        
        for (const ep of this.config.endpoints) {
            if (command.toLowerCase().includes(ep.name.toLowerCase())) {
                endpoint = ep;
                break;
            }
        }
        
        if (!endpoint) {
            // Try to identify by URL or method + resource pattern
            for (const ep of this.config.endpoints) {
                if (ep.url && command.toLowerCase().includes(new URL(ep.url).pathname.toLowerCase())) {
                    endpoint = ep;
                    break;
                }
                
                // Check for method + last path segment
                if (ep.url) {
                    const pathSegment = new URL(ep.url).pathname.split('/').filter(Boolean).pop();
                    if (pathSegment && command.toLowerCase().includes(ep.method.toLowerCase()) && 
                        command.toLowerCase().includes(pathSegment.toLowerCase())) {
                        endpoint = ep;
                        break;
                    }
                }
            }
        }
        
        if (endpoint) {
            this.showConfirmation(
                `Are you sure you want to delete the endpoint "${endpoint.name}"?`,
                () => {
                    this.deleteEndpoint(endpoint.id);
                }
            );
        } else {
            this.showAlert('Sorry, I couldn\'t identify which endpoint to delete. Please be more specific.', 'warning');
        }
    }
    
    createTestFromNL(command) {
        // Try to extract relevant test information
        const doc = this.nlp(command);
        
        // First, identify which endpoint to test
        let endpoint = null;
        
        for (const ep of this.config.endpoints) {
            if (command.toLowerCase().includes(ep.name.toLowerCase())) {
                endpoint = ep;
                break;
            }
        }
        
        if (!endpoint && this.config.endpoints.length > 0) {
            // If we can't identify a specific endpoint, use the first one
            endpoint = this.config.endpoints[0];
        }
        
        if (!endpoint) {
            this.showAlert('No endpoints available to create a test for. Please create an endpoint first.', 'warning');
            return;
        }
        
        // Create a new test suite
        const testSuiteId = this.generateId();
        const testCaseId = this.generateId();
        
        // Extract expected status code if specified
        let expectedStatus = 200; // Default status
        const statusRegex = /status (\d{3})/i;
        const statusMatch = command.match(statusRegex);
        if (statusMatch) {
            expectedStatus = parseInt(statusMatch[1]);
        }
        
        // Extract test name if specified
        let testName = 'New Test Suite';
        const nameRegex = /(?:called|named) ["'](.+?)["']/i;
        const nameMatch = command.match(nameRegex);
        if (nameMatch) {
            testName = nameMatch[1];
        }
        
        // Create the test suite
        const testSuite = {
            id: testSuiteId,
            name: testName,
            description: command,
            endpointId: endpoint.id,
            testCases: [
                {
                    id: testCaseId,
                    name: 'Basic Test',
                    inputParams: {},
                    expectedStatus: expectedStatus,
                    expectedResponse: {},
                    validateExactMatch: false
                }
            ],
            createdAt: new Date(),
            lastRun: null,
            results: null
        };
        
        // Add the test suite to the configuration
        this.config.tests.push(testSuite);
        this.renderTests();
        this.saveConfig();
        
        // Switch to the tests tab
        this.navigateTo('tests');
        
        this.log(`Created new test suite "${testName}" for endpoint "${endpoint.name}"`, 'info');
        this.showAlert(`Test suite "${testName}" created successfully`, 'success');
    }
    
    runTestsFromNL(command) {
        // Check if user wants to run all tests
        if (command.toLowerCase().includes('all') || 
            command.toLowerCase().includes('every')) {
            
            this.runAllTests();
            return;
        }
        
        // Try to identify which test suite to run
        let testSuite = null;
        
        for (const test of this.config.tests) {
            if (command.toLowerCase().includes(test.name.toLowerCase())) {
                testSuite = test;
                break;
            }
        }
        
        if (testSuite) {
            this.runTestSuite(testSuite.id);
            
            this.log(`Running test suite "${testSuite.name}"`, 'info');
            this.showAlert(`Running test suite "${testSuite.name}"`, 'success');
        } else {
            // If no specific test was identified but there are tests available, run all tests
            if (this.config.tests.length > 0) {
                this.runAllTests();
            } else {
                this.showAlert('No test suites available to run. Please create a test suite first.', 'warning');
            }
        }
    }
    
    deleteTestFromNL(command) {
        // Try to identify which test suite to delete
        let testSuite = null;
        
        for (const test of this.config.tests) {
            if (command.toLowerCase().includes(test.name.toLowerCase())) {
                testSuite = test;
                break;
            }
        }
        
        if (testSuite) {
            this.showConfirmation(
                `Are you sure you want to delete the test suite "${testSuite.name}"?`,
                () => {
                    this.deleteTestSuite(testSuite.id);
                }
            );
        } else {
            this.showAlert('Sorry, I couldn\'t identify which test suite to delete. Please be more specific.', 'warning');
        }
    }
    
    createWebhookFromNL(command) {
        // Extract relevant information from the command
        const doc = this.nlp(command);
        
        // Create the new webhook with a unique ID
        const id = this.generateId();
        
        // Try to extract URL
        let url = '';
        const urlRegex = /(https?:\/\/[^\s]+)/i;
        const urlMatch = command.match(urlRegex);
        if (urlMatch) {
            url = urlMatch[1];
        }
        
        // Extract name if specified, otherwise generate one
        let name = '';
        const nameRegex = /(?:called|named) ["'](.+?)["']/i;
        const nameMatch = command.match(nameRegex);
        if (nameMatch) {
            name = nameMatch[1];
        } else {
            name = 'New Webhook';
        }
        
        // Try to extract events
        const events = [];
        const eventTerms = {
            'request': ['request', 'requests', 'call', 'calls'],
            'response': ['response', 'responses', 'result', 'results'],
            'error': ['error', 'errors', 'exception', 'exceptions', 'fail', 'failure']
        };
        
        for (const [event, terms] of Object.entries(eventTerms)) {
            for (const term of terms) {
                if (command.toLowerCase().includes(term)) {
                    events.push(event);
                    break;
                }
            }
        }
        
        // Create the webhook
        const newWebhook = {
            id: id,
            name: name,
            url: url,
            description: command,
            events: events.length > 0 ? events : ['request', 'response', 'error'],
            headers: [],
            enabled: true,
            createdAt: new Date(),
            lastTriggered: null
        };
        
        // Add the webhook to the configuration
        this.config.webhooks = this.config.webhooks || [];
        this.config.webhooks.push(newWebhook);
        this.renderWebhooks();
        this.saveConfig();
        
        // Switch to the webhooks tab
        this.navigateTo('webhooks');
        
        this.log(`Created new webhook "${name}"`, 'info');
        this.showAlert(`Webhook "${name}" created successfully`, 'success');
    }
    
    deleteWebhookFromNL(command) {
        // Try to identify which webhook to delete
        let webhook = null;
        
        if (!this.config.webhooks) {
            this.showAlert('No webhooks available to delete.', 'warning');
            return;
        }
        
        for (const hook of this.config.webhooks) {
            if (command.toLowerCase().includes(hook.name.toLowerCase())) {
                webhook = hook;
                break;
            }
        }
        
        if (webhook) {
            this.showConfirmation(
                `Are you sure you want to delete the webhook "${webhook.name}"?`,
                () => {
                    this.deleteWebhook(webhook.id);
                }
            );
        } else {
            this.showAlert('Sorry, I couldn\'t identify which webhook to delete. Please be more specific.', 'warning');
        }
    }
    
    switchEnvironmentFromNL(command) {
        // Try to extract the environment name
        const environments = ['development', 'staging', 'production'];
        
        for (const env of environments) {
            if (command.toLowerCase().includes(env)) {
                this.switchEnvironment(env);
                
                this.log(`Switched to ${env} environment`, 'info');
                this.showAlert(`Switched to ${env} environment`, 'success');
                return;
            }
        }
        
        this.showAlert('Sorry, I couldn\'t identify which environment to switch to. Please specify development, staging, or production.', 'warning');
    }
    
    showEndpointsFromNL(command) {
        // Switch to the endpoints tab
        this.navigateTo('endpoints');
    }
    
    showTestsFromNL(command) {
        // Switch to the tests tab
        this.navigateTo('tests');
    }
    
    showSettingsFromNL(command) {
        // Switch to the settings tab
        this.navigateTo('settings');
    }
    
    navigateTo(section) {
        // Map section names to tab IDs
        const sectionMap = {
            'dashboard': 'dashboard',
            'endpoint': 'endpoints',
            'endpoints': 'endpoints',
            'test': 'tests',
            'tests': 'tests',
            'webhook': 'webhooks',
            'webhooks': 'webhooks',
            'mapping': 'mappings',
            'mappings': 'mappings',
            'transformation': 'transformations',
            'transformations': 'transformations',
            'auth': 'auth',
            'authentication': 'auth',
            'doc': 'docs',
            'docs': 'docs',
            'documentation': 'docs',
            'monitor': 'monitor',
            'monitoring': 'monitor',
            'log': 'logs',
            'logs': 'logs',
            'setting': 'settings',
            'settings': 'settings'
        };
        
        const tabId = sectionMap[section.toLowerCase()];
        if (tabId) {
            const tabElement = document.querySelector(`.nav-link[href="#${tabId}"]`);
            if (tabElement) {
                tabElement.click();
            }
        }
    }
    
    showHelp(command) {
        // Create a modal to show help content
        const helpContent = document.createElement('div');
        helpContent.className = 'modal fade';
        helpContent.id = 'nlpHelpModal';
        helpContent.tabIndex = '-1';
        helpContent.setAttribute('aria-hidden', 'true');
        
        // Check for specific help topics
        let title = 'NLP Command Help';
        let content = `
            <p>Here are some example commands you can use:</p>
            <ul>
                <li><strong>Create a new GET endpoint called "User API" with URL https://api.example.com/users</strong></li>
                <li><strong>Add a POST endpoint for creating users</strong></li>
                <li><strong>Test the User API endpoint</strong></li>
                <li><strong>Run all tests</strong></li>
                <li><strong>Create a webhook for error events</strong></li>
                <li><strong>Switch to production environment</strong></li>
                <li><strong>Show me the endpoints</strong></li>
                <li><strong>Save configuration to cloud</strong></li>
            </ul>
        `;
        
        // Check for specific topics
        if (command.toLowerCase().includes('endpoint')) {
            title = 'Endpoint Commands';
            content = `
                <p>Here are example endpoint commands:</p>
                <ul>
                    <li><strong>Create a new GET endpoint called "User API" with URL https://api.example.com/users</strong></li>
                    <li><strong>Add a POST endpoint with header "Content-Type" with value "application/json"</strong></li>
                    <li><strong>Test the User API endpoint</strong></li>
                    <li><strong>Delete the User API endpoint</strong></li>
                    <li><strong>Show all endpoints</strong></li>
                </ul>
            `;
        } else if (command.toLowerCase().includes('test')) {
            title = 'Test Commands';
            content = `
                <p>Here are example test commands:</p>
                <ul>
                    <li><strong>Create a test for the User API endpoint</strong></li>
                    <li><strong>Add a test with expected status 201</strong></li>
                    <li><strong>Run all tests</strong></li>
                    <li><strong>Run tests for User API</strong></li>
                    <li><strong>Delete the User API test</strong></li>
                </ul>
            `;
        } else if (command.toLowerCase().includes('webhook')) {
            title = 'Webhook Commands';
            content = `
                <p>Here are example webhook commands:</p>
                <ul>
                    <li><strong>Create a webhook for error events</strong></li>
                    <li><strong>Add a webhook called "Error Notifier" with URL https://example.com/webhook</strong></li>
                    <li><strong>Delete the Error Notifier webhook</strong></li>
                </ul>
            `;
        } else if (command.toLowerCase().includes('environment')) {
            title = 'Environment Commands';
            content = `
                <p>Here are example environment commands:</p>
                <ul>
                    <li><strong>Switch to development environment</strong></li>
                    <li><strong>Change to staging environment</strong></li>
                    <li><strong>Go to production environment</strong></li>
                </ul>
            `;
        }
        
        helpContent.innerHTML = `
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">${title}</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        ${content}
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Got it</button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(helpContent);
        
        // Show the modal
        const modal = new bootstrap.Modal(helpContent);
        modal.show();
        
        // Remove the modal from the DOM when it's hidden
        helpContent.addEventListener('hidden.bs.modal', () => {
            document.body.removeChild(helpContent);
        });
    }
    
    retrainNLPModels() {
        this.initializeNLPModels();
        
        // Add any custom vocabulary
        const customVocab = document.getElementById('customVocabulary');
        if (customVocab && customVocab.value && this.nlpModels.endpoints) {
            const terms = customVocab.value.split('\n').filter(term => term.trim());
            if (terms.length > 0) {
                this.nlpModels.endpoints.buildTrie(terms);
            }
        }
        
        this.showAlert('NLP models retrained successfully', 'success');
    }
    
    saveNLPSettings() {
        this.nlpSettings = {
            enabled: document.getElementById('enableNLP').checked,
            voiceCommands: document.getElementById('enableVoiceCommands').checked,
            autoComplete: document.getElementById('enableAutoComplete').checked,
            smartSearch: document.getElementById('enableSmartSearch').checked,
            intelligentMapping: document.getElementById('enableIntelligentMapping').checked
        };
        
        // Initialize or disable voice recognition based on settings
        if (this.nlpSettings.voiceCommands) {
            this.initializeVoiceRecognition();
        } else if (this.recognition) {
            // Stop voice recognition if it's active
            if (this.isListening) {
                this.recognition.stop();
                this.isListening = false;
            }
        }
        
        // Store settings in config
        this.config.nlpSettings = this.nlpSettings;
        this.saveConfig();
        
        this.showAlert('NLP settings saved successfully', 'success');
    }
    
    // NLP-enhanced endpoint generation from OpenAPI
    enhanceOpenAPIImport(specJson) {
        try {
            const spec = JSON.parse(specJson);
            
            // Process paths and convert to our endpoint format
            const endpoints = [];
            
            for (const [path, methods] of Object.entries(spec.paths)) {
                for (const [method, details] of Object.entries(methods)) {
                    if (['get', 'post', 'put', 'delete', 'patch'].includes(method)) {
                        const endpoint = {
                            id: this.generateId(),
                            name: details.summary || `${method.toUpperCase()} ${path}`,
                            method: method.toUpperCase(),
                            url: `${spec.servers[0]?.url || ''}${path}`,
                            description: details.description || '',
                            headers: [],
                            parameters: [],
                            // Other properties...
                        };
                        
                        // Use NLP to enhance the description and generate better naming
                        if (this.nlp && this.nlpSettings.enabled) {
                            if (details.description) {
                                const doc = this.nlp(details.description);
                                
                                // Extract key entities to improve the endpoint name
                                const entities = doc.nouns().out('array');
                                if (entities.length > 0) {
                                    // Use the most significant noun in the description
                                    const mainEntity = entities[0];
                                    endpoint.name = `${method.toUpperCase()} ${mainEntity} ${path.split('/').pop()}`;
                                }
                                
                                // Generate a more readable description
                                const verbs = {
                                    'get': 'Retrieves',
                                    'post': 'Creates',
                                    'put': 'Updates',
                                    'delete': 'Deletes',
                                    'patch': 'Partially updates'
                                };
                                
                                const verb = verbs[method] || 'Processes';
                                const resource = path.split('/').filter(Boolean).pop() || 'resource';
                                endpoint.description = `${verb} the ${resource} resource. ${details.description}`;
                            }
                        }
                        
                        // Process other properties...
                        
                        endpoints.push(endpoint);
                    }
                }
            }
            
            // Add imported endpoints to config
            this.config.endpoints.push(...endpoints);
            this.renderEndpoints();
            this.saveConfig();
            
            this.showAlert(`Successfully imported ${endpoints.length} endpoints from OpenAPI specification`, 'success');
            
            // Retrain NLP models with the new data
            this.retrainNLPModels();
            
        } catch (error) {
            this.showAlert(`Error importing OpenAPI spec: ${error.message}`, 'danger');
        }
    }
    
    // NLP-enhanced API documentation generation
    generateEnhancedDocs() {
        this.log('Generating enhanced API documentation', 'info');
        
        // Only enhance docs if NLP is enabled
        if (!this.nlp || !this.nlpSettings.enabled) {
            // Fall back to standard doc generation
            return this.generateDocs();
        }
        
        const docsContent = document.getElementById('docsContent');
        
        // Get API info
        const apiTitle = document.getElementById('api-title').value || 'API Documentation';
        const apiDescription = document.getElementById('api-description').value || 'Generated API documentation';
        const apiVersion = document.getElementById('api-version').value || '1.0.0';
        const apiBaseUrl = document.getElementById('api-base-url').value || '';
        
        // Generate markdown content with NLP enhancements
        const markdownContent = this.generateNLPEnhancedDocs(apiTitle, apiDescription, apiVersion, apiBaseUrl);
        
        // Display the documentation
        docsContent.innerHTML = `
            <div class="mb-3">
                <div class="d-flex justify-content-between mb-3">
                    <h3>${apiTitle} - v${apiVersion}</h3>
                    <div>
                        <button class="btn btn-outline-secondary btn-sm" onclick="nlpManager.copyDocsToClipboard()">
                            <i class="bi bi-clipboard"></i> Copy Markdown
                        </button>
                    </div>
                </div>
                <div>${apiDescription}</div>
                ${apiBaseUrl ? `<div><strong>Base URL:</strong> ${apiBaseUrl}</div>` : ''}
            </div>
            
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Documentation</h5>
                </div>
                <div class="card-body">
                    <pre class="response-container">${markdownContent}</pre>
                </div>
            </div>
        `;
    }
    
    generateNLPEnhancedDocs(title, description, version, baseUrl) {
        let markdown = `# ${title}\n\n`;
        markdown += `${description}\n\n`;
        markdown += `**Version:** ${version}\n\n`;
        
        if (baseUrl) {
            markdown += `**Base URL:** ${baseUrl}\n\n`;
        }
        
        // Add endpoints
        if (this.config.endpoints.length > 0) {
            markdown += `## Endpoints\n\n`;
            
            // Group endpoints by resource using NLP
            const endpointGroups = this.groupEndpointsByResource();
            
            for (const [resource, endpoints] of Object.entries(endpointGroups)) {
                markdown += `### ${resource}\n\n`;
                
                // Generate resource description using NLP
                if (this.nlp) {
                    const resourceDesc = this.generateResourceDescription(resource, endpoints);
                    markdown += `${resourceDesc}\n\n`;
                }
                
                // Add endpoints in this resource group
                for (const endpoint of endpoints) {
                    markdown += `#### ${endpoint.name}\n\n`;
                    markdown += `\`${endpoint.method} ${endpoint.url}\`\n\n`;
                    
                    // Enhanced description with use cases
                    if (endpoint.description) {
                        markdown += `${endpoint.description}\n\n`;
                        
                        // Add auto-generated use cases
                        const useCases = this.generateUseCases(endpoint);
                        if (useCases) {
                            markdown += `**Use Cases:**\n${useCases}\n\n`;
                        }
                    }
                    
                    // Headers, parameters, etc...
                    // Include the same content as the original docs generator
                }
            }
        }
        
        // Add other sections similarly enhanced with NLP
        
        return markdown;
    }
    
    groupEndpointsByResource() {
        if (!this.nlp || !this.nlpSettings.enabled) {
            // Simple grouping without NLP
            const groups = {};
            
            for (const endpoint of this.config.endpoints) {
                // Extract resource from URL
                let resource = 'General';
                if (endpoint.url) {
                    try {
                        const url = new URL(endpoint.url);
                        const pathSegments = url.pathname.split('/').filter(Boolean);
                        if (pathSegments.length > 0) {
                            resource = this.capitalizeFirstLetter(pathSegments[0]);
                        }
                    } catch (e) {
                        // URL parsing failed, use a default group
                    }
                }
                
                if (!groups[resource]) {
                    groups[resource] = [];
                }
                
                groups[resource].push(endpoint);
            }
            
            return groups;
        }
        
        // Enhanced grouping with NLP
        const groups = {};
        
        // First pass - extract resources from endpoint names and URLs
        for (const endpoint of this.config.endpoints) {
            // Use NLP to extract the main resource from the name or description
            let resource = 'General';
            
            if (endpoint.name) {
                const doc = this.nlp(endpoint.name);
                const nouns = doc.nouns().out('array');
                if (nouns.length > 0) {
                    resource = this.capitalizeFirstLetter(nouns[0]);
                }
            }
            
            // If no resource found, try the URL
            if (resource === 'General' && endpoint.url) {
                try {
                    const url = new URL(endpoint.url);
                    const pathSegments = url.pathname.split('/').filter(Boolean);
                    if (pathSegments.length > 0) {
                        resource = this.capitalizeFirstLetter(pathSegments[0]);
                    }
                } catch (e) {
                    // URL parsing failed, keep the default
                }
            }
            
            if (!groups[resource]) {
                groups[resource] = [];
            }
            
            groups[resource].push(endpoint);
        }
        
        // Second pass - merge similar resources using NLP
        const mergedGroups = {};
        const processedResources = new Set();
        
        for (const [resource1, endpoints1] of Object.entries(groups)) {
            if (processedResources.has(resource1)) continue;
            
            processedResources.add(resource1);
            mergedGroups[resource1] = [...endpoints1];
            
            // Compare with other resources
            for (const [resource2, endpoints2] of Object.entries(groups)) {
                if (resource1 === resource2 || processedResources.has(resource2)) continue;
                
                // Check if resources are similar
                const similarity = this.getResourceSimilarity(resource1, resource2);
                if (similarity > 0.7) { // Threshold for merging
                    mergedGroups[resource1].push(...endpoints2);
                    processedResources.add(resource2);
                }
            }
        }
        
        return mergedGroups;
    }
    
    getResourceSimilarity(resource1, resource2) {
        // Simple similarity based on string comparison
        // In a real implementation, this would use more sophisticated NLP techniques
        
        // Convert to lowercase for comparison
        const r1 = resource1.toLowerCase();
        const r2 = resource2.toLowerCase();
        
        // Check for exact match or plurals
        if (r1 === r2) return 1.0;
        if (r1 + 's' === r2 || r1 === r2 + 's') return 0.9;
        
        // Check for string similarity
        const shorter = r1.length < r2.length ? r1 : r2;
        const longer = r1.length >= r2.length ? r1 : r2;
        
        if (longer.includes(shorter)) return 0.8;
        
        // Count matching characters
        let matches = 0;
        for (let i = 0; i < shorter.length; i++) {
            if (longer.includes(shorter[i])) {
                matches++;
            }
        }
        
        return matches / longer.length;
    }
    
    generateResourceDescription(resource, endpoints) {
        if (!this.nlp) return '';
        
        // Extract common elements from all endpoints in this resource
        const methods = endpoints.map(ep => ep.method);
        const uniqueMethods = [...new Set(methods)];
        
        // Check if this resource has CRUD operations
        const hasCRUD = 
            methods.includes('GET') && 
            methods.includes('POST') && 
            (methods.includes('PUT') || methods.includes('PATCH')) && 
            methods.includes('DELETE');
        
        if (hasCRUD) {
            return `This resource provides full CRUD (Create, Read, Update, Delete) operations for ${resource} objects.`;
        } else {
            const methodDescriptions = {
                'GET': 'retrieve',
                'POST': 'create',
                'PUT': 'update',
                'PATCH': 'partially update',
                'DELETE': 'delete'
            };
            
            const operationsList = uniqueMethods
                .map(method => methodDescriptions[method])
                .join(', ');
            
            return `This resource provides operations to ${operationsList} ${resource} objects.`;
        }
    }
    
    generateUseCases(endpoint) {
        if (!this.nlp) return '';
        
        // Generate use cases based on the endpoint method and path
        const method = endpoint.method;
        let resource = '';
        
        if (endpoint.url) {
            try {
                const url = new URL(endpoint.url);
                const pathSegments = url.pathname.split('/').filter(Boolean);
                if (pathSegments.length > 0) {
                    resource = pathSegments[pathSegments.length - 1];
                }
            } catch (e) {
                // URL parsing failed
            }
        }
        
        if (!resource) return '';
        
        // Generate use cases based on method
        const useCases = [];
        
        switch (method) {
            case 'GET':
                useCases.push(`- Retrieve ${resource} information`);
                if (endpoint.url.includes(':id') || endpoint.url.includes('{id}')) {
                    useCases.push(`- Get details for a specific ${resource}`);
                } else {
                    useCases.push(`- List all ${resource} items`);
                    useCases.push(`- Filter ${resource} based on criteria`);
                }
                break;
                
            case 'POST':
                useCases.push(`- Create a new ${resource}`);
                useCases.push(`- Submit ${resource} data for processing`);
                break;
                
            case 'PUT':
                useCases.push(`- Update an existing ${resource} completely`);
                useCases.push(`- Replace all ${resource} information`);
                break;
                
            case 'PATCH':
                useCases.push(`- Partially update a ${resource}`);
                useCases.push(`- Modify specific ${resource} attributes`);
                break;
                
            case 'DELETE':
                useCases.push(`- Remove a ${resource}`);
                useCases.push(`- Delete a ${resource} and its associated data`);
                break;
        }
        
        return useCases.join('\n');
    }
    
    // Add NLP-enhanced test generation
    generateTestSuiteFromEndpoint(endpointId) {
        const endpoint = this.config.endpoints.find(e => e.id === endpointId);
        if (!endpoint) return null;
        
        // Only use NLP if enabled
        if (!this.nlp || !this.nlpSettings.enabled) {
            // Fall back to simple test generation
            return this.createBasicTestSuite(endpoint);
        }
        
        // Create a new test suite with NLP-enhanced test cases
        const testSuiteId = this.generateId();
        
        // Generate test cases based on endpoint properties
        const testCases = [];
        
        // Basic happy path test case
        testCases.push({
            id: this.generateId(),
            name: `${endpoint.method} ${new URL(endpoint.url).pathname.split('/').pop()} - Success`,
            inputParams: this.generateInputParams(endpoint),
            expectedStatus: this.getExpectedSuccessStatus(endpoint.method),
            expectedResponse: {},
            validateExactMatch: false
        });
        
        // Add validation test cases
        if (endpoint.method === 'POST' || endpoint.method === 'PUT' || endpoint.method === 'PATCH') {
            // Missing required field test
            testCases.push({
                id: this.generateId(),
                name: 'Validation Error - Missing Required Field',
                inputParams: {},
                expectedStatus: 400,
                expectedResponse: { error: true },
                validateExactMatch: false
            });
            
            // Invalid format test
            testCases.push({
                id: this.generateId(),
                name: 'Validation Error - Invalid Format',
                inputParams: { invalid: 'data' },
                expectedStatus: 400,
                expectedResponse: { error: true },
                validateExactMatch: false
            });
        }
        
        // Add authentication test if endpoint has auth
        if (endpoint.auth && endpoint.auth.type !== 'none') {
            testCases.push({
                id: this.generateId(),
                name: 'Authentication Error',
                inputParams: this.generateInputParams(endpoint),
                expectedStatus: 401,
                expectedResponse: { error: true },
                validateExactMatch: false
            });
        }
        
        // Add not found test for endpoints with ID in path
        if ((endpoint.url.includes(':id') || endpoint.url.includes('{id}')) && 
            (endpoint.method === 'GET' || endpoint.method === 'PUT' || endpoint.method === 'PATCH' || endpoint.method === 'DELETE')) {
            testCases.push({
                id: this.generateId(),
                name: 'Not Found Error',
                inputParams: { id: '999999' },
                expectedStatus: 404,
                expectedResponse: { error: true },
                validateExactMatch: false
            });
        }
        
        // Create the test suite
        const testSuite = {
            id: testSuiteId,
            name: `${endpoint.name} Test Suite`,
            description: `Comprehensive test suite for the ${endpoint.name} endpoint`,
            endpointId: endpoint.id,
            testCases: testCases,
            createdAt: new Date(),
            lastRun: null,
            results: null
        };
        
        return testSuite;
    }
    
    createBasicTestSuite(endpoint) {
        // Simple test suite without NLP enhancements
        const testSuiteId = this.generateId();
        
        const testSuite = {
            id: testSuiteId,
            name: `${endpoint.name} Test Suite`,
            description: `Test suite for the ${endpoint.name} endpoint`,
            endpointId: endpoint.id,
            testCases: [
                {
                    id: this.generateId(),
                    name: 'Basic Test',
                    inputParams: {},
                    expectedStatus: this.getExpectedSuccessStatus(endpoint.method),
                    expectedResponse: {},
                    validateExactMatch: false
                }
            ],
            createdAt: new Date(),
            lastRun: null,
            results: null
        };
        
        return testSuite;
    }
    
    generateInputParams(endpoint) {
        // Extract parameter names from URL
        const params = {};
        
        if (endpoint.url) {
            try {
                const pathParams = [];
                const url = endpoint.url;
                
                // Extract path parameters like :id or {id}
                const colonParams = url.match(/:([a-zA-Z0-9_]+)/g);
                if (colonParams) {
                    colonParams.forEach(param => {
                        const paramName = param.substring(1);
                        pathParams.push(paramName);
                    });
                }
                
                const bracketParams = url.match(/\{([a-zA-Z0-9_]+)\}/g);
                if (bracketParams) {
                    bracketParams.forEach(param => {
                        const paramName = param.substring(1, param.length - 1);
                        pathParams.push(paramName);
                    });
                }
                
                // Add sample values for path parameters
                pathParams.forEach(param => {
                    if (param === 'id') {
                        params[param] = '1';
                    } else {
                        params[param] = 'sample';
                    }
                });
                
                // Extract query parameters from config
                if (endpoint.parameters) {
                    endpoint.parameters.forEach(param => {
                        if (param.name) {
                            params[param.name] = param.value || 'sample';
                        }
                    });
                }
                
                // For POST/PUT/PATCH, try to extract body parameters
                if ((endpoint.method === 'POST' || endpoint.method === 'PUT' || endpoint.method === 'PATCH') && 
                    endpoint.body && endpoint.contentType === 'application/json') {
                    try {
                        const bodyParams = JSON.parse(endpoint.body);
                        Object.assign(params, bodyParams);
                    } catch (e) {
                        // Invalid JSON, ignore
                    }
                }
                
            } catch (e) {
                // URL parsing failed
            }
        }
        
        return params;
    }
    
    getExpectedSuccessStatus(method) {
        switch (method) {
            case 'POST':
                return 201;
            case 'PUT':
            case 'PATCH':
            case 'DELETE':
                return 200;
            case 'GET':
            default:
                return 200;
        }
    }
}

// Initialize the NLP-enhanced API Manager
const nlpManager = new NLPEnhancedAPIManager();

// Make it globally accessible
window.nlpManager = nlpManager;


    </script>
</body>
</html>
